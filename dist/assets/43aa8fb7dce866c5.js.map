{"version":3,"file":"43aa8fb7dce866c5.js","mappings":"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","sources":["webpack://tastatur.com/./packages/mkboard-widget/lib/components/text/Kbd.tsx","webpack://tastatur.com/./packages/mkboard-widget/lib/components/text/Kbd.module.less?90e0","webpack://tastatur.com/./packages/mkboard-widget/lib/hooks/use-document-visibility.ts","webpack://tastatur.com/./packages/page-typing-test/lib/session/types.ts","webpack://tastatur.com/./packages/page-typing-test/lib/session/duration.ts","webpack://tastatur.com/./packages/page-typing-test/lib/session/replaystate.ts","webpack://tastatur.com/./packages/page-typing-test/lib/session/session.ts","webpack://tastatur.com/./packages/page-typing-test/lib/settings.ts","webpack://tastatur.com/./packages/mkboard-widget/lib/utils/animationframes.ts","webpack://tastatur.com/./packages/page-typing-test/lib/components/ReplayProgress.tsx","webpack://tastatur.com/./packages/page-typing-test/lib/components/Replay.tsx","webpack://tastatur.com/./packages/page-typing-test/lib/components/Replay.module.less?ff18","webpack://tastatur.com/./packages/page-typing-test/lib/components/ReportScreen.tsx","webpack://tastatur.com/./packages/page-typing-test/lib/components/ReportScreen.module.less?244d","webpack://tastatur.com/./packages/page-typing-test/lib/components/settings/text/BookSettings.tsx","webpack://tastatur.com/./packages/page-typing-test/lib/components/settings/text/CommonWordsSettings.tsx","webpack://tastatur.com/./packages/page-typing-test/lib/components/settings/text/PseudoWordsSettings.tsx","webpack://tastatur.com/./packages/page-typing-test/lib/components/settings/TextGeneratorSettings.tsx","webpack://tastatur.com/./packages/page-typing-test/lib/generators/book.ts","webpack://tastatur.com/./packages/page-typing-test/lib/generators/pseudowords.ts","webpack://tastatur.com/./packages/page-typing-test/lib/generators/commonwords.ts","webpack://tastatur.com/./packages/page-typing-test/lib/generators/TextGeneratorLoader.tsx","webpack://tastatur.com/./packages/page-typing-test/lib/components/LineTemplate.tsx","webpack://tastatur.com/./packages/page-typing-test/lib/components/LineTemplate.module.less?b992","webpack://tastatur.com/./packages/page-typing-test/lib/components/TestProgress.tsx","webpack://tastatur.com/./packages/page-typing-test/lib/components/TestProgress.module.less?fe9e","webpack://tastatur.com/./packages/page-typing-test/lib/components/TestScreen.module.less?e6b5","webpack://tastatur.com/./packages/page-typing-test/lib/components/Toolbar.tsx","webpack://tastatur.com/./packages/page-typing-test/lib/components/Toolbar.module.less?0f18","webpack://tastatur.com/./packages/page-typing-test/lib/components/TestScreen.tsx","webpack://tastatur.com/./packages/page-typing-test/lib/views.tsx","webpack://tastatur.com/./packages/page-typing-test/lib/components/SettingsScreen.tsx","webpack://tastatur.com/./packages/page-typing-test/lib/TypingTestPage.tsx","webpack://tastatur.com/./packages/mkboard-pages-browser/lib/pages/typing-test.tsx"],"sourcesContent":["import { clsx } from \"clsx\";\nimport { type ReactNode } from \"react\";\nimport * as styles from \"./Kbd.module.less\";\nimport { type KbdProps } from \"./Kbd.types.ts\";\n\nexport function Kbd(props: KbdProps): ReactNode {\n  const { as: Component = \"kbd\", id, title, className, children } = props;\n  return (\n    <Component id={id} className={clsx(styles.root, className)} title={title}>\n      {children}\n    </Component>\n  );\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"qmWqrcoprm\";\nexport { _1 as \"root\" }\n","import { useState } from \"react\";\nimport { useDocumentEvent } from \"./use-document-event.ts\";\n\nexport const useDocumentVisibility = () => {\n  const [visible, setVisible] = useState(isDocumentVisible());\n  useDocumentEvent(\"visibilitychange\", () => {\n    setVisible(isDocumentVisible());\n  });\n  return visible;\n};\n\nexport const isDocumentVisible = () => {\n  return document.visibilityState === \"visible\";\n};\n","import {\r\n  type Line,\r\n  type LineList,\r\n  type Stats,\r\n  type Step,\r\n  type TextDisplaySettings,\r\n  type TextInputSettings,\r\n} from \"@mkboard/textinput\";\r\nimport { type AnyEvent } from \"@mkboard/textinput-events\";\r\n\r\nexport enum DurationType {\r\n  Time = 1,\r\n  Length = 2,\r\n}\r\n\r\nexport type Duration = {\r\n  readonly type: DurationType;\r\n  readonly value: number;\r\n};\r\n\r\nexport type Progress = {\r\n  /** Time passed in millis. */\r\n  readonly time: number;\r\n  /** Chars inputted. */\r\n  readonly length: number;\r\n  /** Progress made, [0, 1]. */\r\n  readonly progress: number;\r\n  /** Typing speed so far. */\r\n  readonly speed: number;\r\n};\r\n\r\nexport type SessionSettings = {\r\n  readonly duration: Duration;\r\n  readonly textInput: TextInputSettings;\r\n  readonly textDisplay: TextDisplaySettings;\r\n  readonly numLines: number;\r\n  readonly numCols: number;\r\n};\r\n\r\nexport type SessionLine = Line & {\r\n  readonly index: number;\r\n  readonly mark: unknown;\r\n  readonly text: string;\r\n  readonly progress: Progress | null;\r\n};\r\n\r\nexport type SessionLines = LineList<SessionLine>;\r\n\r\nexport type TestResult = {\r\n  readonly stats: Stats;\r\n  readonly steps: readonly Step[];\r\n  readonly events: readonly AnyEvent[];\r\n};\r\n","import { computeSpeed, type Step } from \"@mkboard/textinput\";\r\nimport { type Duration, DurationType, type Progress } from \"./types.ts\";\r\n\r\nexport function timeDuration(time: number): Duration {\r\n  return { type: DurationType.Time, value: time };\r\n}\r\n\r\nexport function lengthDuration(length: number): Duration {\r\n  return { type: DurationType.Length, value: length };\r\n}\r\n\r\nexport const duration_15_seconds = timeDuration(15_000);\r\nexport const duration_30_seconds = timeDuration(30_000);\r\nexport const duration_60_seconds = timeDuration(60_000);\r\nexport const duration_100_chars = lengthDuration(100);\r\nexport const duration_500_chars = lengthDuration(500);\r\nexport const duration_1000_chars = lengthDuration(1000);\r\n\r\nexport type NamedDuration = {\r\n  readonly label: string;\r\n  readonly duration: Duration;\r\n};\r\n\r\nexport const durations: readonly NamedDuration[] = [\r\n  { label: \"15 seconds\", duration: duration_15_seconds },\r\n  { label: \"30 seconds\", duration: duration_30_seconds },\r\n  { label: \"one minute\", duration: duration_60_seconds },\r\n  { label: \"100 characters\", duration: duration_100_chars },\r\n  { label: \"500 characters\", duration: duration_500_chars },\r\n  { label: \"1000 characters\", duration: duration_1000_chars },\r\n];\r\n\r\nexport function computeProgress(\r\n  duration: Duration,\r\n  steps: readonly Step[],\r\n): { progress: Progress; completed: boolean } {\r\n  const { length } = steps;\r\n  let time = 0;\r\n  let progress = 0;\r\n  let speed = 0;\r\n  let completed = false;\r\n  if (length > 0) {\r\n    const head = steps[0];\r\n    const curr = steps[length - 1];\r\n    time = curr.timeStamp - head.timeStamp;\r\n    speed = computeSpeed(length, time);\r\n    switch (duration.type) {\r\n      case DurationType.Time: {\r\n        progress = time / duration.value;\r\n        completed = time >= duration.value;\r\n        break;\r\n      }\r\n      case DurationType.Length: {\r\n        progress = length / duration.value;\r\n        completed = length >= duration.value;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    progress: {\r\n      time,\r\n      length,\r\n      progress,\r\n      speed,\r\n    },\r\n    completed,\r\n  };\r\n}\r\n","import { type KeyId } from \"@mkboard/keyboard\";\r\nimport { Timer } from \"@mkboard/lang\";\r\nimport {\r\n  computeSpeed,\r\n  type Step,\r\n  TextInput,\r\n  type TextInputSettings,\r\n} from \"@mkboard/textinput\";\r\nimport { addKey, type AnyEvent, deleteKey } from \"@mkboard/textinput-events\";\r\nimport { type Progress } from \"./types.ts\";\r\n\r\nexport type State = \"starting\" | \"running\" | \"finished\";\r\n\r\nexport class ReplayState {\r\n  readonly #settings: TextInputSettings;\r\n  readonly #lines: readonly string[];\r\n  readonly #events: readonly AnyEvent[];\r\n  readonly #progress: ReplayProgress;\r\n  #state!: State;\r\n  #timer!: Timer;\r\n  #lineIndex!: number;\r\n  #eventIndex!: number;\r\n  #textInput!: TextInput;\r\n  #depressedKeys!: KeyId[];\r\n\r\n  constructor(\r\n    settings: TextInputSettings,\r\n    steps: readonly Step[],\r\n    events: readonly AnyEvent[],\r\n  ) {\r\n    this.#settings = settings;\r\n    this.#lines = splitLines(steps);\r\n    this.#events = shiftTimeStamps(events);\r\n    this.#progress = new ReplayProgress(steps);\r\n    this.reset(\"starting\");\r\n  }\r\n\r\n  reset(state: State = \"starting\") {\r\n    this.#progress.reset();\r\n    this.#state = state;\r\n    this.#timer = new Timer();\r\n    this.#lineIndex = 0;\r\n    this.#eventIndex = 0;\r\n    this.#textInput = this.#makeTextInput();\r\n    this.#depressedKeys = [];\r\n  }\r\n\r\n  get progress() {\r\n    return this.#progress;\r\n  }\r\n\r\n  get state() {\r\n    return this.#state;\r\n  }\r\n\r\n  get delay() {\r\n    switch (this.#state) {\r\n      case \"starting\":\r\n        return 3000;\r\n      case \"finished\":\r\n        return 3000;\r\n    }\r\n    const event = this.#events[this.#eventIndex];\r\n    return Math.max(0, event.timeStamp - this.#timer.elapsed);\r\n  }\r\n\r\n  step() {\r\n    switch (this.#state) {\r\n      case \"starting\":\r\n        this.reset(\"running\");\r\n        return;\r\n      case \"finished\":\r\n        this.reset(\"starting\");\r\n        return;\r\n    }\r\n    const event = this.#events[this.#eventIndex];\r\n    switch (event.type) {\r\n      case \"input\":\r\n        this.#textInput.onInput(event);\r\n        if (this.#textInput.completed) {\r\n          this.#lineIndex += 1;\r\n          if (this.#lineIndex < this.#lines.length) {\r\n            this.#textInput = this.#makeTextInput();\r\n          }\r\n        }\r\n        break;\r\n      case \"keydown\":\r\n        this.#depressedKeys = addKey(this.#depressedKeys, event.code);\r\n        break;\r\n      case \"keyup\":\r\n        this.#depressedKeys = deleteKey(this.#depressedKeys, event.code);\r\n        break;\r\n    }\r\n    this.#eventIndex += 1;\r\n    if (this.#events.length === this.#eventIndex) {\r\n      this.#state = \"finished\";\r\n    }\r\n  }\r\n\r\n  get chars() {\r\n    return this.#textInput.chars;\r\n  }\r\n\r\n  get lines() {\r\n    return this.#textInput.lines;\r\n  }\r\n\r\n  get depressedKeys() {\r\n    return this.#depressedKeys;\r\n  }\r\n\r\n  #makeTextInput() {\r\n    return new TextInput(this.#lines[this.#lineIndex], this.#settings, () => {\r\n      this.#progress.bump();\r\n    });\r\n  }\r\n}\r\n\r\nexport class ReplayProgress implements Progress {\r\n  readonly #steps: readonly Step[];\r\n  #index!: number;\r\n  #elapsed!: number;\r\n  #timer!: Timer;\r\n  #last!: number;\r\n  #speed!: number;\r\n\r\n  constructor(steps: readonly Step[]) {\r\n    this.#steps = [...steps];\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    this.#index = 0;\r\n    this.#elapsed = 0;\r\n    this.#timer = new Timer();\r\n    this.#last = 0;\r\n    this.#speed = 0;\r\n  }\r\n\r\n  get time() {\r\n    if (this.#index === this.#steps.length) {\r\n      return (this.#last = this.#elapsed);\r\n    } else {\r\n      return (this.#last = Math.max(\r\n        this.#last,\r\n        this.#elapsed + this.#timer.elapsed,\r\n      ));\r\n    }\r\n  }\r\n\r\n  get length() {\r\n    return this.#steps.length;\r\n  }\r\n\r\n  get progress() {\r\n    return this.#index;\r\n  }\r\n\r\n  get speed() {\r\n    return this.#speed;\r\n  }\r\n\r\n  bump() {\r\n    const head = this.#steps[0];\r\n    const curr = this.#steps[this.#index];\r\n    this.#index += 1;\r\n    this.#elapsed = curr.timeStamp - head.timeStamp;\r\n    this.#timer = new Timer();\r\n    this.#speed = computeSpeed(this.#index, this.#elapsed);\r\n  }\r\n}\r\n\r\nfunction shiftTimeStamps(events: readonly AnyEvent[]) {\r\n  const result: AnyEvent[] = [];\r\n  let timeStamp = 0;\r\n  for (const event of events) {\r\n    if (result.length === 0) {\r\n      timeStamp = event.timeStamp;\r\n    }\r\n    result.push({ ...event, timeStamp: event.timeStamp - timeStamp });\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction splitLines(steps: readonly Step[], limit: number = 50) {\r\n  const lines: string[] = [];\r\n  let line = \"\";\r\n  let ws = false;\r\n  for (let i = 0; i < steps.length; i++) {\r\n    const { codePoint } = steps[i];\r\n    if (codePoint === 0x0020) {\r\n      line += String.fromCodePoint(codePoint);\r\n      ws = true;\r\n    } else {\r\n      if (ws) {\r\n        if (line.length >= limit) {\r\n          lines.push(line);\r\n          line = \"\";\r\n        }\r\n      }\r\n      line += String.fromCodePoint(codePoint);\r\n      ws = false;\r\n    }\r\n  }\r\n  if (line.length > 0) {\r\n    lines.push(line);\r\n  }\r\n  return lines;\r\n}\r\n","import {\r\n  type Feedback,\r\n  splitStyledText,\r\n  type Step,\r\n  TextInput,\r\n} from \"@mkboard/textinput\";\r\nimport {\r\n  type AnyEvent,\r\n  type IInputEvent,\r\n  type IKeyboardEvent,\r\n} from \"@mkboard/textinput-events\";\r\nimport { type TextGenerator } from \"../generators/index.ts\";\r\nimport { computeProgress } from \"./duration.ts\";\r\nimport {\r\n  type Progress,\r\n  type SessionLine,\r\n  type SessionLines,\r\n  type SessionSettings,\r\n} from \"./types.ts\";\r\n\r\nexport class Session {\r\n  static readonly emptyLines = {\r\n    text: \"\",\r\n    lines: [],\r\n  } satisfies SessionLines;\r\n  static readonly emptyProgress = {\r\n    time: 0,\r\n    length: 0,\r\n    progress: 0,\r\n    speed: 0,\r\n  } satisfies Progress;\r\n\r\n  /** A list of events to replay. */\r\n  #events: AnyEvent[] = [];\r\n  /** The currently visible lines. */\r\n  #lines!: SessionLine[];\r\n  /** The index of the edited line. */\r\n  #activeLine!: number;\r\n  /** The text input for the edited line. */\r\n  #textInput!: TextInput;\r\n  /** The steps accumulated from all lines. */\r\n  #steps!: Step[];\r\n  /** Generates unique React element keys. */\r\n  #index = 0;\r\n\r\n  constructor(\r\n    readonly settings: SessionSettings,\r\n    readonly generator: TextGenerator,\r\n  ) {\r\n    this.#lines = [];\r\n    this.#activeLine = 0;\r\n    this.#steps = [];\r\n    while (this.#lines.length < this.settings.numLines) {\r\n      this.#appendLine();\r\n    }\r\n    this.#setActiveLine();\r\n  }\r\n\r\n  getEvents(): readonly AnyEvent[] {\r\n    return this.#events;\r\n  }\r\n\r\n  getLines(): SessionLines {\r\n    return { text: \"\", lines: this.#lines };\r\n  }\r\n\r\n  getSteps(): readonly Step[] {\r\n    return this.#steps;\r\n  }\r\n\r\n  handleKeyDown = (event: IKeyboardEvent) => {\r\n    this.#addEvent(event);\r\n  };\r\n\r\n  handleKeyUp = (event: IKeyboardEvent) => {\r\n    this.#addEvent(event);\r\n  };\r\n\r\n  handleInput = (\r\n    event: IInputEvent,\r\n  ): {\r\n    feedback: Feedback;\r\n    progress: Progress;\r\n    completed: boolean;\r\n  } => {\r\n    this.#addEvent(event);\r\n    const feedback = this.#textInput.onInput(event);\r\n    const { progress, completed } = computeProgress(\r\n      this.settings.duration,\r\n      this.#steps,\r\n    );\r\n    this.#updateActiveLine(progress);\r\n    if (this.#textInput.completed) {\r\n      if (this.#activeLine < this.#lines.length - 3) {\r\n        this.#activeLine += 1;\r\n      } else {\r\n        this.#lines.shift();\r\n        this.#appendLine();\r\n      }\r\n      this.#setActiveLine();\r\n    }\r\n    return { feedback, progress, completed };\r\n  };\r\n\r\n  #addEvent(event: AnyEvent) {\r\n    this.#events.push(event);\r\n  }\r\n\r\n  #appendLine() {\r\n    const mark = this.generator.mark();\r\n    const text = this.#generateLine();\r\n    const chars = splitStyledText(text);\r\n    const index = (this.#index += 1);\r\n    this.#lines.push({\r\n      mark,\r\n      index,\r\n      text,\r\n      chars,\r\n      progress: null,\r\n    });\r\n  }\r\n\r\n  #setActiveLine() {\r\n    const { text } = this.#lines[this.#activeLine];\r\n    this.#textInput = new TextInput(text, this.settings.textInput, (step) => {\r\n      this.#steps.push(step);\r\n    });\r\n    this.#updateActiveLine();\r\n  }\r\n\r\n  #updateActiveLine(progress: Progress | null = null) {\r\n    const { mark, index, text } = this.#lines[this.#activeLine];\r\n    const { chars } = this.#textInput;\r\n    this.#lines[this.#activeLine] = {\r\n      mark,\r\n      index,\r\n      text,\r\n      chars,\r\n      progress,\r\n    };\r\n  }\r\n\r\n  #generateLine() {\r\n    const {\r\n      settings: { numCols },\r\n      generator,\r\n    } = this;\r\n    let line = \"\";\r\n    while (true) {\r\n      const mark = generator.mark();\r\n      const word = generator.nextWord();\r\n      if (line.length > 0 && line.length + word.length + 1 > numCols) {\r\n        generator.reset(mark);\r\n        break;\r\n      }\r\n      line += `${word} `;\r\n    }\r\n    return line;\r\n  }\r\n}\r\n","import { Book } from \"@mkboard/content\";\r\nimport { Language } from \"@mkboard/keyboard\";\r\nimport {\r\n  enumProp,\r\n  itemProp,\r\n  numberProp,\r\n  type Settings,\r\n  useSettings,\r\n} from \"@mkboard/settings\";\r\nimport {\r\n  type TextDisplaySettings,\r\n  type TextInputSettings,\r\n  toTextDisplaySettings,\r\n  toTextInputSettings,\r\n} from \"@mkboard/textinput\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n  type Duration,\r\n  duration_15_seconds,\r\n  DurationType,\r\n} from \"./session/index.ts\";\r\n\r\nexport enum TextSourceType {\r\n  CommonWords = 1,\r\n  PseudoWords = 2,\r\n  Book = 3,\r\n}\r\n\r\nexport type CommonWordsSource = {\r\n  readonly type: TextSourceType.CommonWords;\r\n  readonly language: Language;\r\n  readonly wordListSize: number;\r\n};\r\n\r\nexport type PseudoWordsSource = {\r\n  readonly type: TextSourceType.PseudoWords;\r\n  readonly language: Language;\r\n};\r\n\r\nexport type BookSource = {\r\n  readonly type: TextSourceType.Book;\r\n  readonly book: Book;\r\n  readonly paragraphIndex: number;\r\n};\r\n\r\nexport type TextSource = CommonWordsSource | PseudoWordsSource | BookSource;\r\n\r\nexport const typingTestProps = {\r\n  type: enumProp(\r\n    \"typingTest.textSource.type\",\r\n    TextSourceType,\r\n    TextSourceType.CommonWords,\r\n  ),\r\n  language: itemProp(\r\n    \"typingTest.textSource.language\",\r\n    Language.ALL,\r\n    Language.EN,\r\n  ),\r\n  wordList: {\r\n    wordListSize: numberProp(\"typingTest.wordList.wordListSize\", 1000, {\r\n      min: 10,\r\n      max: 1000,\r\n    }),\r\n  } as const,\r\n  book: itemProp(\"typingTest.book\", Book.ALL, Book.EN_ALICE_WONDERLAND),\r\n  bookParagraphIndex: numberProp(\"typingTest.book.paragraphIndex\", 0, {\r\n    min: 0,\r\n    max: 1000,\r\n  }),\r\n  duration: {\r\n    type: enumProp(\"typingTest.duration.type\", DurationType, DurationType.Time),\r\n    value: numberProp(\"typingTest.duration.value\", 0),\r\n  } as const,\r\n} as const;\r\n\r\nexport function toDuration(settings: Settings): Duration {\r\n  const type = settings.get(typingTestProps.duration.type);\r\n  const value = settings.get(typingTestProps.duration.value);\r\n  if (value === 0) {\r\n    return duration_15_seconds;\r\n  } else {\r\n    return { type, value };\r\n  }\r\n}\r\n\r\nexport function toTextSource(settings: Settings): TextSource {\r\n  switch (settings.get(typingTestProps.type)) {\r\n    case TextSourceType.CommonWords:\r\n      return {\r\n        type: TextSourceType.CommonWords,\r\n        language: settings.get(typingTestProps.language),\r\n        wordListSize: settings.get(typingTestProps.wordList.wordListSize),\r\n      };\r\n    case TextSourceType.PseudoWords:\r\n      return {\r\n        type: TextSourceType.PseudoWords,\r\n        language: settings.get(typingTestProps.language),\r\n      };\r\n    case TextSourceType.Book:\r\n      return {\r\n        type: TextSourceType.Book,\r\n        book: settings.get(typingTestProps.book),\r\n        paragraphIndex: settings.get(typingTestProps.bookParagraphIndex),\r\n      };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nexport type CompositeSettings = {\r\n  readonly duration: Duration;\r\n  readonly textSource: TextSource;\r\n  readonly textInput: TextInputSettings;\r\n  readonly textDisplay: TextDisplaySettings;\r\n};\r\n\r\nexport function toCompositeSettings(settings: Settings): CompositeSettings {\r\n  const duration = toDuration(settings);\r\n  const textSource = toTextSource(settings);\r\n  const textInput = toTextInputSettings(settings);\r\n  const textDisplay = {\r\n    ...toTextDisplaySettings(settings),\r\n    language: languageOf(textSource),\r\n  };\r\n  return {\r\n    duration,\r\n    textSource,\r\n    textInput,\r\n    textDisplay,\r\n  };\r\n}\r\n\r\nexport function useCompositeSettings(): CompositeSettings {\r\n  const { settings } = useSettings();\r\n  return useMemo(() => toCompositeSettings(settings), [settings]);\r\n}\r\n\r\nfunction languageOf(textSource: TextSource): Language {\r\n  switch (textSource.type) {\r\n    case TextSourceType.CommonWords:\r\n      return textSource.language;\r\n    case TextSourceType.PseudoWords:\r\n      return textSource.language;\r\n    case TextSourceType.Book:\r\n      return textSource.book.language;\r\n  }\r\n}\r\n","export class AnimationFrames {\n  #id = 0;\n  #started = 0;\n\n  start(callback: (elapsed: DOMHighResTimeStamp) => void | boolean) {\n    this.cancel();\n    this.#started = 0;\n    const step = (time: DOMHighResTimeStamp) => {\n      if (this.#started === 0) {\n        this.#started = time;\n      }\n      if (callback(time - this.#started) !== false) {\n        this.#id = requestAnimationFrame(step);\n      }\n    };\n    this.#id = requestAnimationFrame(step);\n  }\n\n  cancel() {\n    if (this.#id) {\n      cancelAnimationFrame(this.#id);\n    }\n    this.#id = 0;\n  }\n}\n","import { useIntlNumbers } from \"@mkboard/intl\";\r\nimport { useFormatter } from \"@mkboard/lesson-ui\";\r\nimport {\r\n  AnimationFrames,\r\n  formatDuration,\r\n  NameValue,\r\n  Para,\r\n} from \"@mkboard/widget\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { type ReplayState } from \"../session/index.ts\";\r\n\r\nexport function ReplayProgress({ stepper }: { stepper: ReplayState }) {\r\n  const { formatInteger } = useIntlNumbers();\r\n  const { formatSpeed } = useFormatter();\r\n  const {\r\n    progress: { progress, length, speed },\r\n    time,\r\n  } = useReplayProgress(stepper);\r\n  return (\r\n    <Para align=\"center\">\r\n      <NameValue\r\n        name=\"Progress\"\r\n        value={`${formatInteger(progress)}/${formatInteger(length)}`}\r\n      />\r\n      <NameValue\r\n        name=\"Time\"\r\n        value={formatDuration(time, { showMillis: true })}\r\n      />\r\n      <NameValue name=\"Speed\" value={formatSpeed(speed)} />\r\n    </Para>\r\n  );\r\n}\r\n\r\nfunction useReplayProgress(stepper: ReplayState) {\r\n  const { state, progress } = stepper;\r\n  const [time, setTime] = useState(0);\r\n  useEffect(() => {\r\n    setTime(0);\r\n    const frames = new AnimationFrames();\r\n    frames.start(() => {\r\n      if (state === \"running\" || state === \"finished\") {\r\n        setTime(progress.time);\r\n      }\r\n    });\r\n    return () => {\r\n      frames.cancel();\r\n    };\r\n  }, [state, progress]);\r\n  return { progress, time };\r\n}\r\n","import { type KeyId, useKeyboard } from \"@mkboard/keyboard\";\r\nimport { KeyLayer, VirtualKeyboard } from \"@mkboard/keyboard-ui\";\r\nimport { Tasks } from \"@mkboard/lang\";\r\nimport {\r\n  type LineList,\r\n  type Step,\r\n  type TextInputSettings,\r\n} from \"@mkboard/textinput\";\r\nimport { type AnyEvent } from \"@mkboard/textinput-events\";\r\nimport { StaticText } from \"@mkboard/textinput-ui\";\r\nimport { Box, useDocumentVisibility } from \"@mkboard/widget\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport { ReplayState, Session, type TestResult } from \"../session/index.ts\";\r\nimport { useCompositeSettings } from \"../settings.ts\";\r\nimport * as styles from \"./Replay.module.less\";\r\nimport { ReplayProgress } from \"./ReplayProgress.tsx\";\r\n\r\nexport function Replay({ result: { steps, events } }: { result: TestResult }) {\r\n  const keyboard = useKeyboard();\r\n  const { textInput, textDisplay } = useCompositeSettings();\r\n  const { stepper, lines, depressedKeys } = useReplayState(\r\n    textInput,\r\n    steps,\r\n    events,\r\n  );\r\n  return (\r\n    <div className={styles.root}>\r\n      <ReplayProgress stepper={stepper} />\r\n      <Box className={styles.text} alignItems=\"center\" justifyContent=\"center\">\r\n        <StaticText settings={textDisplay} lines={lines} cursor={true} />\r\n      </Box>\r\n      <VirtualKeyboard keyboard={keyboard} height=\"16rem\">\r\n        <KeyLayer depressedKeys={depressedKeys} />\r\n      </VirtualKeyboard>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction useReplayState(\r\n  settings: TextInputSettings,\r\n  steps: readonly Step[],\r\n  events: readonly AnyEvent[],\r\n) {\r\n  const stepper = useMemo(\r\n    () => new ReplayState(settings, steps, events),\r\n    [settings, steps, events],\r\n  );\r\n  const visible = useDocumentVisibility();\r\n  const [lines, setLines] = useState<LineList>(Session.emptyLines);\r\n  const [depressedKeys, setDepressedKeys] = useState<KeyId[]>([]);\r\n  useEffect(() => {\r\n    const tasks = new Tasks();\r\n    const step = () => {\r\n      stepper.step();\r\n      setLines(stepper.lines);\r\n      setDepressedKeys(stepper.depressedKeys);\r\n      tasks.delayed(stepper.delay, step);\r\n    };\r\n    if (visible) {\r\n      stepper.reset();\r\n      setLines(stepper.lines);\r\n      setDepressedKeys(stepper.depressedKeys);\r\n      tasks.delayed(stepper.delay, step);\r\n    }\r\n    return () => {\r\n      tasks.cancelAll();\r\n    };\r\n  }, [stepper, visible]);\r\n  return { stepper, lines, depressedKeys };\r\n}\r\n","// extracted by mini-css-extract-plugin\nvar _1 = \"DFiMaSObFb\";\nvar _2 = \"Q6yVe564ZQ\";\nexport { _1 as \"root\", _2 as \"text\" }\n","import {\r\n  AccuracyHistogram,\r\n  makeAccuracyDistribution,\r\n  makeSpeedDistribution,\r\n  RollingSpeedChart,\r\n  SpeedHistogram,\r\n  TimeToTypeHistogram,\r\n} from \"@mkboard/chart\";\r\nimport { useIntlNumbers } from \"@mkboard/intl\";\r\nimport { useFormatter } from \"@mkboard/lesson-ui\";\r\nimport { Screen } from \"@mkboard/pages-shared\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Field,\r\n  FieldList,\r\n  formatDuration,\r\n  Icon,\r\n  Kbd,\r\n  Name,\r\n  NameValue,\r\n  Para,\r\n  Spacer,\r\n  useHotkeys,\r\n  useView,\r\n  Value,\r\n} from \"@mkboard/widget\";\r\nimport { mdiSkipNext } from \"@mdi/js\";\r\nimport { type ReactNode } from \"react\";\r\nimport { type TestResult } from \"../session/index.ts\";\r\nimport { views } from \"../views.tsx\";\r\nimport { Replay } from \"./Replay.tsx\";\r\nimport * as styles from \"./ReportScreen.module.less\";\r\n\r\nexport function ReportScreen({ result }: { result: TestResult }) {\r\n  const { setView } = useView(views);\r\n  const { formatNumber, formatPercents } = useIntlNumbers();\r\n  const { speedUnit, formatSpeed } = useFormatter();\r\n\r\n  const handleNext = () => setView(\"test\");\r\n\r\n  useHotkeys({\r\n    [\"Enter\"]: handleNext,\r\n  });\r\n\r\n  const { time, speed, length, errors, accuracy } = result.stats;\r\n\r\n  const dSpeed = makeSpeedDistribution();\r\n  const dAccuracy = makeAccuracyDistribution();\r\n  const pSpeed = dSpeed.cdf(speed);\r\n  const pAccuracy = dAccuracy.cdf(dAccuracy.scale(accuracy));\r\n\r\n  return (\r\n    <Screen>\r\n      <Box alignItems=\"center\" justifyContent=\"center\">\r\n        <Indicator\r\n          name=\"Speed\"\r\n          value={\r\n            <Metric\r\n              value={formatSpeed(speed, { unit: false })}\r\n              unit={speedUnit.id}\r\n            />\r\n          }\r\n        />\r\n        <Separator />\r\n        <Indicator\r\n          name=\"Accuracy\"\r\n          value={\r\n            <Metric value={`${formatNumber(accuracy * 100, 2)}`} unit=\"%\" />\r\n          }\r\n        />\r\n      </Box>\r\n\r\n      <Para align=\"center\">\r\n        <NameValue name=\"Characters\" value={formatNumber(length)} />\r\n        <NameValue name=\"Errors\" value={formatNumber(errors)} />\r\n        <NameValue\r\n          name=\"Time\"\r\n          value={formatDuration(time, { showMillis: true })}\r\n        />\r\n      </Para>\r\n\r\n      <Box alignItems=\"center\" justifyContent=\"center\">\r\n        <SpeedHistogram\r\n          distribution={dSpeed}\r\n          thresholds={[{ label: \"Speed\", value: speed }]}\r\n          width=\"45rem\"\r\n          height=\"15rem\"\r\n        />\r\n      </Box>\r\n\r\n      <Para align=\"center\">\r\n        <Name>\r\n          Faster than <Value value={formatPercents(pSpeed)} /> of all other\r\n          people.\r\n        </Name>{\" \"}\r\n        <Name>\r\n          You are in the top <Value value={formatPercents(top(pSpeed))} />.\r\n        </Name>\r\n      </Para>\r\n\r\n      <Box alignItems=\"center\" justifyContent=\"center\">\r\n        <AccuracyHistogram\r\n          distribution={dAccuracy}\r\n          thresholds={[{ label: \"Accuracy\", value: accuracy }]}\r\n          width=\"45rem\"\r\n          height=\"15rem\"\r\n        />\r\n      </Box>\r\n\r\n      <Para align=\"center\">\r\n        <Name>\r\n          More accurate than <Value value={formatPercents(pAccuracy)} /> of all\r\n          other people.\r\n        </Name>{\" \"}\r\n        <Name>\r\n          You are in the top <Value value={formatPercents(top(pAccuracy))} />.\r\n        </Name>\r\n      </Para>\r\n\r\n      <Box alignItems=\"center\" justifyContent=\"center\">\r\n        <TimeToTypeHistogram\r\n          steps={result.steps}\r\n          width=\"45rem\"\r\n          height=\"15rem\"\r\n        />\r\n      </Box>\r\n\r\n      <Para align=\"center\">Time to type a character histogram.</Para>\r\n\r\n      <Box alignItems=\"center\" justifyContent=\"center\">\r\n        <RollingSpeedChart\r\n          stats={result.stats}\r\n          steps={result.steps}\r\n          width=\"45rem\"\r\n          height=\"15rem\"\r\n        />\r\n      </Box>\r\n\r\n      <Para align=\"center\">Typing speed change over time chart.</Para>\r\n\r\n      <Spacer size={3} />\r\n\r\n      <Replay result={result} />\r\n\r\n      <Spacer size={3} />\r\n\r\n      <FieldList>\r\n        <Field.Filler />\r\n        <Field>\r\n          <Button\r\n            label=\"Next test\"\r\n            icon={<Icon shape={mdiSkipNext} />}\r\n            onClick={handleNext}\r\n          />\r\n        </Field>\r\n        <Field.Filler />\r\n      </FieldList>\r\n\r\n      <Para align=\"center\">\r\n        Press <Kbd>Enter</Kbd> to start a new test.\r\n      </Para>\r\n    </Screen>\r\n  );\r\n}\r\n\r\nfunction Indicator({ name, value }: { name: ReactNode; value: ReactNode }) {\r\n  return (\r\n    <div className={styles.indicator}>\r\n      <div className={styles.indicatorValue}>\r\n        <Value>{value}</Value>\r\n      </div>\r\n      <div className={styles.indicatorName}>\r\n        <Name>{name}</Name>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Metric({ value, unit }: { value: ReactNode; unit: ReactNode }) {\r\n  return (\r\n    <>\r\n      <span className={styles.valueLabel}>{value}</span>\r\n      <span className={styles.unitLabel}>{unit}</span>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction Separator() {\r\n  return <div className={styles.separator} />;\r\n}\r\n\r\nfunction top(value: number) {\r\n  return Math.max(0, 1 - value); // Takes care of negative zero.\r\n}\r\n","// extracted by mini-css-extract-plugin\nvar _1 = \"zMm2Qt4CJ_\";\nvar _2 = \"HmlU2uOlUt\";\nvar _3 = \"BsUqtZMQxo\";\nvar _4 = \"W61bRKQyv9\";\nvar _5 = \"CPbZuJqaNO\";\nvar _6 = \"a5K98u4jos\";\nexport { _1 as \"indicator\", _2 as \"indicatorName\", _3 as \"indicatorValue\", _4 as \"separator\", _5 as \"unitLabel\", _6 as \"valueLabel\" }\n","import {\r\n  type BookContent,\r\n  BookPreview,\r\n  BookSelector,\r\n  flattenContent,\r\n  ParagraphPreview,\r\n  ParagraphSelector,\r\n} from \"@mkboard/content\";\r\nimport { BookContentLoader } from \"@mkboard/content-books\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport { FieldSet, Para } from \"@mkboard/widget\";\r\nimport { useMemo } from \"react\";\r\nimport { typingTestProps } from \"../../../settings.ts\";\r\n\r\nexport function BookSettings() {\r\n  const { settings } = useSettings();\r\n  return (\r\n    <BookContentLoader book={settings.get(typingTestProps.book)}>\r\n      {(bookContent) => <Content bookContent={bookContent} />}\r\n    </BookContentLoader>\r\n  );\r\n}\r\n\r\nfunction Content({ bookContent }: { bookContent: BookContent }) {\r\n  const { settings, updateSettings } = useSettings();\r\n  const paragraphs = useMemo(\r\n    () => flattenContent(bookContent.content),\r\n    [bookContent],\r\n  );\r\n  const book = settings.get(typingTestProps.book);\r\n  const paragraphIndex = settings.get(typingTestProps.bookParagraphIndex);\r\n  return (\r\n    <FieldSet legend=\"Book paragraphs\">\r\n      <Para>Type the content of a book.</Para>\r\n\r\n      <BookSelector\r\n        book={book}\r\n        onChange={(book) => {\r\n          updateSettings(\r\n            settings\r\n              .set(typingTestProps.book, book)\r\n              .set(typingTestProps.bookParagraphIndex, 0),\r\n          );\r\n        }}\r\n      />\r\n\r\n      <BookPreview {...bookContent} />\r\n\r\n      <ParagraphSelector\r\n        paragraphs={paragraphs}\r\n        paragraphIndex={paragraphIndex}\r\n        onChange={(paragraphIndex) => {\r\n          updateSettings(\r\n            settings.set(typingTestProps.bookParagraphIndex, paragraphIndex),\r\n          );\r\n        }}\r\n      />\r\n\r\n      <ParagraphPreview\r\n        paragraphs={paragraphs}\r\n        paragraphIndex={paragraphIndex}\r\n      />\r\n    </FieldSet>\r\n  );\r\n}\r\n","import { type WordList, wordListStats } from \"@mkboard/content\";\r\nimport { WordListLoader } from \"@mkboard/content-words\";\r\nimport { useIntlDisplayNames, useIntlNumbers } from \"@mkboard/intl\";\r\nimport { Language } from \"@mkboard/keyboard\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport {\r\n  Field,\r\n  FieldList,\r\n  FieldSet,\r\n  NameValue,\r\n  OptionList,\r\n  Para,\r\n  Range,\r\n  TextField,\r\n} from \"@mkboard/widget\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { typingTestProps } from \"../../../settings.ts\";\r\n\r\nexport function CommonWordsSettings() {\r\n  const { settings } = useSettings();\r\n  return (\r\n    <WordListLoader language={settings.get(typingTestProps.language)}>\r\n      {(wordList) => (\r\n        <Content\r\n          wordList={wordList.slice(\r\n            0,\r\n            settings.get(typingTestProps.wordList.wordListSize),\r\n          )}\r\n        />\r\n      )}\r\n    </WordListLoader>\r\n  );\r\n}\r\n\r\nfunction Content({ wordList }: { wordList: WordList }) {\r\n  const { settings, updateSettings } = useSettings();\r\n  const { formatMessage } = useIntl();\r\n  const { formatLanguageName } = useIntlDisplayNames();\r\n  const { formatNumber } = useIntlNumbers();\r\n  const { wordCount, avgWordLength } = wordListStats(wordList);\r\n  return (\r\n    <FieldSet legend=\"Common words\">\r\n      <Para>Type the common words.</Para>\r\n\r\n      <FieldList>\r\n        <Field>\r\n          {formatMessage({\r\n            id: \"t_Language:\",\r\n            defaultMessage: \"Language:\",\r\n          })}\r\n        </Field>\r\n\r\n        <Field>\r\n          <OptionList\r\n            options={Language.ALL.map((item) => ({\r\n              value: item.id,\r\n              name: formatLanguageName(item.id),\r\n            }))}\r\n            value={String(settings.get(typingTestProps.language))}\r\n            onSelect={(id) => {\r\n              updateSettings(\r\n                settings.set(typingTestProps.language, Language.ALL.get(id)),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n\r\n      <FieldList>\r\n        <Field>\r\n          {formatMessage({\r\n            id: \"t_Word_list_size:\",\r\n            defaultMessage: \"Word list size:\",\r\n          })}\r\n        </Field>\r\n        <Field>\r\n          <Range\r\n            size={16}\r\n            min={typingTestProps.wordList.wordListSize.min}\r\n            max={typingTestProps.wordList.wordListSize.max}\r\n            step={1}\r\n            value={settings.get(typingTestProps.wordList.wordListSize)}\r\n            onChange={(value) => {\r\n              updateSettings(\r\n                settings.set(typingTestProps.wordList.wordListSize, value),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n\r\n      <Para>\r\n        <TextField\r\n          type=\"textarea\"\r\n          value={wordList.join(\", \")}\r\n          readOnly={true}\r\n        />\r\n      </Para>\r\n\r\n      <FieldList>\r\n        <Field>\r\n          <NameValue\r\n            name={formatMessage({\r\n              id: \"t_num_Unique_words\",\r\n              defaultMessage: \"Unique words\",\r\n            })}\r\n            value={formatNumber(wordCount)}\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <NameValue\r\n            name={formatMessage({\r\n              id: \"t_Average_word_length\",\r\n              defaultMessage: \"Average word length\",\r\n            })}\r\n            value={formatNumber(avgWordLength, 2)}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n    </FieldSet>\r\n  );\r\n}\r\n","import { useIntlDisplayNames } from \"@mkboard/intl\";\r\nimport { Language } from \"@mkboard/keyboard\";\r\nimport { Alphabet, Filter, type PhoneticModel } from \"@mkboard/phonetic-model\";\r\nimport { PhoneticModelLoader } from \"@mkboard/phonetic-model-loader\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport { Field, FieldList, FieldSet, OptionList, Para } from \"@mkboard/widget\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { typingTestProps } from \"../../../settings.ts\";\r\n\r\nexport function PseudoWordsSettings() {\r\n  const { settings } = useSettings();\r\n  return (\r\n    <PhoneticModelLoader language={settings.get(typingTestProps.language)}>\r\n      {(model) => <Content model={model} />}\r\n    </PhoneticModelLoader>\r\n  );\r\n}\r\n\r\nfunction Content({ model }: { model: PhoneticModel }) {\r\n  const { settings, updateSettings } = useSettings();\r\n  const { formatMessage } = useIntl();\r\n  const { formatLanguageName } = useIntlDisplayNames();\r\n  const words = [];\r\n  for (let i = 0; i < 50; i++) {\r\n    words.push(model.nextWord(Filter.empty));\r\n  }\r\n  return (\r\n    <FieldSet legend=\"Pseudo words\">\r\n      <Para>\r\n        Type pseudo words generated by an algorithm according to the phonetic\r\n        rules of your language.\r\n      </Para>\r\n\r\n      <FieldList>\r\n        <Field>\r\n          {formatMessage({\r\n            id: \"t_Language:\",\r\n            defaultMessage: \"Language:\",\r\n          })}\r\n        </Field>\r\n\r\n        <Field>\r\n          <OptionList\r\n            options={Language.ALL.map((item) => ({\r\n              value: item.id,\r\n              name: formatLanguageName(item.id),\r\n            }))}\r\n            value={String(settings.get(typingTestProps.language))}\r\n            onSelect={(id) => {\r\n              updateSettings(\r\n                settings.set(typingTestProps.language, Language.ALL.get(id)),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n\r\n      <FieldList>\r\n        <Field>Alphabet:</Field>\r\n        <Field>\r\n          <Alphabet model={model} />\r\n        </Field>\r\n      </FieldList>\r\n\r\n      <FieldList>\r\n        <Field>Example:</Field>\r\n        <Field>\r\n          <em>{words.join(\" \")}</em>\r\n        </Field>\r\n      </FieldList>\r\n    </FieldSet>\r\n  );\r\n}\r\n","import { useSettings } from \"@mkboard/settings\";\r\nimport { Field, FieldList, FieldSet, Para, RadioBox } from \"@mkboard/widget\";\r\nimport { TextSourceType, typingTestProps } from \"../../settings.ts\";\r\nimport { BookSettings } from \"./text/BookSettings.tsx\";\r\nimport { CommonWordsSettings } from \"./text/CommonWordsSettings.tsx\";\r\nimport { PseudoWordsSettings } from \"./text/PseudoWordsSettings.tsx\";\r\n\r\nexport function TextGeneratorSettings() {\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <>\r\n      <FieldSet legend=\"Text Settings\">\r\n        <Para>Choose what text to type in the test.</Para>\r\n\r\n        <FieldList>\r\n          <Field>\r\n            <RadioBox\r\n              label=\"Common words\"\r\n              name=\"text-source\"\r\n              value=\"text-source-common-words\"\r\n              checked={\r\n                settings.get(typingTestProps.type) ===\r\n                TextSourceType.CommonWords\r\n              }\r\n              onSelect={() => {\r\n                updateSettings(\r\n                  settings.set(\r\n                    typingTestProps.type,\r\n                    TextSourceType.CommonWords,\r\n                  ),\r\n                );\r\n              }}\r\n            />\r\n          </Field>\r\n          <Field>\r\n            <RadioBox\r\n              label=\"Pseudo words\"\r\n              name=\"text-source\"\r\n              value=\"text-source-pseudo-words\"\r\n              checked={\r\n                settings.get(typingTestProps.type) ===\r\n                TextSourceType.PseudoWords\r\n              }\r\n              onSelect={() => {\r\n                updateSettings(\r\n                  settings.set(\r\n                    typingTestProps.type,\r\n                    TextSourceType.PseudoWords,\r\n                  ),\r\n                );\r\n              }}\r\n            />\r\n          </Field>\r\n          <Field>\r\n            <RadioBox\r\n              label=\"Book paragraphs\"\r\n              name=\"text-source\"\r\n              value=\"text-source-book\"\r\n              checked={\r\n                settings.get(typingTestProps.type) === TextSourceType.Book\r\n              }\r\n              onSelect={() => {\r\n                updateSettings(\r\n                  settings.set(typingTestProps.type, TextSourceType.Book),\r\n                );\r\n              }}\r\n            />\r\n          </Field>\r\n        </FieldList>\r\n      </FieldSet>\r\n\r\n      {settings.get(typingTestProps.type) === TextSourceType.CommonWords && (\r\n        <CommonWordsSettings />\r\n      )}\r\n      {settings.get(typingTestProps.type) === TextSourceType.PseudoWords && (\r\n        <PseudoWordsSettings />\r\n      )}\r\n      {settings.get(typingTestProps.type) === TextSourceType.Book && (\r\n        <BookSettings />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import {\r\n  type BookContent,\r\n  flattenContent,\r\n  splitParagraph,\r\n} from \"@mkboard/content\";\r\nimport { clamp } from \"@mkboard/lang\";\r\nimport { type TextGenerator } from \"./types.ts\";\r\n\r\ntype BookSettings = {\r\n  readonly paragraphIndex: number;\r\n};\r\n\r\ntype Mark = {\r\n  readonly paragraphIndex: number;\r\n  readonly wordIndex: number;\r\n};\r\n\r\nexport class BookParagraphsGenerator implements TextGenerator<Mark> {\r\n  readonly #paragraphs: readonly string[];\r\n  #paragraphIndex: number;\r\n  #words: readonly string[] = [];\r\n  #wordIndex: number = 0;\r\n\r\n  constructor(settings: BookSettings, { content }: BookContent) {\r\n    const paragraphs = flattenContent(content);\r\n    const paragraphIndex = clamp(settings.paragraphIndex, 0, paragraphs.length);\r\n    this.#paragraphs = paragraphs;\r\n    this.#paragraphIndex = paragraphIndex;\r\n    this.#words = splitParagraph(paragraphs[paragraphIndex]);\r\n    this.#wordIndex = 0;\r\n  }\r\n\r\n  mark(): Mark {\r\n    return {\r\n      paragraphIndex: this.#paragraphIndex,\r\n      wordIndex: this.#wordIndex,\r\n    };\r\n  }\r\n\r\n  reset({ paragraphIndex, wordIndex }: Mark): void {\r\n    this.#paragraphIndex = paragraphIndex;\r\n    this.#words = splitParagraph(this.#paragraphs[this.#paragraphIndex]);\r\n    this.#wordIndex = wordIndex;\r\n  }\r\n\r\n  nextWord(): string {\r\n    if (this.#wordIndex >= this.#words.length) {\r\n      this.#paragraphIndex += 1;\r\n      if (this.#paragraphIndex >= this.#paragraphs.length) {\r\n        this.#paragraphIndex = 0;\r\n      }\r\n      this.#words = splitParagraph(this.#paragraphs[this.#paragraphIndex]);\r\n      this.#wordIndex = 0;\r\n    }\r\n    const word = this.#words[this.#wordIndex];\r\n    this.#wordIndex += 1;\r\n    return word;\r\n  }\r\n}\r\n","import { Filter, type PhoneticModel } from \"@mkboard/phonetic-model\";\r\nimport { LCG, type RNGStream } from \"@mkboard/rand\";\r\nimport { type TextGenerator } from \"./types.ts\";\r\n\r\ntype Mark = {\r\n  readonly mark: unknown;\r\n};\r\n\r\nexport class PseudoWordsGenerator implements TextGenerator<Mark> {\r\n  readonly #model: PhoneticModel;\r\n  readonly #rng: RNGStream;\r\n\r\n  constructor(model: PhoneticModel, rng: RNGStream = LCG(1)) {\r\n    this.#model = model;\r\n    this.#rng = rng;\r\n  }\r\n\r\n  nextWord(): string {\r\n    return this.#model.nextWord(Filter.empty, this.#rng);\r\n  }\r\n\r\n  mark(): Mark {\r\n    return { mark: this.#rng.mark() };\r\n  }\r\n\r\n  reset({ mark }: Mark): void {\r\n    this.#rng.reset(mark);\r\n  }\r\n}\r\n","import { type WordList } from \"@mkboard/content\";\r\nimport { LCG, randomSample, type RNGStream } from \"@mkboard/rand\";\r\nimport { type TextGenerator } from \"./types.ts\";\r\n\r\ntype CommonWordsSettings = {\r\n  readonly wordListSize: number;\r\n};\r\n\r\ntype Mark = {\r\n  readonly mark: unknown;\r\n};\r\n\r\nexport class CommonWordsGenerator implements TextGenerator<Mark> {\r\n  readonly #wordList: WordList;\r\n  readonly #rng: RNGStream;\r\n\r\n  constructor(\r\n    { wordListSize }: CommonWordsSettings,\r\n    wordList: WordList,\r\n    rng: RNGStream = LCG(1),\r\n  ) {\r\n    this.#wordList = [...wordList].splice(0, wordListSize);\r\n    this.#rng = rng;\r\n  }\r\n\r\n  nextWord(): string {\r\n    return randomSample(this.#wordList, this.#rng);\r\n  }\r\n\r\n  mark(): Mark {\r\n    return { mark: this.#rng.mark() };\r\n  }\r\n\r\n  reset({ mark }: Mark): void {\r\n    this.#rng.reset(mark);\r\n  }\r\n}\r\n","import { BookContentLoader } from \"@mkboard/content-books\";\r\nimport { WordListLoader } from \"@mkboard/content-words\";\r\nimport { PhoneticModelLoader } from \"@mkboard/phonetic-model-loader\";\r\nimport { LCG } from \"@mkboard/rand\";\r\nimport { type ReactNode } from \"react\";\r\nimport { TextSourceType, useCompositeSettings } from \"../settings.ts\";\r\nimport { BookParagraphsGenerator } from \"./book.ts\";\r\nimport { CommonWordsGenerator } from \"./commonwords.ts\";\r\nimport { PseudoWordsGenerator } from \"./pseudowords.ts\";\r\nimport { type TextGenerator } from \"./types.ts\";\r\n\r\nexport function TextGeneratorLoader({\r\n  children,\r\n}: {\r\n  children: (generator: TextGenerator) => ReactNode;\r\n}) {\r\n  const { textSource } = useCompositeSettings();\r\n  switch (textSource.type) {\r\n    case TextSourceType.CommonWords:\r\n      return (\r\n        <WordListLoader language={textSource.language}>\r\n          {(wordList) =>\r\n            children(new CommonWordsGenerator(textSource, wordList, rng()))\r\n          }\r\n        </WordListLoader>\r\n      );\r\n    case TextSourceType.PseudoWords:\r\n      return (\r\n        <PhoneticModelLoader language={textSource.language}>\r\n          {(model) => children(new PseudoWordsGenerator(model, rng()))}\r\n        </PhoneticModelLoader>\r\n      );\r\n    case TextSourceType.Book:\r\n      return (\r\n        <BookContentLoader book={textSource.book}>\r\n          {(bookContent) =>\r\n            children(new BookParagraphsGenerator(textSource, bookContent))\r\n          }\r\n        </BookContentLoader>\r\n      );\r\n  }\r\n}\r\n\r\nfunction rng() {\r\n  return LCG(Date.now());\r\n}\r\n","import { memo, type ReactNode } from \"react\";\nimport { type SessionLine } from \"../session/index.ts\";\nimport * as styles from \"./LineTemplate.module.less\";\n\nexport const LineTemplate = memo(function LineTemplate({\n  children,\n  progress,\n}: {\n  children: ReactNode;\n} & SessionLine) {\n  return <div className={styles.root}>{children}</div>;\n});\n","// extracted by mini-css-extract-plugin\nvar _1 = \"CWIK3zCJlj\";\nexport { _1 as \"root\" }\n","import { useIntlNumbers } from \"@mkboard/intl\";\r\nimport { useFormatter } from \"@mkboard/lesson-ui\";\r\nimport { formatDuration, Value, withDeferred } from \"@mkboard/widget\";\r\nimport { memo } from \"react\";\r\nimport { type Progress } from \"../session/index.ts\";\r\nimport * as styles from \"./TestProgress.module.less\";\r\n\r\nexport const TestProgress0 = memo(function TestProgress({\r\n  progress: { length, time, progress, speed },\r\n}: {\r\n  progress: Progress;\r\n}) {\r\n  const { formatInteger, formatPercents } = useIntlNumbers();\r\n  const { formatSpeed } = useFormatter();\r\n  return (\r\n    <div className={styles.root}>\r\n      <div\r\n        className={styles.bar}\r\n        style={{ inlineSize: `${progress * 100}%` }}\r\n      />\r\n      <div className={styles.info}>\r\n        <Value value={formatDuration(time, { showMillis: true })} />\r\n        {\" / \"}\r\n        <Value value={formatInteger(length)} />\r\n        {\" / \"}\r\n        <Value\r\n          value={formatPercents(progress, {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2,\r\n          })}\r\n        />\r\n        {\" / \"}\r\n        <Value value={formatSpeed(speed)} />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport const TestProgress = withDeferred(TestProgress0);\r\n","// extracted by mini-css-extract-plugin\nvar _1 = \"BEWioHbUt9\";\nvar _2 = \"_7frZdMv8m\";\nvar _3 = \"BEng8tEQdI\";\nexport { _1 as \"bar\", _2 as \"info\", _3 as \"root\" }\n","// extracted by mini-css-extract-plugin\nvar _1 = \"uzg6Z_e1yp\";\nexport { _1 as \"text\" }\n","import { useSettings } from \"@mkboard/settings\";\r\nimport { Field, FieldList, Icon, IconButton, LinkButton } from \"@mkboard/widget\";\r\nimport { mdiCog } from \"@mdi/js\";\r\nimport { clsx } from \"clsx\";\r\nimport { memo, type ReactNode } from \"react\";\r\nimport { durations } from \"../session/index.ts\";\r\nimport { toCompositeSettings, typingTestProps } from \"../settings.ts\";\r\nimport * as styles from \"./Toolbar.module.less\";\r\n\r\nexport const Toolbar = memo(function Toolbar({\r\n  onChange,\r\n  onConfigure,\r\n}: {\r\n  onChange: () => void;\r\n  onConfigure: () => void;\r\n}) {\r\n  return (\r\n    <FieldList>\r\n      <Field.Filler />\r\n      <Field>\r\n        <DurationSwitcher onChange={onChange} />\r\n      </Field>\r\n      <Field>\r\n        <IconButton icon={<Icon shape={mdiCog} />} onClick={onConfigure} />\r\n      </Field>\r\n      <Field.Filler />\r\n    </FieldList>\r\n  );\r\n});\r\n\r\nexport const DurationSwitcher = memo(function DurationSwitcher({\r\n  onChange,\r\n}: {\r\n  onChange: () => void;\r\n}) {\r\n  const { settings, updateSettings } = useSettings();\r\n  const compositeSettings = toCompositeSettings(settings);\r\n  const children: ReactNode[] = [];\r\n  for (let index = 0; index < durations.length; index++) {\r\n    const { duration, label } = durations[index];\r\n    if (index > 0) {\r\n      children.push(<span key={children.length}>{\" | \"}</span>);\r\n    }\r\n    children.push(\r\n      <LinkButton\r\n        key={children.length}\r\n        className={clsx(\r\n          styles.item,\r\n          duration.type === compositeSettings.duration.type &&\r\n            duration.value === compositeSettings.duration.value &&\r\n            styles.item_active,\r\n        )}\r\n        onClick={() => {\r\n          updateSettings(\r\n            settings\r\n              .set(typingTestProps.duration.type, duration.type)\r\n              .set(typingTestProps.duration.value, duration.value),\r\n          );\r\n          onChange();\r\n        }}\r\n      >\r\n        {label}\r\n      </LinkButton>,\r\n    );\r\n  }\r\n  return <>{children}</>;\r\n});\r\n","// extracted by mini-css-extract-plugin\nvar _1 = \"Ttt4IkpHzR\";\nvar _2 = \"f25EDsyiCy\";\nexport { _1 as \"item\", _2 as \"item_active\" }\n","import { Screen } from \"@mkboard/pages-shared\";\r\nimport { type LineList, makeStats } from \"@mkboard/textinput\";\r\nimport { useSoundPlayer } from \"@mkboard/textinput-sounds\";\r\nimport { TextArea } from \"@mkboard/textinput-ui\";\r\nimport { Box, type Focusable, Spacer, useView } from \"@mkboard/widget\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  type TextGenerator,\r\n  TextGeneratorLoader,\r\n} from \"../generators/index.ts\";\r\nimport { Session, type TestResult } from \"../session/index.ts\";\r\nimport { type CompositeSettings, useCompositeSettings } from \"../settings.ts\";\r\nimport { views } from \"../views.tsx\";\r\nimport { LineTemplate } from \"./LineTemplate.tsx\";\r\nimport { TestProgress } from \"./TestProgress.tsx\";\r\nimport * as styles from \"./TestScreen.module.less\";\r\nimport { Toolbar } from \"./Toolbar.tsx\";\r\n\r\nexport function TestScreen() {\r\n  return (\r\n    <TextGeneratorLoader>\r\n      {(generator) => (\r\n        <Controller generator={generator} mark={generator.mark()} />\r\n      )}\r\n    </TextGeneratorLoader>\r\n  );\r\n}\r\n\r\nfunction Controller({\r\n  generator,\r\n  mark,\r\n}: {\r\n  generator: TextGenerator;\r\n  mark: unknown;\r\n}) {\r\n  const { setView } = useView(views);\r\n  const settings = useCompositeSettings();\r\n  const focusRef = useRef<Focusable>(null);\r\n  const player = useSoundPlayer();\r\n  const [session, setSession] = useState(() => nextTest(settings, generator));\r\n  const [lines, setLines] = useState<LineList>(Session.emptyLines);\r\n  const [progress, setProgress] = useState(Session.emptyProgress);\r\n  useEffect(() => {\r\n    generator.reset(mark);\r\n    const session = nextTest(settings, generator);\r\n    setSession(session);\r\n    setLines(session.getLines());\r\n  }, [settings, generator, mark]);\r\n  return (\r\n    <Screen>\r\n      <Toolbar\r\n        onConfigure={() => {\r\n          setView(\"settings\");\r\n        }}\r\n        onChange={() => {\r\n          focusRef.current?.focus();\r\n        }}\r\n      />\r\n      <Spacer size={10} />\r\n      <Box alignItems=\"center\" justifyContent=\"center\">\r\n        <div className={styles.text}>\r\n          <TextArea\r\n            focusRef={focusRef}\r\n            settings={settings.textDisplay}\r\n            lines={lines}\r\n            wrap={false}\r\n            onFocus={() => {\r\n              generator.reset(mark);\r\n              const session = nextTest(settings, generator);\r\n              setSession(session);\r\n              setLines(session.getLines());\r\n            }}\r\n            onKeyDown={session.handleKeyDown}\r\n            onKeyUp={session.handleKeyUp}\r\n            onInput={(event) => {\r\n              const { feedback, progress, completed } =\r\n                session.handleInput(event);\r\n              setLines(session.getLines());\r\n              setProgress(progress);\r\n              player(feedback);\r\n              if (completed) {\r\n                setView(\"report\", { result: makeResult(session) });\r\n              }\r\n            }}\r\n            lineTemplate={LineTemplate}\r\n          />\r\n          <TestProgress progress={progress} />\r\n        </div>\r\n      </Box>\r\n    </Screen>\r\n  );\r\n}\r\n\r\nfunction nextTest(settings: CompositeSettings, generator: TextGenerator) {\r\n  return new Session({ ...settings, numLines: 5, numCols: 55 }, generator);\r\n}\r\n\r\nfunction makeResult(session: Session): TestResult {\r\n  const steps = session.getSteps();\r\n  const events = session.getEvents();\r\n  return {\r\n    stats: makeStats(steps),\r\n    steps,\r\n    events,\r\n  };\r\n}\r\n","import { ReportScreen } from \"./components/ReportScreen.tsx\";\nimport { SettingsScreen } from \"./components/SettingsScreen.tsx\";\nimport { TestScreen } from \"./components/TestScreen.tsx\";\n\nexport const views = {\n  test: TestScreen,\n  report: ReportScreen,\n  settings: SettingsScreen,\n} as const;\n","import { Screen } from \"@mkboard/pages-shared\";\r\nimport { TypingSettings } from \"@mkboard/textinput-ui\";\r\nimport {\r\n  Button,\r\n  ExplainerBoundary,\r\n  Field,\r\n  FieldList,\r\n  Icon,\r\n  Tab,\r\n  TabList,\r\n  useView,\r\n} from \"@mkboard/widget\";\r\nimport { mdiCheckCircle } from \"@mdi/js\";\r\nimport { useState } from \"react\";\r\nimport { views } from \"../views.tsx\";\r\nimport { TextGeneratorSettings } from \"./settings/TextGeneratorSettings.tsx\";\r\n\r\nexport function SettingsScreen() {\r\n  const { setView } = useView(views);\r\n  const [tabIndex, setTabIndex] = useState(0);\r\n\r\n  return (\r\n    <Screen>\r\n      <ExplainerBoundary defaultVisible={false}>\r\n        <TabList\r\n          selectedIndex={tabIndex}\r\n          onSelect={(tabIndex) => {\r\n            setTabIndex(tabIndex);\r\n          }}\r\n        >\r\n          <Tab label=\"Text\">\r\n            <TextGeneratorSettings />\r\n          </Tab>\r\n\r\n          <Tab label=\"Typing\">\r\n            <TypingSettings />\r\n          </Tab>\r\n        </TabList>\r\n\r\n        <FieldList>\r\n          <Field.Filler />\r\n          <Field>\r\n            <Button\r\n              icon={<Icon shape={mdiCheckCircle} />}\r\n              label=\"Done\"\r\n              onClick={() => {\r\n                setView(\"test\");\r\n              }}\r\n            />\r\n          </Field>\r\n        </FieldList>\r\n      </ExplainerBoundary>\r\n    </Screen>\r\n  );\r\n}\r\n","import { ViewSwitch } from \"@mkboard/widget\";\r\nimport { views } from \"./views.tsx\";\r\n\r\nexport function TypingTestPage() {\r\n  return <ViewSwitch views={views} />;\r\n}\r\n","import { KeyboardProvider } from \"@mkboard/keyboard\";\r\nimport { TypingTestPage } from \"@mkboard/page-typing-test\";\r\nimport { ResultLoader } from \"@mkboard/result-loader\";\r\n\r\nexport default function Page() {\r\n  return (\r\n    <ResultLoader>\r\n      <KeyboardProvider>\r\n        <TypingTestPage />\r\n      </KeyboardProvider>\r\n    </ResultLoader>\r\n  );\r\n}\r\n"],"names":["Kbd","props","as","Component","id","title","className","children","clsx","isDocumentVisible","document","visibilityState","DurationType","timeDuration","time","type","Time","value","lengthDuration","length","Length","duration_15_seconds","duration_30_seconds","duration_60_seconds","duration_100_chars","duration_500_chars","duration_1000_chars","durations","label","duration","ReplayState","constructor","settings","steps","events","this","limit","lines","line","ws","i","codePoint","String","fromCodePoint","push","splitLines","result","timeStamp","event","shiftTimeStamps","ReplayProgress","reset","state","progress","delay","Math","max","elapsed","step","onInput","completed","code","chars","depressedKeys","bump","speed","head","curr","Session","generator","static","text","numLines","getEvents","getLines","getSteps","handleKeyDown","handleKeyUp","handleInput","feedback","computeProgress","shift","mark","index","textInput","numCols","word","nextWord","TextSourceType","typingTestProps","CommonWords","language","ALL","EN","wordList","wordListSize","min","book","EN_ALICE_WONDERLAND","bookParagraphIndex","toCompositeSettings","get","toDuration","textSource","PseudoWords","Book","paragraphIndex","Error","toTextSource","textDisplay","languageOf","useCompositeSettings","useMemo","AnimationFrames","start","callback","cancel","requestAnimationFrame","cancelAnimationFrame","stepper","formatInteger","formatSpeed","setTime","useState","useEffect","frames","useReplayProgress","Para","align","NameValue","name","showMillis","Replay","keyboard","visible","setVisible","useDocumentVisibility","setLines","emptyLines","setDepressedKeys","tasks","delayed","cancelAll","useReplayState","Box","alignItems","justifyContent","cursor","height","Indicator","Metric","unit","Separator","BookSettings","bookContent","Content","updateSettings","paragraphs","content","legend","onChange","set","CommonWordsSettings","slice","formatMessage","useIntl","formatLanguageName","formatNumber","wordCount","avgWordLength","FieldList","OptionList","options","map","item","onSelect","Range","size","TextField","join","readOnly","PseudoWordsSettings","model","words","empty","TextGeneratorSettings","RadioBox","checked","BookParagraphsGenerator","wordIndex","PseudoWordsGenerator","rng","CommonWordsGenerator","splice","TextGeneratorLoader","Date","now","LineTemplate","memo","TestProgress0","formatPercents","style","inlineSize","minimumFractionDigits","maximumFractionDigits","TestProgress","Toolbar","onConfigure","Filler","DurationSwitcher","IconButton","icon","Icon","I","shape","mdi","onClick","compositeSettings","LinkButton","Controller","setView","views","focusRef","useRef","player","session","setSession","nextTest","setProgress","emptyProgress","current","focus","Spacer","wrap","onFocus","onKeyDown","onKeyUp","makeResult","lineTemplate","stats","test","report","speedUnit","handleNext","errors","accuracy","dSpeed","dAccuracy","pSpeed","cdf","pAccuracy","scale","distribution","thresholds","width","Button","tabIndex","setTabIndex","ExplainerBoundary","defaultVisible","TabList","selectedIndex","TypingTestPage","ViewSwitch","Page"],"sourceRoot":""}