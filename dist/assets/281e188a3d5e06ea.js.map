{"version":3,"file":"281e188a3d5e06ea.js","mappings":"uQAGA,MAAMA,GAA2B,IAAAC,MAC/B,IAAM,8BAGD,SAASC,IACd,MAAOC,EAASC,IAAc,IAAAC,WAAS,GACvC,OAAIF,GAEA,UAAC,EAAAG,SAAQ,YACP,SAACN,EAAwB,KACzB,SAACO,EAAA,EAAM,CAACC,KAAM,QAKhB,iCACE,UAACC,EAAA,EAAS,YACR,SAAC,IAAMC,OAAM,KACb,SAACC,EAAA,EAAM,CACLC,QAAS,KACPR,GAAW,IACZ,qCAIH,SAAC,IAAMM,OAAM,QAEf,SAACH,EAAA,EAAM,CAACC,KAAM,MAItB,C,iCClBO,SAASK,GAAoB,SAClCC,EAAQ,MACRC,IAKA,MAAM,iBAAEC,IAAqB,UACvBC,EAASF,EAAME,SACfC,EAASH,EAAMG,SACfC,GAAQ,QAAaL,EAAUG,EAAQC,GAC7C,OACE,iCACE,SAACE,EAAA,EAAM,CAACC,MAAO,EAAC,SAAGL,EAAiBF,EAASQ,WAE7C,SAAC,KAAa,CAACH,MAAOA,KAEtB,SAACI,EAAA,EAAI,WACH,UAAC,KAAe,CAACT,SAAUA,EAAQ,WACjC,SAAC,KAAQ,KACT,SAAC,KAAY,CAACU,UAAWP,EAAQQ,SAAS,OAC1C,SAAC,KAAgB,CAACD,UAAWN,EAAQO,SAAS,aAKxD,CCxCA,QCYO,WACL,MAAM,mBAAEC,IAAuB,WACxBC,EAAUC,IAAe,IAAAvB,UAAS,KAASwB,IAC5CC,EAAY,KAAOC,IAAIC,OAC1BV,GAAWA,EAAOK,WAAaA,GAChCM,IAAKX,IAAW,QAAaA,IAC/B,OACE,UAACY,EAAA,EAAO,YACN,SAAChC,EAA2B,KAC5B,SAAC,IAAgB,kBASjB,2BACE,yBACE,SAAC,IAAgB,oBAKnB,yBACE,SAAC,IAAgB,oBAKnB,yBACE,SAAC,IAAgB,oBAKnB,yBACE,SAAC,IAAgB,oBAKnB,yBACE,SAAC,IAAgB,oBAKnB,yBACE,SAAC,IAAgB,oBAKnB,yBACE,SAAC,IAAgB,oBAKnB,yBACE,SAAC,IAAgB,oBAKnB,yBACE,SAAC,IAAgB,oBAKnB,yBACE,SAAC,IAAgB,uBAMrB,UAACO,EAAA,EAAS,YACR,SAAC,IAAK,WACJ,SAAC,IAAgB,oBAEnB,SAAC,IAAK,WACJ,SAAC0B,EAAA,EAAU,CACTC,QAAS,KAASL,IAAIE,IAAKI,IAAS,CAClCC,KAAMZ,EAAmBW,GACzBE,MAAOF,EAAKG,MAEdD,MAAOZ,EAASa,GAChBC,SAAWD,IACTZ,EAAY,KAASG,IAAIW,IAAIF,aAKrC,SAAC,IAAmB,CAACb,SAAUA,EAAQ,SACnCZ,IAEE,iCACE,UAACN,EAAA,EAAS,YACR,SAAC,IAAK,WACJ,SAAC,IAAgB,oBAKnB,SAAC,IAAK,WACJ,SAAC,KAAQ,CAACM,MAAOA,SAGpBe,EAAUG,IAAKnB,IACd,SAACD,EAAmB,CAElBC,SAAUA,EACVC,MAAOA,GAFFD,EAASQ,OAAOkB,YAWvC,C","sources":["webpack://mkboard-typing-app/./packages/page-layouts/lib/custom/CustomLayoutDesignerToggler.tsx","webpack://mkboard-typing-app/./packages/page-layouts/lib/KeyFrequencyHeatmap.tsx","webpack://mkboard-typing-app/./packages/mkboard-pages-browser/lib/pages/layouts.tsx","webpack://mkboard-typing-app/./packages/page-layouts/lib/LayoutsPage.tsx"],"sourcesContent":["import { Button, Field, FieldList, Spacer } from \"@mkboard/widget\";\nimport { lazy, Suspense, useState } from \"react\";\n\nconst LazyCustomLayoutDesigner = lazy(\n  () => import(\"./LazyCustomLayoutDesigner.tsx\"),\n);\n\nexport function CustomLayoutDesignerToggler() {\n  const [visible, setVisible] = useState(false);\n  if (visible) {\n    return (\n      <Suspense>\n        <LazyCustomLayoutDesigner />\n        <Spacer size={3} />\n      </Suspense>\n    );\n  } else {\n    return (\n      <>\n        <FieldList>\n          <Field.Filler />\n          <Button\n            onClick={() => {\n              setVisible(true);\n            }}\n          >\n            Design a custom layout\n          </Button>\n          <Field.Filler />\n        </FieldList>\n        <Spacer size={3} />\n      </>\n    );\n  }\n}\n","import {\n  computeStats,\n  type Keyboard,\n  useFormattedNames,\n} from \"@mkboard/keyboard\";\nimport {\n  HeatmapLayer,\n  KeyboardStats,\n  KeyLayer,\n  TransitionsLayer,\n  VirtualKeyboard,\n} from \"@mkboard/keyboard-ui\";\nimport { type PhoneticModel } from \"@mkboard/phonetic-model\";\nimport { Header, Para } from \"@mkboard/widget\";\nimport { type ReactNode } from \"react\";\n\nexport function KeyFrequencyHeatmap({\n  keyboard,\n  model,\n}: {\n  readonly keyboard: Keyboard;\n  readonly model: PhoneticModel;\n}): ReactNode {\n  const { formatLayoutName } = useFormattedNames();\n  const ngram1 = model.ngram1();\n  const ngram2 = model.ngram2();\n  const stats = computeStats(keyboard, ngram1, ngram2);\n  return (\n    <>\n      <Header level={2}>{formatLayoutName(keyboard.layout)}</Header>\n\n      <KeyboardStats stats={stats} />\n\n      <Para>\n        <VirtualKeyboard keyboard={keyboard}>\n          <KeyLayer />\n          <HeatmapLayer histogram={ngram1} modifier=\"f\" />\n          <TransitionsLayer histogram={ngram2} modifier=\"f\" />\n        </VirtualKeyboard>\n      </Para>\n    </>\n  );\n}\n","import { LayoutsPage } from \"@mkboard/page-layouts\";\n\nexport default LayoutsPage;\n","import {\n  Language,\n  Layout,\n  loadKeyboard,\n  useFormattedNames,\n} from \"@mkboard/keyboard\";\nimport { Alphabet } from \"@mkboard/phonetic-model\";\nimport { PhoneticModelLoader } from \"@mkboard/phonetic-model-loader\";\nimport { Article, Field, FieldList, OptionList } from \"@mkboard/widget\";\nimport { useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { CustomLayoutDesignerToggler } from \"./custom/CustomLayoutDesignerToggler.tsx\";\nimport { KeyFrequencyHeatmap } from \"./KeyFrequencyHeatmap.tsx\";\n\nexport function LayoutsPage() {\n  const { formatLanguageName } = useFormattedNames();\n  const [language, setLanguage] = useState(Language.EN);\n  const keyboards = Layout.ALL.filter(\n    (layout) => layout.language === language,\n  ).map((layout) => loadKeyboard(layout));\n  return (\n    <Article>\n      <CustomLayoutDesignerToggler />\n      <FormattedMessage\n        id=\"page.layouts.content\"\n        defaultMessage={\n          \"<h1>Keyboard Layouts</h1>\" +\n          \"<p>These charts visualize the efficiency of different keyboard layouts. An efficiency is a measure of how easy it is to type on a keyboard.</p>\" +\n          \"<p>The circles show relative key frequencies, and the arcs show relative key pair frequencies.</p>\" +\n          \"<p>It is easier to type when the most frequent keys are on the home row, and when the most frequent key pairs are typed with different fingers and hands. Therefore an efficient layout has the largest circles on the home row. It also has arcs that are evenly distributed across the keyboard, long and horizontal, rather than short and diagonal, because it indicates the frequent switching of fingers and hands.</p>\"\n        }\n      />\n      <dl>\n        <dt>\n          <FormattedMessage\n            id=\"layouts.stats.homeRowKeys.name\"\n            defaultMessage=\"Keys on the home row:\"\n          />\n        </dt>\n        <dd>\n          <FormattedMessage\n            id=\"layouts.stats.homeRowKeys.description\"\n            defaultMessage=\"The percentage of keys typed without leaving the Caps Lock row, the more the better.\"\n          />\n        </dd>\n        <dt>\n          <FormattedMessage\n            id=\"layouts.stats.topRowKeys.name\"\n            defaultMessage=\"Keys on the top row:\"\n          />\n        </dt>\n        <dd>\n          <FormattedMessage\n            id=\"layouts.stats.topRowKeys.description\"\n            defaultMessage=\"The percentage of keys typed on the Tab row, the less the better.\"\n          />\n        </dd>\n        <dt>\n          <FormattedMessage\n            id=\"layouts.stats.bottomRowKeys.name\"\n            defaultMessage=\"Keys on the bottom row:\"\n          />\n        </dt>\n        <dd>\n          <FormattedMessage\n            id=\"layouts.stats.bottomRowKeys.description\"\n            defaultMessage=\"The percentage of keys typed on the Shift row, the less the better.\"\n          />\n        </dd>\n        <dt>\n          <FormattedMessage\n            id=\"layouts.stats.sameHandKeys.name\"\n            defaultMessage=\"Keys typed by the same hand:\"\n          />\n        </dt>\n        <dd>\n          <FormattedMessage\n            id=\"layouts.stats.sameHandKeys.description\"\n            defaultMessage=\"The percentage of keys typed by the same hand, the less the better.\"\n          />\n        </dd>\n        <dt>\n          <FormattedMessage\n            id=\"layouts.stats.sameFingerKeys.name\"\n            defaultMessage=\"Keys typed by the same finger:\"\n          />\n        </dt>\n        <dd>\n          <FormattedMessage\n            id=\"layouts.stats.sameFingerKeys.description\"\n            defaultMessage=\"The percentage of keys typed by the same finger, the less the better.\"\n          />\n        </dd>\n      </dl>\n      <FieldList>\n        <Field>\n          <FormattedMessage id=\"t_Language:\" defaultMessage=\"Language:\" />\n        </Field>\n        <Field>\n          <OptionList\n            options={Language.ALL.map((item) => ({\n              name: formatLanguageName(item),\n              value: item.id,\n            }))}\n            value={language.id}\n            onSelect={(id) => {\n              setLanguage(Language.ALL.get(id));\n            }}\n          />\n        </Field>\n      </FieldList>\n      <PhoneticModelLoader language={language}>\n        {(model) => {\n          return (\n            <>\n              <FieldList>\n                <Field>\n                  <FormattedMessage\n                    id=\"t_Alphabet:\"\n                    defaultMessage=\"Alphabet:\"\n                  />\n                </Field>\n                <Field>\n                  <Alphabet model={model} />\n                </Field>\n              </FieldList>\n              {keyboards.map((keyboard) => (\n                <KeyFrequencyHeatmap\n                  key={keyboard.layout.id}\n                  keyboard={keyboard}\n                  model={model}\n                />\n              ))}\n            </>\n          );\n        }}\n      </PhoneticModelLoader>\n    </Article>\n  );\n}\n"],"names":["LazyCustomLayoutDesigner","lazy","CustomLayoutDesignerToggler","visible","setVisible","useState","Suspense","Spacer","size","FieldList","Filler","Button","onClick","KeyFrequencyHeatmap","keyboard","model","formatLayoutName","ngram1","ngram2","stats","Header","level","layout","Para","histogram","modifier","formatLanguageName","language","setLanguage","EN","keyboards","ALL","filter","map","Article","OptionList","options","item","name","value","id","onSelect","get"],"sourceRoot":""}