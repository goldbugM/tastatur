{"version":3,"file":"818916937edbcb34.js","mappings":"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","sources":["webpack://tastatur.com/./packages/mkboard-phonetic-model-loader/lib/loader.ts","webpack://tastatur.com/./packages/mkboard-phonetic-model-loader/lib/assets.ts","webpack://tastatur.com/./packages/mkboard-phonetic-model-loader/lib/PhoneticModelLoader.tsx","webpack://tastatur.com/./packages/page-layouts/lib/custom/CustomLayoutDesignerToggler.tsx","webpack://tastatur.com/./packages/page-layouts/lib/KeyFrequencyHeatmap.tsx","webpack://tastatur.com/./packages/mkboard-pages-browser/lib/pages/layouts.tsx","webpack://tastatur.com/./packages/page-layouts/lib/LayoutsPage.tsx"],"sourcesContent":["import { type Language } from \"@mkboard/keyboard\";\r\nimport {\r\n  censor,\r\n  makePhoneticModel,\r\n  type PhoneticModel,\r\n} from \"@mkboard/phonetic-model\";\r\nimport { expectType, request } from \"@mkboard/request\";\r\nimport { modelAssetPath } from \"./assets.ts\";\r\n\r\nexport const loaderImpl: PhoneticModel.Loader = async (\r\n  language: Language,\r\n): Promise<PhoneticModel> => {\r\n  const response = await request\r\n    .use(expectType(\"application/octet-stream\"))\r\n    .GET(modelAssetPath(language))\r\n    .send();\r\n  const body = await response.arrayBuffer();\r\n  const model = makePhoneticModel(language, new Uint8Array(body));\r\n  return censor(model);\r\n};\r\n","import { Language } from \"@mkboard/keyboard\";\r\nimport AR from \"@mkboard/phonetic-model/assets/model-ar.data\";\r\nimport BE from \"@mkboard/phonetic-model/assets/model-be.data\";\r\nimport CS from \"@mkboard/phonetic-model/assets/model-cs.data\";\r\nimport DA from \"@mkboard/phonetic-model/assets/model-da.data\";\r\nimport DE from \"@mkboard/phonetic-model/assets/model-de.data\";\r\nimport EL from \"@mkboard/phonetic-model/assets/model-el.data\";\r\nimport EN from \"@mkboard/phonetic-model/assets/model-en.data\";\r\nimport ES from \"@mkboard/phonetic-model/assets/model-es.data\";\r\nimport FA from \"@mkboard/phonetic-model/assets/model-fa.data\";\r\nimport FR from \"@mkboard/phonetic-model/assets/model-fr.data\";\r\nimport HE from \"@mkboard/phonetic-model/assets/model-he.data\";\r\nimport HR from \"@mkboard/phonetic-model/assets/model-hr.data\";\r\nimport HU from \"@mkboard/phonetic-model/assets/model-hu.data\";\r\nimport IT from \"@mkboard/phonetic-model/assets/model-it.data\";\r\nimport LT from \"@mkboard/phonetic-model/assets/model-lt.data\";\r\nimport NB from \"@mkboard/phonetic-model/assets/model-nb.data\";\r\nimport NL from \"@mkboard/phonetic-model/assets/model-nl.data\";\r\nimport PL from \"@mkboard/phonetic-model/assets/model-pl.data\";\r\nimport PT from \"@mkboard/phonetic-model/assets/model-pt.data\";\r\nimport RO from \"@mkboard/phonetic-model/assets/model-ro.data\";\r\nimport RU from \"@mkboard/phonetic-model/assets/model-ru.data\";\r\nimport SL from \"@mkboard/phonetic-model/assets/model-sl.data\";\r\nimport SV from \"@mkboard/phonetic-model/assets/model-sv.data\";\r\nimport TH from \"@mkboard/phonetic-model/assets/model-th.data\";\r\nimport TR from \"@mkboard/phonetic-model/assets/model-tr.data\";\r\nimport UK from \"@mkboard/phonetic-model/assets/model-uk.data\";\r\n\r\nexport function modelAssetPath(language: Language): string {\r\n  switch (language) {\r\n    case Language.AR:\r\n      return AR;\r\n    case Language.BE:\r\n      return BE;\r\n    case Language.CS:\r\n      return CS;\r\n    case Language.DA:\r\n      return DA;\r\n    case Language.DE:\r\n      return DE;\r\n    case Language.EL:\r\n      return EL;\r\n    case Language.EN:\r\n      return EN;\r\n    case Language.ES:\r\n      return ES;\r\n    case Language.FA:\r\n      return FA;\r\n    case Language.FR:\r\n      return FR;\r\n    case Language.HE:\r\n      return HE;\r\n    case Language.HR:\r\n      return HR;\r\n    case Language.HU:\r\n      return HU;\r\n    case Language.IT:\r\n      return IT;\r\n    case Language.LT:\r\n      return LT;\r\n    case Language.NB:\r\n      return NB;\r\n    case Language.NL:\r\n      return NL;\r\n    case Language.PL:\r\n      return PL;\r\n    case Language.PT:\r\n      return PT;\r\n    case Language.RO:\r\n      return RO;\r\n    case Language.RU:\r\n      return RU;\r\n    case Language.SL:\r\n      return SL;\r\n    case Language.SV:\r\n      return SV;\r\n    case Language.TH:\r\n      return TH;\r\n    case Language.TR:\r\n      return TR;\r\n    case Language.UK:\r\n      return UK;\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n","import { catchError } from \"@mkboard/debug\";\r\nimport { type Language } from \"@mkboard/keyboard\";\r\nimport { LoadingProgress } from \"@mkboard/pages-shared\";\r\nimport {\r\n  type PhoneticModel,\r\n  PhoneticModelContext,\r\n} from \"@mkboard/phonetic-model\";\r\nimport { type ReactNode, useEffect, useState } from \"react\";\r\nimport { loaderImpl } from \"./loader.ts\";\r\n\r\nexport function PhoneticModelLoader({\r\n  language,\r\n  children,\r\n  fallback = <LoadingProgress />,\r\n}: {\r\n  readonly language: Language;\r\n  readonly children: (result: PhoneticModel) => ReactNode;\r\n  readonly fallback?: ReactNode;\r\n}): ReactNode {\r\n  return (\r\n    <Loader key={language.id} language={language} fallback={fallback}>\r\n      {children}\r\n    </Loader>\r\n  );\r\n}\r\n\r\nexport namespace PhoneticModelLoader {\r\n  export let loader: PhoneticModel.Loader = loaderImpl;\r\n}\r\n\r\nfunction Loader({\r\n  language,\r\n  children,\r\n  fallback,\r\n}: {\r\n  readonly language: Language;\r\n  readonly children: (result: PhoneticModel) => ReactNode;\r\n  readonly fallback?: ReactNode;\r\n}): ReactNode {\r\n  const result = useLoader(language);\r\n  if (result == null) {\r\n    return fallback;\r\n  } else {\r\n    return (\r\n      <PhoneticModelContext.Provider value={result}>\r\n        {children(result)}\r\n      </PhoneticModelContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nfunction useLoader(language: Language): PhoneticModel | null {\r\n  const [result, setResult] = useState<PhoneticModel | null>(null);\r\n\r\n  useEffect(() => {\r\n    let didCancel = false;\r\n\r\n    PhoneticModelLoader.loader(language)\r\n      .then((result) => {\r\n        if (!didCancel) {\r\n          setResult(result);\r\n        }\r\n      })\r\n      .catch(catchError);\r\n\r\n    return () => {\r\n      didCancel = true;\r\n    };\r\n  }, [language]);\r\n\r\n  return result;\r\n}\r\n","import { Button, Field, FieldList, Spacer } from \"@mkboard/widget\";\r\nimport { lazy, Suspense, useState } from \"react\";\r\n\r\nconst LazyCustomLayoutDesigner = lazy(\r\n  () => import(\"./LazyCustomLayoutDesigner.tsx\"),\r\n);\r\n\r\nexport function CustomLayoutDesignerToggler() {\r\n  const [visible, setVisible] = useState(false);\r\n  if (visible) {\r\n    return (\r\n      <Suspense>\r\n        <LazyCustomLayoutDesigner />\r\n        <Spacer size={3} />\r\n      </Suspense>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <FieldList>\r\n          <Field.Filler />\r\n          <Button\r\n            onClick={() => {\r\n              setVisible(true);\r\n            }}\r\n          >\r\n            Design a custom layout\r\n          </Button>\r\n          <Field.Filler />\r\n        </FieldList>\r\n        <Spacer size={3} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import {\r\n  computeStats,\r\n  type Keyboard,\r\n  useFormattedNames,\r\n} from \"@mkboard/keyboard\";\r\nimport {\r\n  HeatmapLayer,\r\n  KeyboardStats,\r\n  KeyLayer,\r\n  TransitionsLayer,\r\n  VirtualKeyboard,\r\n} from \"@mkboard/keyboard-ui\";\r\nimport { type PhoneticModel } from \"@mkboard/phonetic-model\";\r\nimport { Header, Para } from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\n\r\nexport function KeyFrequencyHeatmap({\r\n  keyboard,\r\n  model,\r\n}: {\r\n  readonly keyboard: Keyboard;\r\n  readonly model: PhoneticModel;\r\n}): ReactNode {\r\n  const { formatLayoutName } = useFormattedNames();\r\n  const ngram1 = model.ngram1();\r\n  const ngram2 = model.ngram2();\r\n  const stats = computeStats(keyboard, ngram1, ngram2);\r\n  return (\r\n    <>\r\n      <Header level={2}>{formatLayoutName(keyboard.layout)}</Header>\r\n\r\n      <KeyboardStats stats={stats} />\r\n\r\n      <Para>\r\n        <VirtualKeyboard keyboard={keyboard}>\r\n          <KeyLayer />\r\n          <HeatmapLayer histogram={ngram1} modifier=\"f\" />\r\n          <TransitionsLayer histogram={ngram2} modifier=\"f\" />\r\n        </VirtualKeyboard>\r\n      </Para>\r\n    </>\r\n  );\r\n}\r\n","import { LayoutsPage } from \"@mkboard/page-layouts\";\r\n\r\nexport default LayoutsPage;\r\n","import {\r\n  Language,\r\n  Layout,\r\n  loadKeyboard,\r\n  useFormattedNames,\r\n} from \"@mkboard/keyboard\";\r\nimport { Alphabet } from \"@mkboard/phonetic-model\";\r\nimport { PhoneticModelLoader } from \"@mkboard/phonetic-model-loader\";\r\nimport { Article, Field, FieldList, OptionList } from \"@mkboard/widget\";\r\nimport { useState } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { CustomLayoutDesignerToggler } from \"./custom/CustomLayoutDesignerToggler.tsx\";\r\nimport { KeyFrequencyHeatmap } from \"./KeyFrequencyHeatmap.tsx\";\r\n\r\nexport function LayoutsPage() {\r\n  const { formatLanguageName } = useFormattedNames();\r\n  const [language, setLanguage] = useState(Language.EN);\r\n  const keyboards = Layout.ALL.filter(\r\n    (layout) => layout.language === language,\r\n  ).map((layout) => loadKeyboard(layout));\r\n  return (\r\n    <Article>\r\n      <CustomLayoutDesignerToggler />\r\n      <FormattedMessage\r\n        id=\"page.layouts.content\"\r\n        defaultMessage={\r\n          \"<h1>Keyboard Layouts</h1>\" +\r\n          \"<p>These charts visualize the efficiency of different keyboard layouts. An efficiency is a measure of how easy it is to type on a keyboard.</p>\" +\r\n          \"<p>The circles show relative key frequencies, and the arcs show relative key pair frequencies.</p>\" +\r\n          \"<p>It is easier to type when the most frequent keys are on the home row, and when the most frequent key pairs are typed with different fingers and hands. Therefore an efficient layout has the largest circles on the home row. It also has arcs that are evenly distributed across the keyboard, long and horizontal, rather than short and diagonal, because it indicates the frequent switching of fingers and hands.</p>\"\r\n        }\r\n      />\r\n      <dl>\r\n        <dt>\r\n          <FormattedMessage\r\n            id=\"layouts.stats.homeRowKeys.name\"\r\n            defaultMessage=\"Keys on the home row:\"\r\n          />\r\n        </dt>\r\n        <dd>\r\n          <FormattedMessage\r\n            id=\"layouts.stats.homeRowKeys.description\"\r\n            defaultMessage=\"The percentage of keys typed without leaving the Caps Lock row, the more the better.\"\r\n          />\r\n        </dd>\r\n        <dt>\r\n          <FormattedMessage\r\n            id=\"layouts.stats.topRowKeys.name\"\r\n            defaultMessage=\"Keys on the top row:\"\r\n          />\r\n        </dt>\r\n        <dd>\r\n          <FormattedMessage\r\n            id=\"layouts.stats.topRowKeys.description\"\r\n            defaultMessage=\"The percentage of keys typed on the Tab row, the less the better.\"\r\n          />\r\n        </dd>\r\n        <dt>\r\n          <FormattedMessage\r\n            id=\"layouts.stats.bottomRowKeys.name\"\r\n            defaultMessage=\"Keys on the bottom row:\"\r\n          />\r\n        </dt>\r\n        <dd>\r\n          <FormattedMessage\r\n            id=\"layouts.stats.bottomRowKeys.description\"\r\n            defaultMessage=\"The percentage of keys typed on the Shift row, the less the better.\"\r\n          />\r\n        </dd>\r\n        <dt>\r\n          <FormattedMessage\r\n            id=\"layouts.stats.sameHandKeys.name\"\r\n            defaultMessage=\"Keys typed by the same hand:\"\r\n          />\r\n        </dt>\r\n        <dd>\r\n          <FormattedMessage\r\n            id=\"layouts.stats.sameHandKeys.description\"\r\n            defaultMessage=\"The percentage of keys typed by the same hand, the less the better.\"\r\n          />\r\n        </dd>\r\n        <dt>\r\n          <FormattedMessage\r\n            id=\"layouts.stats.sameFingerKeys.name\"\r\n            defaultMessage=\"Keys typed by the same finger:\"\r\n          />\r\n        </dt>\r\n        <dd>\r\n          <FormattedMessage\r\n            id=\"layouts.stats.sameFingerKeys.description\"\r\n            defaultMessage=\"The percentage of keys typed by the same finger, the less the better.\"\r\n          />\r\n        </dd>\r\n      </dl>\r\n      <FieldList>\r\n        <Field>\r\n          <FormattedMessage id=\"t_Language:\" defaultMessage=\"Language:\" />\r\n        </Field>\r\n        <Field>\r\n          <OptionList\r\n            options={Language.ALL.map((item) => ({\r\n              name: formatLanguageName(item),\r\n              value: item.id,\r\n            }))}\r\n            value={language.id}\r\n            onSelect={(id) => {\r\n              setLanguage(Language.ALL.get(id));\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <PhoneticModelLoader language={language}>\r\n        {(model) => {\r\n          return (\r\n            <>\r\n              <FieldList>\r\n                <Field>\r\n                  <FormattedMessage\r\n                    id=\"t_Alphabet:\"\r\n                    defaultMessage=\"Alphabet:\"\r\n                  />\r\n                </Field>\r\n                <Field>\r\n                  <Alphabet model={model} />\r\n                </Field>\r\n              </FieldList>\r\n              {keyboards.map((keyboard) => (\r\n                <KeyFrequencyHeatmap\r\n                  key={keyboard.layout.id}\r\n                  keyboard={keyboard}\r\n                  model={model}\r\n                />\r\n              ))}\r\n            </>\r\n          );\r\n        }}\r\n      </PhoneticModelLoader>\r\n    </Article>\r\n  );\r\n}\r\n"],"names":["loaderImpl","async","language","response","use","GET","AR","BE","CS","DA","DE","EL","EN","ES","FA","FR","HE","HR","HU","IT","LT","NB","NL","PL","PT","RO","RU","SL","SV","TH","TR","UK","Error","modelAssetPath","send","body","arrayBuffer","model","Uint8Array","PhoneticModelLoader","children","fallback","Loader","id","result","setResult","useState","useEffect","didCancel","loader","then","catch","useLoader","Provider","value","LazyCustomLayoutDesigner","lazy","CustomLayoutDesignerToggler","visible","setVisible","Suspense","Spacer","size","FieldList","Filler","Button","onClick","KeyFrequencyHeatmap","keyboard","formatLayoutName","ngram1","ngram2","stats","Header","level","layout","Para","histogram","modifier","formatLanguageName","setLanguage","keyboards","ALL","filter","map","Article","OptionList","options","item","name","onSelect","get"],"sourceRoot":""}