{"version":3,"file":"180870370028b5b7.js","mappings":"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","sources":["webpack://tastatur.com/./packages/mkboard-lesson-loader/lib/LessonLoader.tsx","webpack://tastatur.com/./packages/mkboard-widget/lib/hooks/use-tasks.ts","webpack://tastatur.com/./packages/mkboard-widget/lib/hooks/use-timeout.ts","webpack://tastatur.com/./packages/mkboard-widget/lib/components/zoomer/place.ts","webpack://tastatur.com/./packages/mkboard-widget/lib/components/zoomer/Zoomer.tsx","webpack://tastatur.com/./packages/mkboard-widget/lib/components/zoomer/use-mouse-wheel.ts","webpack://tastatur.com/./packages/mkboard-widget/lib/components/zoomer/Zoomer.module.less?7c2d","webpack://tastatur.com/./packages/page-practice/lib/practice/Controls.tsx","webpack://tastatur.com/./packages/page-practice/lib/practice/Controls.module.less?b729","webpack://tastatur.com/./packages/mkboard-widget/lib/components/popup/Popup.tsx","webpack://tastatur.com/./packages/mkboard-widget/lib/components/popup/Popup.module.less?183e","webpack://tastatur.com/./packages/page-practice/lib/practice/Indicators.module.less?46f9","webpack://tastatur.com/./packages/page-practice/lib/practice/LearningRateDescription.tsx","webpack://tastatur.com/./packages/page-practice/lib/practice/KeyExtendedDetails.tsx","webpack://tastatur.com/./packages/page-practice/lib/practice/KeyExtendedDetails.module.less?6e34","webpack://tastatur.com/./packages/page-practice/lib/practice/Indicators.tsx","webpack://tastatur.com/./packages/page-practice/lib/practice/KeyboardPresenter.tsx","webpack://tastatur.com/./packages/mkboard-widget/lib/components/popup/Spotlight.tsx","webpack://tastatur.com/./packages/mkboard-widget/lib/components/popup/Spotlight.module.less?2e19","webpack://tastatur.com/./packages/mkboard-widget/lib/components/tour/Meter.tsx","webpack://tastatur.com/./packages/mkboard-widget/lib/components/tour/Meter.module.less?2049","webpack://tastatur.com/./packages/mkboard-widget/lib/components/tour/Slide.tsx","webpack://tastatur.com/./packages/mkboard-widget/lib/components/tour/Slide.module.less?27c7","webpack://tastatur.com/./packages/mkboard-widget/lib/components/tour/Tour.module.less?005c","webpack://tastatur.com/./packages/mkboard-widget/lib/components/tour/Tour.tsx","webpack://tastatur.com/./packages/page-practice/lib/practice/KeyDetailsChartDemo.tsx","webpack://tastatur.com/./packages/page-practice/lib/practice/KeyDetailsChartDemo.module.less?38ad","webpack://tastatur.com/./packages/page-practice/lib/practice/PracticeTour.tsx","webpack://tastatur.com/./packages/page-practice/lib/practice/Presenter.module.less?e532","webpack://tastatur.com/./packages/page-practice/lib/practice/Presenter.tsx","webpack://tastatur.com/./packages/mkboard-widget/lib/components/toast/Award.module.less?2956","webpack://tastatur.com/./packages/mkboard-widget/lib/components/toast/Award.tsx","webpack://tastatur.com/./packages/page-practice/lib/practice/state/event-icons.tsx","webpack://tastatur.com/./packages/page-practice/lib/practice/state/event-icons.module.less?fd17","webpack://tastatur.com/./packages/page-practice/lib/practice/state/EventAlert.tsx","webpack://tastatur.com/./packages/page-practice/lib/practice/state/lesson-state.ts","webpack://tastatur.com/./packages/page-practice/lib/practice/state/event-source-daily-goal.ts","webpack://tastatur.com/./packages/page-practice/lib/practice/state/event-source-letter.ts","webpack://tastatur.com/./packages/page-practice/lib/practice/state/event-source-top-score.ts","webpack://tastatur.com/./packages/page-practice/lib/practice/state/event-source-top-speed.ts","webpack://tastatur.com/./packages/page-practice/lib/practice/state/progress.ts","webpack://tastatur.com/./packages/page-practice/lib/practice/Controller.tsx","webpack://tastatur.com/./packages/page-practice/lib/practice/state/last-lesson.ts","webpack://tastatur.com/./packages/page-practice/lib/practice/PracticeScreen.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/ExplainSettings.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/KeyboardSettings.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/LessonLengthProp.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/TargetSpeedProp.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/BooksLessonSettings.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/CodeLessonSettings.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/example-texts.ts","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/CustomTextLessonSettings.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/DailyGoalSettings.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/AlphabetSizeProp.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/KeyboardOrderProp.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/NaturalWordsProp.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/RecoverKeysProp.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/RepeatWordsProp.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/TextManglingProp.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/GuidedLessonSettings.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/LessonPreview.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/LessonPreview.module.less?082e","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/BenfordProp.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/NumbersLessonSettings.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/lesson/WordListLessonSettings.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/LessonSettings.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/MiscSettings.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/SettingsScreen.tsx","webpack://tastatur.com/./packages/page-practice/lib/settings/SettingsScreen.module.less?f864","webpack://tastatur.com/./packages/page-practice/lib/views.tsx","webpack://tastatur.com/./packages/page-practice/lib/PracticePage.tsx","webpack://tastatur.com/./packages/mkboard-pages-browser/lib/pages/practice.tsx"],"sourcesContent":["import { loadContent } from \"@mkboard/content-books\";\r\nimport { loadWordList } from \"@mkboard/content-words\";\r\nimport { catchError } from \"@mkboard/debug\";\r\nimport { KeyboardOptions, useKeyboard } from \"@mkboard/keyboard\";\r\nimport {\r\n  BooksLesson,\r\n  CodeLesson,\r\n  CustomTextLesson,\r\n  GuidedLesson,\r\n  type Lesson,\r\n  lessonProps,\r\n  LessonType,\r\n  NumbersLesson,\r\n  WordListLesson,\r\n} from \"@mkboard/lesson\";\r\nimport { LoadingProgress } from \"@mkboard/pages-shared\";\r\nimport { type PhoneticModel } from \"@mkboard/phonetic-model\";\r\nimport { PhoneticModelLoader } from \"@mkboard/phonetic-model-loader\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport { type ReactNode, useEffect, useState } from \"react\";\r\n\r\nexport function LessonLoader({\r\n  children,\r\n  fallback = <LoadingProgress />,\r\n}: {\r\n  readonly children: (result: Lesson) => ReactNode;\r\n  readonly fallback?: ReactNode;\r\n}): ReactNode {\r\n  const { settings } = useSettings();\r\n  const lessonType = settings.get(lessonProps.type);\r\n  const { language } = KeyboardOptions.from(settings);\r\n  return (\r\n    <PhoneticModelLoader language={language}>\r\n      {(model) => (\r\n        <Loader key={lessonType.id} model={model} fallback={fallback}>\r\n          {children}\r\n        </Loader>\r\n      )}\r\n    </PhoneticModelLoader>\r\n  );\r\n}\r\n\r\nfunction Loader({\r\n  model,\r\n  children,\r\n  fallback,\r\n}: {\r\n  readonly model: PhoneticModel;\r\n  readonly children: (result: Lesson) => ReactNode;\r\n  readonly fallback?: ReactNode;\r\n}): ReactNode {\r\n  const result = useLoader(model);\r\n  if (result == null) {\r\n    return fallback;\r\n  } else {\r\n    return children(result);\r\n  }\r\n}\r\n\r\nfunction useLoader(model: PhoneticModel): Lesson | null {\r\n  const { settings } = useSettings();\r\n  const keyboard = useKeyboard();\r\n  const [result, setResult] = useState<Lesson | null>(null);\r\n\r\n  useEffect(() => {\r\n    let didCancel = false;\r\n\r\n    const load = async (): Promise<void> => {\r\n      switch (settings.get(lessonProps.type)) {\r\n        case LessonType.GUIDED: {\r\n          const { language } = KeyboardOptions.from(settings);\r\n          const wordList = await loadWordList(language);\r\n          if (!didCancel) {\r\n            setResult(new GuidedLesson(settings, keyboard, model, wordList));\r\n          }\r\n          break;\r\n        }\r\n        case LessonType.WORDLIST: {\r\n          const { language } = KeyboardOptions.from(settings);\r\n          const wordList = await loadWordList(language);\r\n          if (!didCancel) {\r\n            setResult(new WordListLesson(settings, keyboard, model, wordList));\r\n          }\r\n          break;\r\n        }\r\n        case LessonType.BOOKS: {\r\n          const book = settings.get(lessonProps.books.book);\r\n          const content = await loadContent(book);\r\n          if (!didCancel) {\r\n            setResult(\r\n              new BooksLesson(settings, keyboard, model, { book, content }),\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case LessonType.CUSTOM: {\r\n          if (!didCancel) {\r\n            setResult(new CustomTextLesson(settings, keyboard, model));\r\n          }\r\n          break;\r\n        }\r\n        case LessonType.CODE: {\r\n          if (!didCancel) {\r\n            setResult(new CodeLesson(settings, keyboard, model));\r\n          }\r\n          break;\r\n        }\r\n        case LessonType.NUMBERS: {\r\n          if (!didCancel) {\r\n            setResult(new NumbersLesson(settings, keyboard, model));\r\n          }\r\n          break;\r\n        }\r\n        default:\r\n          throw new Error();\r\n      }\r\n    };\r\n\r\n    load().catch(catchError);\r\n\r\n    return () => {\r\n      didCancel = true;\r\n    };\r\n  }, [settings, keyboard, model]);\r\n\r\n  return result;\r\n}\r\n","import { Tasks } from \"@mkboard/lang\";\r\nimport { useEffect, useRef } from \"react\";\r\n\r\nexport const useTasks = () => {\r\n  const ref = useRef<Tasks>(null!);\r\n  if (ref.current == null) {\r\n    ref.current = new Tasks();\r\n  }\r\n  useEffect(() => {\r\n    return () => {\r\n      ref.current.cancelAll();\r\n    };\r\n  }, []);\r\n  return ref.current;\r\n};\r\n","import { type Task } from \"@mkboard/lang\";\r\nimport { useRef } from \"react\";\r\nimport { useTasks } from \"./use-tasks.ts\";\r\n\r\nexport type TimeoutScheduler = {\r\n  get pending(): boolean;\r\n  cancel(): void;\r\n  schedule(callback: () => void, timeout: number): void;\r\n};\r\n\r\nexport const useTimeout = () => {\r\n  const tasks = useTasks();\r\n  const ref = useRef<TimeoutScheduler>(null!);\r\n  if (ref.current == null) {\r\n    ref.current = new (class implements TimeoutScheduler {\r\n      #task: Task | null = null;\r\n\r\n      get pending() {\r\n        return this.#task != null;\r\n      }\r\n\r\n      cancel() {\r\n        if (this.#task != null) {\r\n          this.#task.cancel();\r\n          this.#task = null;\r\n        }\r\n      }\r\n\r\n      schedule(callback: () => void, timeout: number) {\r\n        this.cancel();\r\n        this.#task = tasks.delayed(timeout, callback);\r\n      }\r\n    })();\r\n  }\r\n  return ref.current;\r\n};\r\n","import { getBoundingBox, getScreenSize, Rect } from \"../../utils/index.ts\";\nimport { type ZoomablePosition } from \"./Zoomer.types.ts\";\n\nconst screenMargin = 0;\n\nexport function place(root: HTMLElement) {\n  const rootBox = getBoundingBox(root);\n  const screenSize = getScreenSize();\n  const screenBox = new Rect(\n    screenMargin,\n    screenMargin,\n    screenSize.width - screenMargin * 2,\n    screenSize.height - screenMargin * 2,\n  );\n  const areaBox = new Rect(\n    screenBox.x,\n    screenBox.y,\n    screenBox.width - rootBox.width,\n    screenBox.height - rootBox.height,\n  );\n\n  const fitToScreen = ({ x, y, zoom }: ZoomablePosition) => {\n    if (zoom > 3) {\n      return { x, y, zoom: 3 };\n    }\n    if (zoom < 0.5) {\n      return { x, y, zoom: 0.5 };\n    }\n    if (\n      zoom > 1 &&\n      (rootBox.width > screenBox.width || rootBox.height > screenBox.height)\n    ) {\n      zoom = Math.min(\n        (screenBox.width / rootBox.width) * zoom,\n        (screenBox.height / rootBox.height) * zoom,\n      );\n      return { x: Math.floor(x), y: Math.floor(y), zoom };\n    }\n    if (x !== 0) {\n      if (rootBox.left < areaBox.left) {\n        x += areaBox.left - rootBox.left;\n      } else if (rootBox.left > areaBox.right) {\n        x -= rootBox.left - areaBox.right;\n      }\n    }\n    if (y !== 0) {\n      if (rootBox.top < areaBox.top) {\n        y += areaBox.top - rootBox.top;\n      } else if (rootBox.top > areaBox.bottom) {\n        y -= rootBox.top - areaBox.bottom;\n      }\n    }\n    return { x: Math.floor(x), y: Math.floor(y), zoom };\n  };\n\n  return {\n    fitToScreen,\n  };\n}\n","import { Tasks } from \"@mkboard/lang\";\r\nimport { mdiCursorMove } from \"@mdi/js\";\r\nimport { clsx } from \"clsx\";\r\nimport {\r\n  cloneElement,\r\n  type ReactNode,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { useDocumentEvent, useWindowEvent } from \"../../hooks/index.ts\";\r\nimport { Icon } from \"../icon/index.ts\";\r\nimport { place } from \"./place.ts\";\r\nimport { useMouseWheel } from \"./use-mouse-wheel.ts\";\r\nimport * as styles from \"./Zoomer.module.less\";\r\nimport { type ZoomablePosition, type ZoomerProps } from \"./Zoomer.types.ts\";\r\n\r\nconst globalMoving = { current: null as HTMLElement | null };\r\n\r\nconst savedPositions = new Map<string, ZoomablePosition>();\r\n\r\nexport function Zoomer({ children, id = null }: ZoomerProps): ReactNode {\r\n  const rootRef = useRef<HTMLDivElement>(null);\r\n  const [hover, setHover] = useState(false);\r\n  const [moving, setMoving] = useState(false);\r\n  const [{ x, y, zoom }, setPosition] = useState(\r\n    (id && savedPositions.get(id)) || { x: 0, y: 0, zoom: 1 },\r\n  );\r\n  useMouseWheel(rootRef.current, (ev) => {\r\n    setPosition({ x, y, zoom: zoom - Math.sign(ev.deltaY) * 0.05 });\r\n    setHover(true);\r\n    ev.preventDefault();\r\n  });\r\n  useDocumentEvent(\"mousedown\", (ev) => {\r\n    const root = rootRef.current;\r\n    if (root != null && !moving && contains(root, ev.target)) {\r\n      setMoving(true);\r\n      setHover(false);\r\n      globalMoving.current = root;\r\n      ev.preventDefault();\r\n    }\r\n  });\r\n  useDocumentEvent(\"mouseup\", (ev) => {\r\n    const root = rootRef.current;\r\n    if (root != null && moving) {\r\n      setMoving(false);\r\n      setHover(true);\r\n      globalMoving.current = null;\r\n      ev.preventDefault();\r\n    }\r\n  });\r\n  useDocumentEvent(\"mousemove\", (ev) => {\r\n    const root = rootRef.current;\r\n    if (root != null && moving) {\r\n      setPosition({ x: x + ev.movementX, y: y + ev.movementY, zoom });\r\n      ev.preventDefault();\r\n    }\r\n  });\r\n  useWindowEvent(\"resize\", () => {\r\n    const root = rootRef.current;\r\n    if (root != null) {\r\n      setPosition(place(root).fitToScreen({ x, y, zoom }));\r\n    }\r\n  });\r\n  useEffect(() => {\r\n    const root = rootRef.current;\r\n    if (root != null) {\r\n      setPosition(place(root).fitToScreen({ x, y, zoom }));\r\n    }\r\n  }, [x, y, zoom]);\r\n  useEffect(() => {\r\n    if (id) {\r\n      savedPositions.set(id, { x, y, zoom });\r\n    }\r\n  }, [id, x, y, zoom]);\r\n  useEffect(() => {\r\n    const tasks = new Tasks();\r\n    if (hover) {\r\n      tasks.delayed(1000, () => {\r\n        setHover(false);\r\n      });\r\n    }\r\n    return () => {\r\n      tasks.cancelAll();\r\n    };\r\n  }, [hover]);\r\n  return (\r\n    <div\r\n      ref={rootRef}\r\n      className={clsx(styles.root, (hover || moving) && styles.hover)}\r\n      style={{\r\n        position: \"relative\",\r\n        left: x,\r\n        top: y,\r\n        transform: `scale(${zoom})`,\r\n      }}\r\n      onMouseEnter={() => {\r\n        setHover(globalMoving.current == null);\r\n      }}\r\n      onMouseLeave={() => {\r\n        setHover(false);\r\n      }}\r\n      onClick={(ev) => {\r\n        if (ev.altKey) {\r\n          setHover(false);\r\n          setMoving(false);\r\n          setPosition({ x: 0, y: 0, zoom: 1 });\r\n        }\r\n      }}\r\n    >\r\n      {cloneElement(children, { ...children.props, moving })}\r\n      {(hover || moving) && (\r\n        <Icon className={styles.icon} shape={mdiCursorMove} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction contains(root: Element, target: unknown): boolean {\r\n  return (\r\n    target instanceof Element && (root === target || root.contains(target))\r\n  );\r\n}\r\n","import { useEffect, useRef } from \"react\";\n\n// Attaches a non-passive mouse wheel event handler\n// that actually can prevent default.\n// https://github.com/facebook/react/issues/14856\nexport function useMouseWheel(\n  element: HTMLElement | null,\n  handler: (event: WheelEvent) => void,\n): void {\n  const ref = useRef(handler);\n  ref.current = handler;\n  useEffect(() => {\n    if (element == null) {\n      return;\n    }\n    const handler = (ev: WheelEvent): void => {\n      ref.current.call(element, ev);\n    };\n    element.addEventListener(\"wheel\", handler);\n    return () => {\n      element.removeEventListener(\"wheel\", handler);\n    };\n  }, [element]);\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"lMi4KR87Bg\";\nvar _2 = \"atDlEmqV8D\";\nvar _3 = \"uob996lTUV\";\nexport { _1 as \"hover\", _2 as \"icon\", _3 as \"root\" }\n","import { Dir } from \"@mkboard/intl\";\r\nimport { names } from \"@mkboard/lesson-ui\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport { Button, Icon, IconButton, useView } from \"@mkboard/widget\";\r\nimport {\r\n  mdiAspectRatio,\r\n  mdiCog,\r\n  mdiHelpCircleOutline,\r\n  mdiRedo,\r\n  mdiUndo,\r\n} from \"@mdi/js\";\r\nimport { memo, type ReactNode } from \"react\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { views } from \"../views.tsx\";\r\nimport * as styles from \"./Controls.module.less\";\r\n\r\nexport const Controls = memo(function Controls({\r\n  onChangeView,\r\n  onResetLesson,\r\n  onSkipLesson,\r\n  onHelp,\r\n}: {\r\n  readonly onChangeView: () => void;\r\n  readonly onResetLesson: () => void;\r\n  readonly onSkipLesson: () => void;\r\n  readonly onHelp: () => void;\r\n}): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings } = useSettings();\r\n  const { setView } = useView(views);\r\n  return (\r\n    <div id={names.controls} className={styles.controls}>\r\n      <IconButton\r\n        icon={<Icon shape={mdiHelpCircleOutline} />}\r\n        title={formatMessage({\r\n          id: \"practice.widget.showTour.description\",\r\n          defaultMessage: \"Show a guided tour with help slides.\",\r\n        })}\r\n        onClick={onHelp}\r\n      />\r\n      <Dir swap=\"icon\">\r\n        <IconButton\r\n          icon={<Icon shape={mdiUndo} />}\r\n          title={formatMessage({\r\n            id: \"practice.widget.resetLesson.description\",\r\n            defaultMessage: \"Reset the current lesson (Ctrl + Left Arrow).\",\r\n          })}\r\n          onClick={onResetLesson}\r\n        />\r\n        <IconButton\r\n          icon={<Icon shape={mdiRedo} />}\r\n          title={formatMessage({\r\n            id: \"practice.widget.skipLesson.description\",\r\n            defaultMessage: \"Skip the current lesson (Ctrl + Right Arrow).\",\r\n          })}\r\n          onClick={onSkipLesson}\r\n        />\r\n      </Dir>\r\n      <IconButton\r\n        icon={<Icon shape={mdiAspectRatio} />}\r\n        title={formatMessage({\r\n          id: \"practice.widget.switchView.description\",\r\n          defaultMessage: \"Switch the current interface layout.\",\r\n        })}\r\n        onClick={onChangeView}\r\n      />\r\n      {settings.isNew ? (\r\n        <Button\r\n          icon={<Icon shape={mdiCog} />}\r\n          label={formatMessage({\r\n            id: \"t_Settings\",\r\n            defaultMessage: \"Settings\",\r\n          })}\r\n          title={formatMessage({\r\n            id: \"practice.widget.settings.description\",\r\n            defaultMessage:\r\n              \"Change lesson settings, configure language, keyboard layout, etc.\",\r\n          })}\r\n          onClick={() => {\r\n            setView(\"settings\");\r\n          }}\r\n        />\r\n      ) : (\r\n        <IconButton\r\n          icon={<Icon shape={mdiCog} />}\r\n          title={formatMessage({\r\n            id: \"practice.widget.settings.description\",\r\n            defaultMessage:\r\n              \"Change lesson settings, configure language, keyboard layout, etc.\",\r\n          })}\r\n          onClick={() => {\r\n            setView(\"settings\");\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n","// extracted by mini-css-extract-plugin\nvar _1 = \"ckRxMuQo5D\";\nexport { _1 as \"controls\" }\n","import { type ReactNode, useLayoutEffect, useMemo, useRef } from \"react\";\nimport { type FloatingPosition, place } from \"../../floating/index.ts\";\nimport { useScreenSize } from \"../../hooks/index.ts\";\nimport { getBoundingBox, querySelector } from \"../../utils/index.ts\";\nimport { type MouseProps } from \"../types.ts\";\nimport * as styles from \"./Popup.module.less\";\n\nexport type PopupProps = {\n  readonly anchor?: Element | string;\n  readonly arrow?: boolean;\n  readonly children?: ReactNode;\n  readonly position?: FloatingPosition;\n  readonly offset?: number;\n} & MouseProps;\n\nexport function Popup({\n  anchor,\n  arrow = true,\n  children,\n  position,\n  offset = 20,\n  ...props\n}: PopupProps): ReactNode {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const arrowRef = useRef<HTMLDivElement>(null);\n  const options = useMemo(() => ({ position, offset }), [position, offset]);\n  const screenSize = useScreenSize();\n  useLayoutEffect(() => {\n    if (rootRef.current != null)\n      if (anchor == null) {\n        place(rootRef.current!).centerToScreen(screenSize);\n      } else {\n        const anchorBox = getBoundingBox(querySelector(anchor));\n        place(rootRef.current!, arrowRef.current!)\n          .withOptions(options)\n          .alignToAnchor(anchorBox, screenSize);\n      }\n  }, [anchor, options, screenSize]);\n  return (\n    <div\n      {...props}\n      ref={rootRef}\n      className={styles.root}\n      style={{ position: \"fixed\", zIndex: 1 }}\n    >\n      {anchor && arrow && (\n        <div\n          ref={arrowRef}\n          className={styles.arrow}\n          style={{ position: \"absolute\" }}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"H3Dkpen7Nt\";\nvar _2 = \"YQXf23YhJH\";\nexport { _1 as \"arrow\", _2 as \"root\" }\n","// extracted by mini-css-extract-plugin\nvar _1 = \"p8KBocnU4S\";\nexport { _1 as \"indicators\" }\n","import { useIntlNumbers } from \"@mkboard/intl\";\r\nimport { type LearningRate, type LessonKey } from \"@mkboard/lesson\";\r\nimport { Name, Para, Value } from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nexport function LearningRateDescription({\r\n  lessonKey,\r\n  learningRate,\r\n}: {\r\n  readonly lessonKey: LessonKey;\r\n  readonly learningRate: LearningRate | null;\r\n}): ReactNode {\r\n  const { formatNumber, formatPercents } = useIntlNumbers();\r\n  if ((lessonKey.bestConfidence ?? 0) >= 1) {\r\n    return (\r\n      <Para align=\"center\">\r\n        <Name>\r\n          <FormattedMessage\r\n            id=\"learningRate.alreadyUnlocked\"\r\n            defaultMessage=\"This letter is already unlocked.\"\r\n          />\r\n        </Name>\r\n      </Para>\r\n    );\r\n  }\r\n  if (\r\n    learningRate != null &&\r\n    learningRate.remainingLessons > 0 &&\r\n    learningRate.certainty > 0\r\n  ) {\r\n    return (\r\n      <Para align=\"center\">\r\n        <Name>\r\n          <FormattedMessage\r\n            id=\"learningRate.remainingLessons\"\r\n            defaultMessage={\r\n              \"Approximately {remainingLessons} lessons remaining to \" +\r\n              \"unlock the next letter ({certainty} certainty).\"\r\n            }\r\n            values={{\r\n              remainingLessons: (\r\n                <Value value={formatNumber(learningRate.remainingLessons)} />\r\n              ),\r\n              certainty: (\r\n                <Value value={formatPercents(learningRate.certainty)} />\r\n              ),\r\n            }}\r\n          />\r\n        </Name>\r\n      </Para>\r\n    );\r\n  }\r\n  return (\r\n    <Para align=\"center\">\r\n      <Name>\r\n        <FormattedMessage\r\n          id=\"learningRate.unknown\"\r\n          defaultMessage=\"Need more data to compute the remaining lessons to unlock this letter.\"\r\n        />\r\n      </Name>\r\n    </Para>\r\n  );\r\n}\r\n","import { KeyDetailsChart } from \"@mkboard/chart\";\r\nimport { LearningRate, type LessonKey, Target } from \"@mkboard/lesson\";\r\nimport { Key, KeyDetails } from \"@mkboard/lesson-ui\";\r\nimport { type KeyStats } from \"@mkboard/result\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport { Box } from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport * as styles from \"./KeyExtendedDetails.module.less\";\r\nimport { LearningRateDescription } from \"./LearningRateDescription.tsx\";\r\n\r\nexport function KeyExtendedDetails({\r\n  lessonKey,\r\n  keyStats,\r\n}: {\r\n  readonly lessonKey: LessonKey;\r\n  readonly keyStats: KeyStats;\r\n}): ReactNode {\r\n  const { settings } = useSettings();\r\n  const target = new Target(settings);\r\n  const learningRate = LearningRate.from(keyStats.samples, target);\r\n  return (\r\n    <div className={styles.root}>\r\n      <Box alignItems=\"center\" justifyContent=\"center\">\r\n        <Key lessonKey={lessonKey} size=\"large\" />\r\n        <KeyDetails lessonKey={lessonKey} />\r\n      </Box>\r\n      <LearningRateDescription\r\n        lessonKey={lessonKey}\r\n        learningRate={learningRate}\r\n      />\r\n      <KeyDetailsChart\r\n        lessonKey={lessonKey}\r\n        learningRate={learningRate}\r\n        width=\"50rem\"\r\n        height=\"15rem\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nvar _1 = \"kknqhPomby\";\nexport { _1 as \"root\" }\n","import { Tasks } from \"@mkboard/lang\";\r\nimport { type LessonKey } from \"@mkboard/lesson\";\r\nimport {\r\n  CurrentKeyRow,\r\n  DailyGoalRow,\r\n  GaugeRow,\r\n  KeySetRow,\r\n  names,\r\n  StreakListRow,\r\n} from \"@mkboard/lesson-ui\";\r\nimport { Popup, Portal } from \"@mkboard/widget\";\r\nimport { memo, type ReactNode, useEffect, useState } from \"react\";\r\nimport * as styles from \"./Indicators.module.less\";\r\nimport { KeyExtendedDetails } from \"./KeyExtendedDetails.tsx\";\r\nimport { type LessonState } from \"./state/index.ts\";\r\n\r\nexport const Indicators = memo(function Indicators({\r\n  state: { keyStatsMap, summaryStats, lessonKeys, streakList, dailyGoal },\r\n}: {\r\n  readonly state: LessonState;\r\n}): ReactNode {\r\n  type State = Readonly<\r\n    | { type: \"hidden\" }\r\n    | { type: \"visible-in\"; key: LessonKey; elem: Element }\r\n    | { type: \"visible\"; key: LessonKey; elem: Element }\r\n    | { type: \"visible-out\"; key: LessonKey; elem: Element }\r\n  >;\r\n  const [state, setState] = useState<State>({ type: \"hidden\" });\r\n  useEffect(() => {\r\n    const tasks = new Tasks();\r\n    switch (state.type) {\r\n      case \"visible-in\":\r\n        tasks.delayed(300, () => {\r\n          setState({ ...state, type: \"visible\" });\r\n        });\r\n        break;\r\n      case \"visible-out\":\r\n        tasks.delayed(300, () => {\r\n          setState({ type: \"hidden\" });\r\n        });\r\n        break;\r\n    }\r\n    return () => {\r\n      tasks.cancelAll();\r\n    };\r\n  }, [state]);\r\n  return (\r\n    <div id={names.indicators} className={styles.indicators}>\r\n      <GaugeRow summaryStats={summaryStats} names={names} />\r\n      <KeySetRow\r\n        lessonKeys={lessonKeys}\r\n        names={names}\r\n        onKeyHoverIn={(key, elem) => {\r\n          setState({ type: \"visible-in\", key, elem });\r\n        }}\r\n        onKeyHoverOut={() => {\r\n          switch (state.type) {\r\n            case \"visible-in\":\r\n              setState({ type: \"hidden\" });\r\n              break;\r\n            case \"visible\":\r\n              setState({ ...state, type: \"visible-out\" });\r\n              break;\r\n          }\r\n        }}\r\n      />\r\n      <CurrentKeyRow lessonKeys={lessonKeys} names={names} />\r\n      <StreakListRow streakList={streakList} names={names} />\r\n      {dailyGoal.goal > 0 && (\r\n        <DailyGoalRow dailyGoal={dailyGoal} names={names} />\r\n      )}\r\n      {(state.type === \"visible\" || state.type === \"visible-out\") && (\r\n        <Portal>\r\n          <Popup\r\n            anchor={state.elem}\r\n            onMouseEnter={() => {\r\n              setState({ ...state, type: \"visible\" });\r\n            }}\r\n            onMouseLeave={() => {\r\n              setState({ ...state, type: \"visible-out\" });\r\n            }}\r\n          >\r\n            <KeyExtendedDetails\r\n              lessonKey={state.key}\r\n              keyStats={keyStatsMap.get(state.key.letter)}\r\n            />\r\n          </Popup>\r\n        </Portal>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n","import { keyboardProps, useKeyboard } from \"@mkboard/keyboard\";\r\nimport {\r\n  flatten,\r\n  HeatmapLayer,\r\n  KeyLayer,\r\n  PointersLayer,\r\n  TransitionsLayer,\r\n  VirtualKeyboard,\r\n  ZonesLayer,\r\n} from \"@mkboard/keyboard-ui\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport { type CodePoint } from \"@mkboard/unicode\";\r\nimport { withDeferred } from \"@mkboard/widget\";\r\nimport { memo, type ReactNode } from \"react\";\r\nimport { type LastLesson } from \"./state/index.ts\";\r\n\r\nexport const KeyboardPresenter = memo(function KeyboardPresenter({\r\n  focus,\r\n  depressedKeys,\r\n  toggledKeys,\r\n  suffix,\r\n  lastLesson,\r\n}: {\r\n  readonly focus: boolean;\r\n  readonly depressedKeys: readonly string[];\r\n  readonly toggledKeys: readonly string[];\r\n  readonly suffix: readonly CodePoint[];\r\n  readonly lastLesson: LastLesson | null;\r\n}): ReactNode {\r\n  const { settings } = useSettings();\r\n  const keyboard = useKeyboard();\r\n  const colors = settings.get(keyboardProps.colors);\r\n  const pointers = settings.get(keyboardProps.pointers);\r\n  return (\r\n    <VirtualKeyboard keyboard={keyboard} height=\"16rem\">\r\n      <KeyLayer\r\n        depressedKeys={depressedKeys}\r\n        toggledKeys={toggledKeys}\r\n        showColors={colors}\r\n      />\r\n      {focus && pointers && <PointersLayer suffix={suffix} />}\r\n      {focus && lastLesson && (\r\n        <HeatmapLayer histogram={flatten(lastLesson.misses)} modifier=\"m\" />\r\n      )}\r\n      {focus && lastLesson && (\r\n        <HeatmapLayer histogram={flatten(lastLesson.hits)} modifier=\"h\" />\r\n      )}\r\n      {focus && lastLesson && (\r\n        <TransitionsLayer histogram={lastLesson.misses2} modifier=\"m\" />\r\n      )}\r\n      {focus && lastLesson && (\r\n        <TransitionsLayer histogram={lastLesson.hits2} modifier=\"h\" />\r\n      )}\r\n      {focus || <ZonesLayer />}\r\n    </VirtualKeyboard>\r\n  );\r\n});\r\n\r\nexport const DeferredKeyboardPresenter = withDeferred(KeyboardPresenter);\r\n","import { type ReactNode, useLayoutEffect, useRef } from \"react\";\nimport { placeElement } from \"../../floating/index.ts\";\nimport { useScreenSize } from \"../../hooks/index.ts\";\nimport { getBoundingBox } from \"../../utils/geometry.ts\";\nimport { querySelector } from \"../../utils/query.ts\";\nimport * as styles from \"./Spotlight.module.less\";\n\nexport type SpotlightProps = {\n  readonly anchor?: Element | string;\n  readonly margin?: number;\n};\n\nexport function Spotlight({ anchor, margin = 10 }: SpotlightProps): ReactNode {\n  const c1Ref = useRef<HTMLDivElement>(null);\n  const c2Ref = useRef<HTMLDivElement>(null);\n  const c3Ref = useRef<HTMLDivElement>(null);\n  const c4Ref = useRef<HTMLDivElement>(null);\n  const markerRef = useRef<HTMLDivElement>(null);\n  const screenSize = useScreenSize();\n  useLayoutEffect(() => {\n    const c1 = c1Ref.current;\n    const c2 = c2Ref.current;\n    const c3 = c3Ref.current;\n    const c4 = c4Ref.current;\n    const marker = markerRef.current;\n    if (\n      anchor != null &&\n      c1 != null &&\n      c2 != null &&\n      c3 != null &&\n      c4 != null &&\n      marker != null\n    ) {\n      const anchorBox = getBoundingBox(querySelector(anchor));\n      const x = anchorBox.x - margin;\n      const y = anchorBox.y - margin;\n      const w = anchorBox.width + margin * 2;\n      const h = anchorBox.height + margin * 2;\n      placeElement(c1, { left: 0, top: 0, width: x + w, height: y });\n      placeElement(c2, { left: x + w, top: 0, right: 0, height: y + h });\n      placeElement(c3, { left: x, top: y + h, right: 0, bottom: 0 });\n      placeElement(c4, { left: 0, top: y, width: x, bottom: 0 });\n      placeElement(marker, { left: x, top: y, width: w, height: h });\n    }\n  }, [anchor, margin, screenSize]);\n  return (\n    <div className={styles.root}>\n      {anchor && (\n        <>\n          <div ref={c1Ref} className={styles.c1} />\n          <div ref={c2Ref} className={styles.c2} />\n          <div ref={c3Ref} className={styles.c3} />\n          <div ref={c4Ref} className={styles.c4} />\n          <div ref={markerRef} className={styles.marker} />\n        </>\n      )}\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"qqryVccJcf\";\nvar _2 = \"NfAwtdozoO\";\nvar _3 = \"rKiuEDvVQW\";\nvar _4 = \"AELcH3BCAk\";\nvar _5 = \"EPMuxjTDXy\";\nvar _6 = \"xe5RFghS6k\";\nvar _7 = \"hQohLJ5LW9\";\nexport { _1 as \"c0\", _2 as \"c1\", _3 as \"c2\", _4 as \"c3\", _5 as \"c4\", _6 as \"marker\", _7 as \"root\" }\n","import { clsx } from \"clsx\";\nimport * as styles from \"./Meter.module.less\";\n\nexport function Meter({\n  length,\n  slideIndex,\n}: {\n  readonly length: number;\n  readonly slideIndex: number;\n}) {\n  return (\n    <div className={styles.root}>\n      {new Array(length).fill(null).map((slide, index) => (\n        <span\n          key={index}\n          className={clsx(styles.item, slideIndex === index && styles.current)}\n        />\n      ))}\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"XG5aaDSk3v\";\nvar _2 = \"cp__wkrULm\";\nvar _3 = \"U4yXyYISdz\";\nexport { _1 as \"current\", _2 as \"item\", _3 as \"root\" }\n","import { clsx } from \"clsx\";\nimport { type ReactNode } from \"react\";\nimport { type FloatingPosition } from \"../../floating/index.ts\";\nimport * as styles from \"./Slide.module.less\";\n\nexport type SlideProps = {\n  readonly anchor?: string;\n  readonly children?: ReactNode;\n  readonly className?: string;\n  readonly position?: FloatingPosition;\n  readonly size?: \"small\" | \"large\";\n};\n\nexport function Slide({\n  anchor,\n  children,\n  className,\n  position,\n  size,\n  ...props\n}: SlideProps): ReactNode {\n  return (\n    <div\n      {...props}\n      className={clsx(\n        styles.root,\n        size === \"small\" && styles.small,\n        size === \"large\" && styles.large,\n        className,\n      )}\n    >\n      {children}\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"DTZRLP4NcI\";\nvar _2 = \"M1x9_FhXo1\";\nvar _3 = \"f6glhSEf8Z\";\nexport { _1 as \"large\", _2 as \"root\", _3 as \"small\" }\n","// extracted by mini-css-extract-plugin\nvar _1 = \"CiGn_k7Nxl\";\nvar _2 = \"jI7SQ6Hdij\";\nvar _3 = \"NbZfCUoKt2\";\nvar _4 = \"lP2OsRojIf\";\nvar _5 = \"n5KAhmts6T\";\nexport { _1 as \"close\", _2 as \"footer\", _3 as \"next\", _4 as \"prev\", _5 as \"root\" }\n","import { mdiClose } from \"@mdi/js\";\nimport { Children, type ReactElement, type ReactNode, useState } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { useHotkeys } from \"../../hooks/use-hotkeys.ts\";\nimport { LinkButton } from \"../button/LinkButton.tsx\";\nimport { Icon } from \"../icon/Icon.tsx\";\nimport { Backdrop } from \"../popup/Backdrop.tsx\";\nimport { Popup } from \"../popup/Popup.tsx\";\nimport { Spotlight } from \"../popup/Spotlight.tsx\";\nimport { Portal } from \"../portal/Portal.tsx\";\nimport { Meter } from \"./Meter.tsx\";\nimport { Slide, type SlideProps } from \"./Slide.tsx\";\nimport * as styles from \"./Tour.module.less\";\n\nexport type TourProps = {\n  readonly children?: readonly ReactElement<SlideProps>[];\n  readonly onClose?: () => void;\n};\n\nexport function Tour({ children, onClose, ...props }: TourProps): ReactNode {\n  const { formatMessage } = useIntl();\n\n  const [slideIndex, setSlideIndex] = useState(0);\n\n  const slides = Children.toArray(children) as ReactElement<SlideProps>[];\n  const { length } = slides;\n  if (length > 0 && slideIndex > length - 1) {\n    setSlideIndex(length - 1);\n  }\n  if (length > 0 && slideIndex < 0) {\n    setSlideIndex(0);\n  }\n  const currentSlide =\n    slideIndex >= 0 && slideIndex < length ? slides[slideIndex] : <Slide />;\n\n  const selectPrev = () => {\n    if (slideIndex > 0) {\n      setSlideIndex(slideIndex - 1);\n    }\n  };\n\n  const selectNext = () => {\n    if (slideIndex < length - 1) {\n      setSlideIndex(slideIndex + 1);\n    }\n  };\n\n  const close = () => {\n    onClose?.();\n  };\n\n  useHotkeys({\n    [\"ArrowLeft\"]: selectPrev,\n    [\"ArrowUp\"]: selectPrev,\n    [\"PageUp\"]: selectPrev,\n    [\"Backspace\"]: selectPrev,\n    [\"ArrowRight\"]: selectNext,\n    [\"ArrowDown\"]: selectNext,\n    [\"PageDown\"]: selectNext,\n    [\"Space\"]: selectNext,\n    [\"Escape\"]: close,\n  });\n\n  const { anchor, position } = currentSlide.props;\n\n  return (\n    <Portal>\n      <Backdrop>\n        <Spotlight anchor={anchor} />\n\n        <Popup {...props} anchor={anchor} position={position} offset={30}>\n          <div className={styles.root}>\n            {currentSlide}\n\n            <LinkButton className={styles.close} onClick={close}>\n              <Icon shape={mdiClose} />\n            </LinkButton>\n\n            <div className={styles.footer}>\n              <Meter length={slides.length} slideIndex={slideIndex} />\n\n              {slideIndex > 0 && (\n                <LinkButton className={styles.prev} onClick={selectPrev}>\n                  {formatMessage({\n                    id: \"t_Previous\",\n                    defaultMessage: \"Previous\",\n                  })}\n                </LinkButton>\n              )}\n\n              {(slideIndex < slides.length - 1 && (\n                <LinkButton className={styles.next} onClick={selectNext}>\n                  {formatMessage({\n                    id: \"t_Next\",\n                    defaultMessage: \"Next\",\n                  })}\n                </LinkButton>\n              )) || (\n                <LinkButton className={styles.next} onClick={close}>\n                  {formatMessage({\n                    id: \"t_Close\",\n                    defaultMessage: \"Close\",\n                  })}\n                </LinkButton>\n              )}\n            </div>\n          </div>\n        </Popup>\n      </Backdrop>\n    </Portal>\n  );\n}\n","import { KeyDetailsChart } from \"@mkboard/chart\";\r\nimport { LearningRate, LessonKey, lessonProps, Target } from \"@mkboard/lesson\";\r\nimport { Letter } from \"@mkboard/phonetic-model\";\r\nimport { Settings } from \"@mkboard/settings\";\r\nimport { type ReactNode } from \"react\";\r\nimport * as styles from \"./KeyDetailsChartDemo.module.less\";\r\n\r\nexport function KeyDetailsChartDemo(): ReactNode {\r\n  const settings = new Settings().set(lessonProps.targetSpeed, /* 35WPM */ 175);\r\n  const target = new Target(settings);\r\n  const lessonKey = new LessonKey({\r\n    letter: new Letter(/* \"a\" */ 0x0061, 1, \"A\"),\r\n    samples: [],\r\n    timeToType: 380,\r\n    bestTimeToType: 380,\r\n    confidence: target.confidence(380),\r\n    bestConfidence: target.confidence(380),\r\n  });\r\n  const learningRate = LearningRate.example(target);\r\n  return (\r\n    <div className={styles.root}>\r\n      <KeyDetailsChart\r\n        lessonKey={lessonKey}\r\n        learningRate={learningRate}\r\n        width=\"36rem\"\r\n        height=\"15rem\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nvar _1 = \"lhFNV4x3PN\";\nexport { _1 as \"root\" }\n","import { KeyLegendList, names } from \"@mkboard/lesson-ui\";\r\nimport { Slide, Tour } from \"@mkboard/widget\";\r\nimport { memo } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { KeyDetailsChartDemo } from \"./KeyDetailsChartDemo.tsx\";\r\n\r\nexport const PracticeTour = memo(function PracticeTour({\r\n  onClose,\r\n}: {\r\n  readonly onClose?: () => void;\r\n}) {\r\n  return (\r\n    <Tour onClose={onClose}>\r\n      <Slide size=\"large\">\r\n        <FormattedMessage\r\n          id=\"m_tour01\"\r\n          defaultMessage={\r\n            \"<h1>Learn to Type Faster</h1>\" +\r\n            \"<p>This web application will help you to learn <em>touch typing</em> which means typing through muscle memory without using your eyesight to find the keys. It can improve your typing speed and accuracy dramatically. The opposite is <em>hunt and peck typing</em>, a method of typing in which you look at the keyboard instead of the screen, and use only the index fingers.</p>\" +\r\n            \"<p>This is a short tutorial that will explain how this application works.</p>\" +\r\n            \"<p>You can use the left and right arrow keys to navigate through these slides.</p>\"\r\n          }\r\n        />\r\n      </Slide>\r\n      <Slide size=\"large\">\r\n        <FormattedMessage\r\n          id=\"m_tour02\"\r\n          defaultMessage={\r\n            \"<p>Our teaching method is based on these principles:</p>\" +\r\n            \"<p>No boring repetitive exercises. Unlike most other typing tutors, this application does not force you to repeat the same lessons like ‘<em>jjf jjk jjf jjk</em>’ over and over again. This is very annoying and contributes very little to your overall learning.</p>\" +\r\n            \"<p>This application uses a sophisticated computer algorithm to generate typing lessons that match your skill level. These lessons consist of random words generated using a subset of the full alphabet of letters. The size of the subset and individual letter frequency is controlled by the algorithm, which provides you with the best learning experience.</p>\"\r\n          }\r\n        />\r\n      </Slide>\r\n      <Slide size=\"large\">\r\n        <FormattedMessage\r\n          id=\"m_tour03\"\r\n          defaultMessage={\r\n            \"<p>Initially it starts generating words from a small subset of the most frequent letters in the alphabet.</p>\" +\r\n            \"<p>When you are typing these words, the application measures the time-to-type metric for every letter in that subset. This time is used to measure your learning progress. The more familiar you become with a letter, the less time it takes for you to type it.</p>\" +\r\n            \"<p>Once you familiarize yourself with the entire current subset of letters, the algorithm expands it by adding more and more letters to the subset.</p>\"\r\n          }\r\n        />\r\n      </Slide>\r\n      <Slide size=\"large\">\r\n        <FormattedMessage\r\n          id=\"m_tour04\"\r\n          defaultMessage={\r\n            \"<p>When the algorithm includes a new letter to the current subset, the frequency of this letter is artificially increased so that it will be included in every generated word of a lesson.</p>\" +\r\n            \"<p>The algorithm can also artificially rearrange letter frequencies, placing an emphasis on the letters with the worst time-to-type metric.</p>\" +\r\n            \"<p>This means you will always be typing the letters that you are least familiar with.</p>\"\r\n          }\r\n        />\r\n      </Slide>\r\n      <Slide size=\"small\" anchor={`#${names.textInput}`} position=\"block-end\">\r\n        <FormattedMessage\r\n          id=\"m_tour05\"\r\n          defaultMessage=\"<p>This is the text board. It displays the text to type out. The text changes for each new lesson. The text is generated automatically from the current subset of letters. Most of the words are not real, but are generated using the phonetic rules of your language so they sound natural and should be easy to pronounce. Besides being funny, this gives us the flexibility to use more words than actually exist.</p>\"\r\n        />\r\n      </Slide>\r\n      <Slide size=\"small\" anchor={`#${names.keyboard}`} position=\"block-start\">\r\n        <FormattedMessage\r\n          id=\"m_tour06\"\r\n          defaultMessage=\"<p>This is the virtual keyboard. It helps you memorize key positions. Use it to find the keys and try not to look at your physical keyboard. There are small bumps on the <em>F</em> and <em>J</em> keys of your keyboard. Use these to correctly position your index fingers without having to look at the keys. Once your index fingers are in the right position you will be able to locate the remainder of the keys.</p>\"\r\n        />\r\n      </Slide>\r\n      <Slide size=\"small\" anchor={`#${names.speed}`} position=\"block-end\">\r\n        <FormattedMessage\r\n          id=\"m_tour07\"\r\n          defaultMessage={\r\n            \"<p>This is the typing speed indicator and the difference from the average value. Your goal is to increase this metric, meaning higher values are better.</p>\" +\r\n            \"<p>Typing speed is measured in either <em>Words per Minute (WPM)</em> or <em>Characters per Minute (CPM)</em>. The definition of a word is standardized to be five characters, so <em>10WPM</em> is equal to <em>50CPM</em>.</p>\" +\r\n            \"<p>You can switch between the <em>WPM</em> and the <em>CPM</em> display modes on the Settings page.</p>\"\r\n          }\r\n        />\r\n      </Slide>\r\n      <Slide size=\"small\" anchor={`#${names.accuracy}`} position=\"block-end\">\r\n        <FormattedMessage\r\n          id=\"m_tour08\"\r\n          defaultMessage={\r\n            \"<p>This is the accuracy indicator and the difference from the average value. Your goal is to increase this metric, meaning higher values are better.</p>\" +\r\n            \"<p>Accuracy is computed as the percentage of characters typed without errors. Many typos in the same position count as one error.</p>\"\r\n          }\r\n        />\r\n      </Slide>\r\n      <Slide size=\"small\" anchor={`#${names.score}`} position=\"block-end\">\r\n        <FormattedMessage\r\n          id=\"m_tour09\"\r\n          defaultMessage={\r\n            \"<p>This is the typing score indicator in abstract points and the difference from the average value.</p>\" +\r\n            \"<p>The score is calculated from your typing speed, error count, and the current size of the letter set. The formula is designed to reward for typing speed, and punish for error count. You cannot obtain a high score by typing fast while also making many errors.</p>\" +\r\n            \"<p>Users who score the highest points are recorded in the high score table.</p>\"\r\n          }\r\n        />\r\n      </Slide>\r\n      <Slide size=\"small\" anchor={`#${names.keySet}`} position=\"block-end\">\r\n        <FormattedMessage\r\n          id=\"m_tour10\"\r\n          defaultMessage=\"<p>This indicator shows the current subset of letters used to generate the lessons, and your confidence level for every letter in the subset:</p>\"\r\n        />\r\n        <KeyLegendList />\r\n      </Slide>\r\n      <Slide size=\"small\" anchor={`#${names.keySet}`} position=\"block-end\">\r\n        <FormattedMessage\r\n          id=\"m_tour11\"\r\n          defaultMessage=\"<p>This indicator can also be used to predict the remaining number of lessons that are needed to fully unlock a letter, like in the example chart below. Visit it regularly to get more insight on how your learning is going, to see if you are making a progress.</p>\"\r\n        />\r\n        <KeyDetailsChartDemo />\r\n      </Slide>\r\n      <Slide size=\"small\" anchor={`#${names.currentKey}`} position=\"block-end\">\r\n        <FormattedMessage\r\n          id=\"m_tour12\"\r\n          defaultMessage={\r\n            \"<p>This indicator shows details about the letter with increased frequency, which is currently included in every generated word:</p>\" +\r\n            \"<dl>\" +\r\n            \"<dt>Best typing speed</dt>\" +\r\n            \"<dd>Your best typing speed for this individual letter.</dd>\" +\r\n            \"<dt>Confidence level</dt>\" +\r\n            \"<dd>A number in range from zero to one which is computed using your typing speed, and indicates your familiarity with this letter. A letter is considered fully learned when it’s confidence level reaches one.</dd>\" +\r\n            \"<dt>Learning rate</dt>\" +\r\n            \"<dd>How your typing speed is changing with each lesson.</dd>\" +\r\n            \"</dl>\"\r\n          }\r\n        />\r\n      </Slide>\r\n    </Tour>\r\n  );\r\n});\r\n","// extracted by mini-css-extract-plugin\nvar _1 = \"Lp1lw56v1j\";\nvar _2 = \"q14gh_8pl3\";\nvar _3 = \"WVOCThm4I8\";\nvar _4 = \"IqZu7kPCNS\";\nexport { _1 as \"keyboard\", _2 as \"textInput_bare\", _3 as \"textInput_compact\", _4 as \"textInput_normal\" }\n","import { type KeyId } from \"@mkboard/keyboard\";\r\nimport { names } from \"@mkboard/lesson-ui\";\r\nimport { Screen } from \"@mkboard/pages-shared\";\r\nimport { enumProp, Preferences } from \"@mkboard/settings\";\r\nimport { type LineList } from \"@mkboard/textinput\";\r\nimport {\r\n  type IInputEvent,\r\n  type IKeyboardEvent,\r\n  ModifierState,\r\n} from \"@mkboard/textinput-events\";\r\nimport { TextArea } from \"@mkboard/textinput-ui\";\r\nimport { type Focusable, Zoomer } from \"@mkboard/widget\";\r\nimport { createRef, PureComponent, type ReactNode } from \"react\";\r\nimport { Controls } from \"./Controls.tsx\";\r\nimport { Indicators } from \"./Indicators.tsx\";\r\nimport { DeferredKeyboardPresenter } from \"./KeyboardPresenter.tsx\";\r\nimport { PracticeTour } from \"./PracticeTour.tsx\";\r\nimport * as styles from \"./Presenter.module.less\";\r\nimport { type LessonState } from \"./state/index.ts\";\r\n\r\ntype Props = {\r\n  readonly state: LessonState;\r\n  readonly lines: LineList;\r\n  readonly depressedKeys: readonly KeyId[];\r\n  readonly onResetLesson: () => void;\r\n  readonly onSkipLesson: () => void;\r\n  readonly onKeyDown: (ev: IKeyboardEvent) => void;\r\n  readonly onKeyUp: (ev: IKeyboardEvent) => void;\r\n  readonly onInput: (ev: IInputEvent) => void;\r\n};\r\n\r\ntype State = {\r\n  readonly view: View;\r\n  readonly tour: boolean;\r\n  readonly focus: boolean;\r\n};\r\n\r\nenum View {\r\n  Normal = 1,\r\n  Compact = 2,\r\n  Bare = 3,\r\n}\r\n\r\nfunction getNextView(view: View): View {\r\n  switch (view) {\r\n    case View.Normal:\r\n      return View.Compact;\r\n    case View.Compact:\r\n      return View.Bare;\r\n    case View.Bare:\r\n      return View.Normal;\r\n  }\r\n}\r\n\r\nconst propView = enumProp(\"prefs.practice.view\", View, View.Normal);\r\n\r\nexport class Presenter extends PureComponent<Props, State> {\r\n  readonly focusRef = createRef<Focusable>();\r\n\r\n  override state: State = {\r\n    view: Preferences.get(propView),\r\n    tour: false,\r\n    focus: false,\r\n  };\r\n\r\n  override componentDidMount() {\r\n    if (this.props.state.settings.isNew) {\r\n      this.setState({\r\n        view: View.Normal,\r\n        tour: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  override render() {\r\n    const {\r\n      props: { state, lines, depressedKeys },\r\n      state: { view, tour, focus },\r\n      handleResetLesson,\r\n      handleSkipLesson,\r\n      handleKeyDown,\r\n      handleKeyUp,\r\n      handleInput,\r\n      handleFocus,\r\n      handleBlur,\r\n      handleChangeView,\r\n      handleHelp,\r\n      handleTourClose,\r\n    } = this;\r\n    switch (view) {\r\n      case View.Normal:\r\n        return (\r\n          <NormalLayout\r\n            state={state}\r\n            focus={tour || focus}\r\n            depressedKeys={depressedKeys}\r\n            toggledKeys={ModifierState.modifiers}\r\n            controls={\r\n              <Controls\r\n                onChangeView={handleChangeView}\r\n                onResetLesson={handleResetLesson}\r\n                onSkipLesson={handleSkipLesson}\r\n                onHelp={handleHelp}\r\n              />\r\n            }\r\n            textInput={\r\n              <Zoomer id=\"TextArea/Normal\">\r\n                <TextArea\r\n                  focusRef={this.focusRef}\r\n                  settings={state.textDisplaySettings}\r\n                  lines={lines}\r\n                  size=\"X0\"\r\n                  demo={tour}\r\n                  onFocus={handleFocus}\r\n                  onBlur={handleBlur}\r\n                  onKeyDown={handleKeyDown}\r\n                  onKeyUp={handleKeyUp}\r\n                  onInput={handleInput}\r\n                />\r\n              </Zoomer>\r\n            }\r\n            tour={tour && <PracticeTour onClose={handleTourClose} />}\r\n          />\r\n        );\r\n      case View.Compact:\r\n        return (\r\n          <CompactLayout\r\n            state={state}\r\n            focus={tour || focus}\r\n            depressedKeys={depressedKeys}\r\n            controls={\r\n              <Controls\r\n                onChangeView={handleChangeView}\r\n                onResetLesson={handleResetLesson}\r\n                onSkipLesson={handleSkipLesson}\r\n                onHelp={handleHelp}\r\n              />\r\n            }\r\n            textInput={\r\n              <Zoomer id=\"TextArea/Compact\">\r\n                <TextArea\r\n                  focusRef={this.focusRef}\r\n                  settings={state.textDisplaySettings}\r\n                  lines={lines}\r\n                  size=\"X1\"\r\n                  demo={tour}\r\n                  onFocus={handleFocus}\r\n                  onBlur={handleBlur}\r\n                  onKeyDown={handleKeyDown}\r\n                  onKeyUp={handleKeyUp}\r\n                  onInput={handleInput}\r\n                />\r\n              </Zoomer>\r\n            }\r\n          />\r\n        );\r\n      case View.Bare:\r\n        return (\r\n          <BareLayout\r\n            state={state}\r\n            focus={tour || focus}\r\n            depressedKeys={depressedKeys}\r\n            controls={\r\n              <Controls\r\n                onChangeView={handleChangeView}\r\n                onResetLesson={handleResetLesson}\r\n                onSkipLesson={handleSkipLesson}\r\n                onHelp={handleHelp}\r\n              />\r\n            }\r\n            textInput={\r\n              <Zoomer id=\"TextArea/Bare\">\r\n                <TextArea\r\n                  focusRef={this.focusRef}\r\n                  settings={state.textDisplaySettings}\r\n                  lines={lines}\r\n                  size=\"X2\"\r\n                  demo={tour}\r\n                  onFocus={handleFocus}\r\n                  onBlur={handleBlur}\r\n                  onKeyDown={handleKeyDown}\r\n                  onKeyUp={handleKeyUp}\r\n                  onInput={handleInput}\r\n                />\r\n              </Zoomer>\r\n            }\r\n          />\r\n        );\r\n    }\r\n  }\r\n\r\n  handleResetLesson = () => {\r\n    this.props.onResetLesson();\r\n    this.focusRef.current?.focus();\r\n  };\r\n\r\n  handleSkipLesson = () => {\r\n    this.props.onSkipLesson();\r\n    this.focusRef.current?.focus();\r\n  };\r\n\r\n  handleKeyDown = (ev: IKeyboardEvent) => {\r\n    if (this.state.focus) {\r\n      this.props.onKeyDown(ev);\r\n    }\r\n  };\r\n\r\n  handleKeyUp = (ev: IKeyboardEvent) => {\r\n    if (this.state.focus) {\r\n      this.props.onKeyUp(ev);\r\n    }\r\n  };\r\n\r\n  handleInput = (ev: IInputEvent) => {\r\n    if (this.state.focus) {\r\n      this.props.onInput(ev);\r\n    }\r\n  };\r\n\r\n  handleFocus = () => {\r\n    this.setState(\r\n      {\r\n        focus: true,\r\n      },\r\n      () => {\r\n        this.props.onResetLesson();\r\n      },\r\n    );\r\n  };\r\n\r\n  handleBlur = () => {\r\n    this.setState(\r\n      {\r\n        focus: false,\r\n      },\r\n      () => {\r\n        this.props.onResetLesson();\r\n      },\r\n    );\r\n  };\r\n\r\n  handleChangeView = () => {\r\n    this.setState(\r\n      ({ view }) => {\r\n        const nextView = getNextView(view);\r\n        Preferences.set(propView, nextView);\r\n        return { view: nextView };\r\n      },\r\n      () => {\r\n        this.props.onResetLesson();\r\n        this.focusRef.current?.focus();\r\n      },\r\n    );\r\n  };\r\n\r\n  handleHelp = () => {\r\n    this.setState(\r\n      {\r\n        view: View.Normal,\r\n        tour: true,\r\n      },\r\n      () => {\r\n        this.props.onResetLesson();\r\n        this.focusRef.current?.blur();\r\n      },\r\n    );\r\n  };\r\n\r\n  handleTourClose = () => {\r\n    this.setState(\r\n      {\r\n        view: View.Normal,\r\n        tour: false,\r\n      },\r\n      () => {\r\n        this.props.onResetLesson();\r\n        this.focusRef.current?.focus();\r\n      },\r\n    );\r\n  };\r\n}\r\n\r\nfunction NormalLayout({\r\n  state,\r\n  focus,\r\n  depressedKeys,\r\n  toggledKeys,\r\n  controls,\r\n  textInput,\r\n  tour,\r\n}: {\r\n  readonly state: LessonState;\r\n  readonly focus: boolean;\r\n  readonly depressedKeys: readonly string[];\r\n  readonly toggledKeys: readonly string[];\r\n  readonly controls: ReactNode;\r\n  readonly textInput: ReactNode;\r\n  readonly tour: ReactNode;\r\n}) {\r\n  return (\r\n    <Screen>\r\n      <Indicators state={state} />\r\n      <div id={names.textInput} className={styles.textInput_normal}>\r\n        {textInput}\r\n      </div>\r\n      <div id={names.keyboard} className={styles.keyboard}>\r\n        <Zoomer id=\"Keyboard/Normal\">\r\n          <DeferredKeyboardPresenter\r\n            focus={focus}\r\n            depressedKeys={depressedKeys}\r\n            toggledKeys={toggledKeys}\r\n            suffix={state.suffix}\r\n            lastLesson={state.lastLesson}\r\n          />\r\n        </Zoomer>\r\n      </div>\r\n      {controls}\r\n      {tour}\r\n    </Screen>\r\n  );\r\n}\r\n\r\nfunction CompactLayout({\r\n  state,\r\n  controls,\r\n  textInput,\r\n}: {\r\n  readonly state: LessonState;\r\n  readonly focus: boolean;\r\n  readonly depressedKeys: readonly string[];\r\n  readonly controls: ReactNode;\r\n  readonly textInput: ReactNode;\r\n}) {\r\n  return (\r\n    <Screen>\r\n      <Indicators state={state} />\r\n      <div id={names.textInput} className={styles.textInput_compact}>\r\n        {textInput}\r\n      </div>\r\n      {controls}\r\n    </Screen>\r\n  );\r\n}\r\n\r\nfunction BareLayout({\r\n  state,\r\n  controls,\r\n  textInput,\r\n}: {\r\n  readonly state: LessonState;\r\n  readonly focus: boolean;\r\n  readonly depressedKeys: readonly string[];\r\n  readonly controls: ReactNode;\r\n  readonly textInput: ReactNode;\r\n}) {\r\n  return (\r\n    <Screen>\r\n      <div id={names.textInput} className={styles.textInput_bare}>\r\n        {textInput}\r\n      </div>\r\n      {controls}\r\n    </Screen>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nvar _1 = \"gAmoPRHk8O tFDQUVK9in\";\nvar _2 = \"qpMswnk7QD\";\nvar _3 = \"ixYfqX9Pld\";\nexport { _1 as \"award\", _2 as \"icon\", _3 as \"message\" }\n","import { type ReactNode } from \"react\";\nimport { type MouseProps } from \"../types.ts\";\nimport * as styles from \"./Award.module.less\";\nimport { toastProps, useToast } from \"./context.tsx\";\n\nexport function Award({\n  icon,\n  children,\n  ...props\n}: {\n  readonly icon: ReactNode;\n  readonly children: ReactNode;\n} & MouseProps): ReactNode {\n  const toast = useToast();\n  return (\n    <div {...props} className={styles.award} {...toastProps(toast)}>\n      <div className={styles.icon}>{icon}</div>\n      <div className={styles.message}>{children}</div>\n    </div>\n  );\n}\n","import { type ClassName } from \"@mkboard/widget\";\r\nimport { mdiAlarmCheck, mdiTrophy } from \"@mdi/js\";\r\nimport { clsx } from \"clsx\";\r\nimport * as styles from \"./event-icons.module.less\";\r\n\r\nexport function TrophyIcon() {\r\n  return <Icon shape={mdiTrophy} className={styles.trophy} />;\r\n}\r\n\r\nexport function DailyGoalIcon() {\r\n  return <Icon shape={mdiAlarmCheck} />;\r\n}\r\n\r\nfunction Icon({\r\n  shape,\r\n  className,\r\n}: {\r\n  readonly shape: string;\r\n  readonly className?: ClassName;\r\n}) {\r\n  return (\r\n    <svg className={clsx(styles.icon, className)} viewBox=\"0 0 24 24\">\r\n      <path d={shape} />\r\n    </svg>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nvar _1 = \"dYKzMOycbs\";\nvar _2 = \"imNeEdQkia\";\nexport { _1 as \"icon\", _2 as \"trophy\" }\n","import { Key } from \"@mkboard/lesson-ui\";\r\nimport { Award, toast } from \"@mkboard/widget\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { DailyGoalIcon, TrophyIcon } from \"./event-icons.tsx\";\r\nimport { type LessonEvent } from \"./event-types.ts\";\r\n\r\nexport function EventAlert({ event }: { readonly event: LessonEvent }) {\r\n  switch (event.type) {\r\n    case \"new-letter\":\r\n      return (\r\n        <Award icon={<Key lessonKey={event.lessonKey} size=\"announcement\" />}>\r\n          <FormattedMessage\r\n            id=\"t_ev_New_letter_unlocked\"\r\n            defaultMessage=\"New letter unlocked!\"\r\n          />\r\n        </Award>\r\n      );\r\n    case \"top-speed\":\r\n      return (\r\n        <Award icon={<TrophyIcon />}>\r\n          <FormattedMessage id=\"t_ev_Top_speed\" defaultMessage=\"Top speed!\" />\r\n        </Award>\r\n      );\r\n    case \"top-score\":\r\n      return (\r\n        <Award icon={<TrophyIcon />}>\r\n          <FormattedMessage id=\"t_ev_Top_score\" defaultMessage=\"Top score!\" />\r\n        </Award>\r\n      );\r\n    case \"daily-goal\":\r\n      return (\r\n        <Award icon={<DailyGoalIcon />}>\r\n          <FormattedMessage\r\n            id=\"t_ev_Daily_goal_reached\"\r\n            defaultMessage=\"Daily goal reached!\"\r\n          />\r\n        </Award>\r\n      );\r\n  }\r\n}\r\n\r\nexport function displayEvent(event: LessonEvent): void {\r\n  toast(<EventAlert event={event} />, {\r\n    autoClose: 3000,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n  });\r\n}\r\n","import { keyboardProps, type KeyId } from \"@mkboard/keyboard\";\r\nimport {\r\n  type DailyGoal,\r\n  Lesson,\r\n  type LessonKeys,\r\n  lessonProps,\r\n} from \"@mkboard/lesson\";\r\nimport {\r\n  type KeyStatsMap,\r\n  Result,\r\n  type StreakList,\r\n  type SummaryStats,\r\n} from \"@mkboard/result\";\r\nimport { type Settings } from \"@mkboard/settings\";\r\nimport {\r\n  type Feedback,\r\n  type LineList,\r\n  makeStats,\r\n  type StyledText,\r\n  type TextDisplaySettings,\r\n  TextInput,\r\n  type TextInputSettings,\r\n  toTextDisplaySettings,\r\n  toTextInputSettings,\r\n} from \"@mkboard/textinput\";\r\nimport { type IInputEvent } from \"@mkboard/textinput-events\";\r\nimport { type CodePoint } from \"@mkboard/unicode\";\r\nimport { type LastLesson } from \"./last-lesson.ts\";\r\nimport { type Progress } from \"./progress.ts\";\r\n\r\nexport class LessonState {\r\n  readonly #onResult: (result: Result, textInput: TextInput) => void;\r\n  readonly settings: Settings;\r\n  readonly lesson: Lesson;\r\n  readonly textInputSettings: TextInputSettings;\r\n  readonly textDisplaySettings: TextDisplaySettings;\r\n  readonly keyStatsMap: KeyStatsMap;\r\n  readonly summaryStats: SummaryStats;\r\n  readonly streakList: StreakList;\r\n  readonly dailyGoal: DailyGoal;\r\n  readonly lessonKeys: LessonKeys;\r\n\r\n  lastLesson: LastLesson | null = null;\r\n\r\n  textInput!: TextInput; // Mutable.\r\n  lines!: LineList; // Mutable.\r\n  suffix!: readonly CodePoint[]; // Mutable.\r\n  depressedKeys: readonly KeyId[] = []; // Mutable.\r\n\r\n  constructor(\r\n    progress: Progress,\r\n    onResult: (result: Result, textInput: TextInput) => void,\r\n  ) {\r\n    this.#onResult = onResult;\r\n    this.settings = progress.settings;\r\n    this.lesson = progress.lesson;\r\n    this.textInputSettings = toTextInputSettings(this.settings);\r\n    this.textDisplaySettings = toTextDisplaySettings(this.settings);\r\n    this.keyStatsMap = progress.keyStatsMap.copy();\r\n    this.summaryStats = progress.summaryStats.copy();\r\n    this.streakList = progress.streakList.copy();\r\n    this.dailyGoal = progress.dailyGoal.copy();\r\n    this.lessonKeys = this.lesson.update(this.keyStatsMap);\r\n    this.#reset(this.lesson.generate(this.lessonKeys, Lesson.rng));\r\n  }\r\n\r\n  resetLesson() {\r\n    this.#reset(this.textInput.text);\r\n  }\r\n\r\n  skipLesson() {\r\n    this.#reset(this.lesson.generate(this.lessonKeys, Lesson.rng));\r\n  }\r\n\r\n  onInput(event: IInputEvent): Feedback {\r\n    const feedback = this.textInput.onInput(event);\r\n    this.lines = this.textInput.lines;\r\n    this.suffix = this.textInput.remaining.map(({ codePoint }) => codePoint);\r\n    if (this.textInput.completed) {\r\n      this.#onResult(this.#makeResult(), this.textInput);\r\n    }\r\n    return feedback;\r\n  }\r\n\r\n  #reset(fragment: StyledText) {\r\n    this.textInput = new TextInput(fragment, this.textInputSettings);\r\n    this.lines = this.textInput.lines;\r\n    this.suffix = this.textInput.remaining.map(({ codePoint }) => codePoint);\r\n  }\r\n\r\n  #makeResult(timeStamp = Date.now()) {\r\n    return Result.fromStats(\r\n      this.settings.get(keyboardProps.layout),\r\n      this.settings.get(lessonProps.type).textType,\r\n      timeStamp,\r\n      makeStats(this.textInput.steps),\r\n    );\r\n  }\r\n}\r\n","import { type MutableDailyGoal } from \"@mkboard/lesson\";\r\nimport { type Result } from \"@mkboard/result\";\r\nimport {\r\n  type LessonEventListener,\r\n  type LessonEventSource,\r\n} from \"./event-types.ts\";\r\n\r\nexport class DailyGoalEvents implements LessonEventSource {\r\n  readonly #dailyGoal: MutableDailyGoal;\r\n  #lastValue: number;\r\n\r\n  constructor(dailyGoal: MutableDailyGoal) {\r\n    this.#dailyGoal = dailyGoal;\r\n    this.#lastValue = 0;\r\n  }\r\n\r\n  append(result: Result, listener: LessonEventListener): void {\r\n    if (this.#lastValue < 1 && this.#dailyGoal.value >= 1) {\r\n      listener({\r\n        type: \"daily-goal\",\r\n      });\r\n    }\r\n    this.#lastValue = this.#dailyGoal.value;\r\n  }\r\n}\r\n","import { type Lesson } from \"@mkboard/lesson\";\r\nimport { type Letter } from \"@mkboard/phonetic-model\";\r\nimport { type KeyStatsMap, type Result } from \"@mkboard/result\";\r\nimport {\r\n  type LessonEventListener,\r\n  type LessonEventSource,\r\n} from \"./event-types.ts\";\r\n\r\nexport class LetterEvents implements LessonEventSource {\r\n  readonly #lesson: Lesson;\r\n  readonly #keyStatsMap: KeyStatsMap;\r\n  readonly #included: Set<Letter>;\r\n\r\n  constructor(lesson: Lesson, keyStatsMap: KeyStatsMap) {\r\n    this.#lesson = lesson;\r\n    this.#keyStatsMap = keyStatsMap;\r\n    this.#included = new Set();\r\n    const lessonKeys = this.#lesson.update(this.#keyStatsMap);\r\n    for (const lessonKey of lessonKeys.findIncludedKeys()) {\r\n      if (!this.#included.has(lessonKey.letter)) {\r\n        this.#included.add(lessonKey.letter);\r\n      }\r\n    }\r\n  }\r\n\r\n  append(result: Result, listener: LessonEventListener): void {\r\n    const lessonKeys = this.#lesson.update(this.#keyStatsMap);\r\n    for (const lessonKey of lessonKeys.findIncludedKeys()) {\r\n      if (!this.#included.has(lessonKey.letter)) {\r\n        this.#included.add(lessonKey.letter);\r\n        listener({ type: \"new-letter\", lessonKey });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { type Result } from \"@mkboard/result\";\r\nimport {\r\n  type LessonEventListener,\r\n  type LessonEventSource,\r\n} from \"./event-types.ts\";\r\n\r\nexport class TopScoreEvents implements LessonEventSource {\r\n  #resultCount = 0;\r\n  #topScore = 0;\r\n\r\n  append(result: Result, listener: LessonEventListener): void {\r\n    this.#resultCount += 1;\r\n    const { score } = result;\r\n    if (score > this.#topScore) {\r\n      if (this.#resultCount >= 3) {\r\n        listener({\r\n          type: \"top-score\",\r\n          score,\r\n          previous: this.#topScore,\r\n        });\r\n      }\r\n      this.#topScore = score;\r\n    }\r\n  }\r\n}\r\n","import { type Result } from \"@mkboard/result\";\r\nimport {\r\n  type LessonEventListener,\r\n  type LessonEventSource,\r\n} from \"./event-types.ts\";\r\n\r\nexport class TopSpeedEvents implements LessonEventSource {\r\n  #resultCount = 0;\r\n  #topSpeed = 0;\r\n\r\n  append(result: Result, listener: LessonEventListener): void {\r\n    this.#resultCount += 1;\r\n    const { speed } = result;\r\n    if (speed > this.#topSpeed) {\r\n      if (this.#resultCount >= 3) {\r\n        listener({\r\n          type: \"top-speed\",\r\n          speed,\r\n          previous: this.#topSpeed,\r\n        });\r\n      }\r\n      this.#topSpeed = speed;\r\n    }\r\n  }\r\n}\r\n","import { type LoadingEventListener } from \"@mkboard/lang\";\r\nimport { type Lesson, MutableDailyGoal } from \"@mkboard/lesson\";\r\nimport {\r\n  MutableKeyStatsMap,\r\n  MutableStreakList,\r\n  MutableSummaryStats,\r\n  type Result,\r\n} from \"@mkboard/result\";\r\nimport { type Settings } from \"@mkboard/settings\";\r\nimport { DailyGoalEvents } from \"./event-source-daily-goal.ts\";\r\nimport { LetterEvents } from \"./event-source-letter.ts\";\r\nimport { TopScoreEvents } from \"./event-source-top-score.ts\";\r\nimport { TopSpeedEvents } from \"./event-source-top-speed.ts\";\r\nimport {\r\n  type LessonEventListener,\r\n  type LessonEventSource,\r\n} from \"./event-types.ts\";\r\n\r\nexport class Progress {\r\n  readonly #settings: Settings;\r\n  readonly #lesson: Lesson;\r\n  readonly #results: Result[];\r\n  readonly #keyStatsMap: MutableKeyStatsMap;\r\n  readonly #summaryStats: MutableSummaryStats;\r\n  readonly #streakList: MutableStreakList;\r\n  readonly #dailyGoal: MutableDailyGoal;\r\n  readonly #events: LessonEventSource;\r\n\r\n  constructor(settings: Settings, lesson: Lesson) {\r\n    this.#settings = settings;\r\n    this.#lesson = lesson;\r\n    this.#results = [];\r\n    this.#keyStatsMap = new MutableKeyStatsMap(this.#lesson.letters);\r\n    this.#summaryStats = new MutableSummaryStats();\r\n    this.#streakList = new MutableStreakList();\r\n    this.#dailyGoal = new MutableDailyGoal(this.#settings);\r\n\r\n    const letter = new LetterEvents(this.#lesson, this.#keyStatsMap);\r\n    const topSpeed = new TopSpeedEvents();\r\n    const topScore = new TopScoreEvents();\r\n    const dailyGoal = new DailyGoalEvents(this.#dailyGoal);\r\n    this.#events = new (class implements LessonEventSource {\r\n      append(result: Result, listener: LessonEventListener): void {\r\n        letter.append(result, listener);\r\n        topSpeed.append(result, listener);\r\n        topScore.append(result, listener);\r\n        dailyGoal.append(result, listener);\r\n      }\r\n    })();\r\n  }\r\n\r\n  async *seedAsync(\r\n    results: readonly Result[],\r\n    listener: LoadingEventListener | null = null,\r\n  ) {\r\n    // We assume that the given array of results is append-only,\r\n    // so finding new results is a matter of comparing the array lengths.\r\n    // This function appends all the remaining results in chunks.\r\n    // The returned async iterator must be called repeatedly\r\n    // to complete the seeding.\r\n    while (true) {\r\n      const { length } = this.#results;\r\n      if (length < results.length) {\r\n        for (const result of results.slice(length, length + 100)) {\r\n          this.append(result);\r\n        }\r\n        if (listener != null) {\r\n          listener({ total: results.length, current: length });\r\n        }\r\n        yield null; // Yield to the browser event loop, unfreeze the UI.\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  seed(results: readonly Result[]) {\r\n    // We assume that the given array of results is append-only,\r\n    // so finding new results is a matter of comparing the array lengths.\r\n    // This function appends all the remaining results.\r\n    const { length } = this.#results;\r\n    if (length < results.length) {\r\n      for (const result of results.slice(length)) {\r\n        this.append(result);\r\n      }\r\n    }\r\n  }\r\n\r\n  append(result: Result, listener: LessonEventListener = () => {}) {\r\n    this.#results.push(result);\r\n    this.#keyStatsMap.append(result);\r\n    this.#summaryStats.append(result);\r\n    this.#streakList.append(result);\r\n    this.#dailyGoal.append(result);\r\n    this.#events.append(result, listener);\r\n  }\r\n\r\n  get settings() {\r\n    return this.#settings;\r\n  }\r\n\r\n  get lesson() {\r\n    return this.#lesson;\r\n  }\r\n\r\n  get keyStatsMap() {\r\n    return this.#keyStatsMap;\r\n  }\r\n\r\n  get summaryStats() {\r\n    return this.#summaryStats;\r\n  }\r\n\r\n  get streakList() {\r\n    return this.#streakList;\r\n  }\r\n\r\n  get dailyGoal() {\r\n    return this.#dailyGoal;\r\n  }\r\n}\r\n","import { type KeyId, useKeyboard } from \"@mkboard/keyboard\";\r\nimport { type Result } from \"@mkboard/result\";\r\nimport { type LineList } from \"@mkboard/textinput\";\r\nimport { addKey, deleteKey, emulateLayout } from \"@mkboard/textinput-events\";\r\nimport { makeSoundPlayer } from \"@mkboard/textinput-sounds\";\r\nimport {\r\n  useDocumentEvent,\r\n  useHotkeys,\r\n  useTimeout,\r\n  useWindowEvent,\r\n} from \"@mkboard/widget\";\r\nimport { memo, type ReactNode, useMemo, useRef, useState } from \"react\";\r\nimport { Presenter } from \"./Presenter.tsx\";\r\nimport {\r\n  type LastLesson,\r\n  LessonState,\r\n  makeLastLesson,\r\n  type Progress,\r\n} from \"./state/index.ts\";\r\n\r\nexport const Controller = memo(function Controller({\r\n  progress,\r\n  onResult,\r\n}: {\r\n  readonly progress: Progress;\r\n  readonly onResult: (result: Result) => void;\r\n}): ReactNode {\r\n  const {\r\n    state,\r\n    handleResetLesson,\r\n    handleSkipLesson,\r\n    handleKeyDown,\r\n    handleKeyUp,\r\n    handleInput,\r\n  } = useLessonState(progress, onResult);\r\n  useHotkeys({\r\n    [\"Ctrl+ArrowLeft\"]: handleResetLesson,\r\n    [\"Ctrl+ArrowRight\"]: handleSkipLesson,\r\n    [\"Escape\"]: handleResetLesson,\r\n  });\r\n  useWindowEvent(\"focus\", handleResetLesson);\r\n  useWindowEvent(\"blur\", handleResetLesson);\r\n  useDocumentEvent(\"visibilitychange\", handleResetLesson);\r\n  return (\r\n    <Presenter\r\n      state={state}\r\n      lines={state.lines}\r\n      depressedKeys={state.depressedKeys}\r\n      onResetLesson={handleResetLesson}\r\n      onSkipLesson={handleSkipLesson}\r\n      onKeyDown={handleKeyDown}\r\n      onKeyUp={handleKeyUp}\r\n      onInput={handleInput}\r\n    />\r\n  );\r\n});\r\n\r\nfunction useLessonState(\r\n  progress: Progress,\r\n  onResult: (result: Result) => void,\r\n) {\r\n  const keyboard = useKeyboard();\r\n  const timeout = useTimeout();\r\n  const [key, setKey] = useState(0); // Creates new LessonState instances.\r\n  const [, setLines] = useState<LineList>({ text: \"\", lines: [] }); // Forces UI update.\r\n  const [, setDepressedKeys] = useState<readonly KeyId[]>([]); // Forces UI update.\r\n  const lastLessonRef = useRef<LastLesson | null>(null);\r\n\r\n  const onResultRef = useRef(onResult);\r\n  onResultRef.current = onResult;\r\n\r\n  return useMemo(() => {\r\n    // New lesson.\r\n    const state = new LessonState(progress, (result, textInput) => {\r\n      setKey(key + 1);\r\n      lastLessonRef.current = makeLastLesson(result, textInput.steps);\r\n      onResultRef.current(result);\r\n    });\r\n    state.lastLesson = lastLessonRef.current;\r\n    setLines(state.lines);\r\n    setDepressedKeys(state.depressedKeys);\r\n    const handleResetLesson = () => {\r\n      state.resetLesson();\r\n      setLines(state.lines);\r\n      setDepressedKeys((state.depressedKeys = []));\r\n      timeout.cancel();\r\n    };\r\n    const handleSkipLesson = () => {\r\n      state.skipLesson();\r\n      setLines(state.lines);\r\n      setDepressedKeys((state.depressedKeys = []));\r\n      timeout.cancel();\r\n    };\r\n    const playSounds = makeSoundPlayer(state.settings);\r\n    const { onKeyDown, onKeyUp, onInput } = emulateLayout(\r\n      state.settings,\r\n      keyboard,\r\n      {\r\n        onKeyDown: (event) => {\r\n          setDepressedKeys(\r\n            (state.depressedKeys = addKey(state.depressedKeys, event.code)),\r\n          );\r\n        },\r\n        onKeyUp: (event) => {\r\n          setDepressedKeys(\r\n            (state.depressedKeys = deleteKey(state.depressedKeys, event.code)),\r\n          );\r\n        },\r\n        onInput: (event) => {\r\n          state.lastLesson = null;\r\n          const feedback = state.onInput(event);\r\n          setLines(state.lines);\r\n          playSounds(feedback);\r\n          timeout.schedule(handleResetLesson, 10000);\r\n        },\r\n      },\r\n    );\r\n    return {\r\n      state,\r\n      handleResetLesson,\r\n      handleSkipLesson,\r\n      handleKeyDown: onKeyDown,\r\n      handleKeyUp: onKeyUp,\r\n      handleInput: onInput,\r\n    };\r\n  }, [progress, keyboard, timeout, key]);\r\n}\r\n","import { Ngram2 } from \"@mkboard/keyboard\";\r\nimport { Histogram, KeySet } from \"@mkboard/math\";\r\nimport { type Result } from \"@mkboard/result\";\r\nimport { type Step } from \"@mkboard/textinput\";\r\nimport { type HasCodePoint } from \"@mkboard/unicode\";\r\n\r\nexport type LastLesson = {\r\n  readonly result: Result;\r\n  readonly hits: Histogram<HasCodePoint>;\r\n  readonly misses: Histogram<HasCodePoint>;\r\n  readonly hits2: Ngram2;\r\n  readonly misses2: Ngram2;\r\n};\r\n\r\nexport function makeLastLesson(\r\n  result: Result,\r\n  steps: readonly Step[],\r\n): LastLesson {\r\n  const keySet = new KeySet<HasCodePoint>([]);\r\n  const hits = new Histogram(keySet);\r\n  const misses = new Histogram(keySet);\r\n  for (const { codePoint, hitCount, missCount } of result.histogram) {\r\n    hits.set({ codePoint }, hitCount);\r\n    misses.set({ codePoint }, missCount);\r\n  }\r\n  const alphabet = [...new Set(steps.map(({ codePoint }) => codePoint))].sort(\r\n    (a, b) => a - b,\r\n  );\r\n  const hits2 = new Ngram2(alphabet);\r\n  const misses2 = new Ngram2(alphabet);\r\n  for (let i = 0; i < steps.length - 1; i++) {\r\n    hits2.add(steps[i].codePoint, steps[i + 1].codePoint, 1);\r\n  }\r\n  return { result, hits, misses, hits2, misses2 };\r\n}\r\n","import { catchError } from \"@mkboard/debug\";\r\nimport { KeyboardProvider } from \"@mkboard/keyboard\";\r\nimport { schedule } from \"@mkboard/lang\";\r\nimport { type Lesson } from \"@mkboard/lesson\";\r\nimport { LessonLoader } from \"@mkboard/lesson-loader\";\r\nimport { LoadingProgress } from \"@mkboard/pages-shared\";\r\nimport { type Result, useResults } from \"@mkboard/result\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport { Controller } from \"./Controller.tsx\";\r\nimport { displayEvent, Progress } from \"./state/index.ts\";\r\n\r\nexport function PracticeScreen() {\r\n  return (\r\n    <KeyboardProvider>\r\n      <LessonLoader>\r\n        {(lesson) => <ProgressUpdater lesson={lesson} />}\r\n      </LessonLoader>\r\n    </KeyboardProvider>\r\n  );\r\n}\r\n\r\nfunction ProgressUpdater({ lesson }: { readonly lesson: Lesson }) {\r\n  const { results, appendResults } = useResults();\r\n  const [progress, { total, current }] = useProgress(lesson, results);\r\n  if (progress == null) {\r\n    return <LoadingProgress total={total} current={current} />;\r\n  } else {\r\n    return (\r\n      <Controller\r\n        progress={progress}\r\n        onResult={(result) => {\r\n          if (result.validate()) {\r\n            progress.append(result, displayEvent);\r\n            appendResults([result]);\r\n          }\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nfunction useProgress(lesson: Lesson, results: readonly Result[]) {\r\n  const { settings } = useSettings();\r\n  const [done, setDone] = useState(false);\r\n  const [loading, setLoading] = useState({ total: 0, current: 0 });\r\n  const progress = useMemo(\r\n    () => new Progress(settings, lesson),\r\n    [settings, lesson],\r\n  );\r\n  useEffect(() => {\r\n    // Populating the progress object can take a long time, so we do this\r\n    // asynchronously, interleaved with the browser event loop to avoid\r\n    // freezing of the UI.\r\n    const controller = new AbortController();\r\n    const { signal } = controller;\r\n    schedule(progress.seedAsync(lesson.filter(results), setLoading), { signal })\r\n      .then(() => setDone(true))\r\n      .catch(catchError);\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, [progress, lesson, results]);\r\n  return [done ? progress : null, loading] as const;\r\n}\r\n","import { booleanProp, Preferences } from \"@mkboard/settings\";\r\nimport { Button, Field, FieldList, useExplainerState } from \"@mkboard/widget\";\r\nimport { type ReactNode, useLayoutEffect } from \"react\";\r\nimport { useIntl } from \"react-intl\";\r\n\r\nconst propExplainSettings = booleanProp(\"prefs.settings.explain\", true);\r\n\r\nexport function ExplainSettings(): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { explainersVisible, toggleExplainers } = useExplainerState();\r\n  useLayoutEffect(() => {\r\n    toggleExplainers(Preferences.get(propExplainSettings));\r\n  });\r\n  return (\r\n    <FieldList>\r\n      <Field.Filler />\r\n      <Field>\r\n        <Button\r\n          onClick={() => {\r\n            toggleExplainers(!explainersVisible);\r\n            Preferences.set(propExplainSettings, !explainersVisible);\r\n          }}\r\n        >\r\n          {explainersVisible\r\n            ? `\\u25BC ${formatMessage({\r\n                id: \"t_Hide_explanations\",\r\n                defaultMessage: \"Hide explanations\",\r\n              })}`\r\n            : `\\u25BA ${formatMessage({\r\n                id: \"t_Explain_settings\",\r\n                defaultMessage: \"Explain settings\",\r\n              })}`}\r\n        </Button>\r\n      </Field>\r\n    </FieldList>\r\n  );\r\n}\r\n","import { useCollator } from \"@mkboard/intl\";\r\nimport {\r\n  Emulation,\r\n  Geometry,\r\n  KeyboardOptions,\r\n  keyboardProps,\r\n  Language,\r\n  Layout,\r\n  useFormattedNames,\r\n  useKeyboard,\r\n  ZoneMod,\r\n} from \"@mkboard/keyboard\";\r\nimport { KeyLayer, PointersLayer, VirtualKeyboard } from \"@mkboard/keyboard-ui\";\r\nimport { Tasks } from \"@mkboard/lang\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport { ModifierState, useDepressedKeys } from \"@mkboard/textinput-events\";\r\nimport { type CodePoint } from \"@mkboard/unicode\";\r\nimport {\r\n  CheckBox,\r\n  Description,\r\n  Explainer,\r\n  Field,\r\n  FieldList,\r\n  FieldSet,\r\n  OptionList,\r\n} from \"@mkboard/widget\";\r\nimport { memo, type ReactNode, useEffect, useState } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\n\r\nexport function KeyboardSettings(): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  return (\r\n    <>\r\n      <FieldSet\r\n        legend={formatMessage({\r\n          id: \"t_Options\",\r\n          defaultMessage: \"Options\",\r\n        })}\r\n      >\r\n        <LayoutProp />\r\n      </FieldSet>\r\n      <FieldSet\r\n        legend={formatMessage({\r\n          id: \"t_Preview\",\r\n          defaultMessage: \"Preview\",\r\n        })}\r\n      >\r\n        <KeyboardPreview />\r\n        <GeometryProp />\r\n      </FieldSet>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction LayoutProp(): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const {\r\n    formatLanguageName, //\r\n    formatLayoutName,\r\n    formatFullLayoutName,\r\n  } = useFormattedNames();\r\n  const { compare } = useCollator();\r\n  const { settings, updateSettings } = useSettings();\r\n  const options = KeyboardOptions.from(settings);\r\n  return (\r\n    <>\r\n      <FieldList>\r\n        <Field>\r\n          <FormattedMessage id=\"t_Language:\" defaultMessage=\"Language:\" />\r\n        </Field>\r\n        <Field>\r\n          <OptionList\r\n            options={options\r\n              .selectableLanguages()\r\n              .map((item) => ({\r\n                value: item.id,\r\n                name: formatLanguageName(item),\r\n              }))\r\n              .sort((a, b) => compare(a.name, b.name))}\r\n            value={options.language.id}\r\n            onSelect={(id) => {\r\n              updateSettings(\r\n                options\r\n                  .withLanguage(Language.ALL.get(id))\r\n                  .withGeometry(options.geometry)\r\n                  .withZones(options.zones)\r\n                  .save(settings),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <FormattedMessage id=\"t_Layout:\" defaultMessage=\"Layout:\" />\r\n        </Field>\r\n        <Field>\r\n          <OptionList\r\n            options={options.selectableLayouts().map((item) => ({\r\n              value: item.id,\r\n              name:\r\n                item.language.id === options.language.id\r\n                  ? formatLayoutName(item)\r\n                  : formatFullLayoutName(item),\r\n            }))}\r\n            value={options.layout.id}\r\n            onSelect={(id) => {\r\n              updateSettings(\r\n                options\r\n                  .withLayout(Layout.ALL.get(id))\r\n                  .withGeometry(options.geometry)\r\n                  .withZones(options.zones)\r\n                  .save(settings),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <FieldList>\r\n        <Field>\r\n          <CheckBox\r\n            checked={\r\n              settings.get(keyboardProps.emulation) === Emulation.Forward\r\n            }\r\n            disabled={!options.layout.emulate}\r\n            label={formatMessage({\r\n              id: \"t_Emulate_layout\",\r\n              defaultMessage: \"Emulate layout\",\r\n            })}\r\n            onChange={(value) => {\r\n              updateSettings(\r\n                settings.set(\r\n                  keyboardProps.emulation,\r\n                  value ? Emulation.Forward : Emulation.None,\r\n                ),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"keyboard.emulation.forward.description\"\r\n            defaultMessage=\"Keyboard emulation ignores the keyboard layout configured in your system and allows you to practice the selected keyboard regardless of how your system is configured. It is more convenient to keep the emulation option enabled. If the above option is disabled (greyed out), this means the layout cannot be emulated (mainly for layouts which use dead keys).\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n      <FieldList>\r\n        <Field>\r\n          <CheckBox\r\n            checked={\r\n              settings.get(keyboardProps.emulation) === Emulation.Reverse\r\n            }\r\n            disabled={!options.layout.emulate}\r\n            label={formatMessage({\r\n              id: \"t_Keyboard_hardware_emulates_\",\r\n              defaultMessage: \"Keyboard hardware emulates layout\",\r\n            })}\r\n            onChange={(value) => {\r\n              updateSettings(\r\n                settings.set(\r\n                  keyboardProps.emulation,\r\n                  value ? Emulation.Reverse : Emulation.None,\r\n                ),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"keyboard.emulation.reverse.description\"\r\n            defaultMessage=\"Use this option if you have a hardware layout switcher on your keyboard, and you see that incorrect keys are highlighted on the virtual keyboard.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction GeometryProp(): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings, updateSettings } = useSettings();\r\n  const options = KeyboardOptions.from(settings);\r\n  return (\r\n    <>\r\n      <FieldList>\r\n        <Field>\r\n          <FormattedMessage id=\"t_Geometry:\" defaultMessage=\"Geometry:\" />\r\n        </Field>\r\n        <Field>\r\n          <OptionList\r\n            options={options.selectableGeometries().map((item) => ({\r\n              value: item.id,\r\n              name: item.name,\r\n            }))}\r\n            value={options.geometry.id}\r\n            onSelect={(id) => {\r\n              updateSettings(\r\n                options\r\n                  .withGeometry(Geometry.ALL.get(id))\r\n                  .withZones(options.zones)\r\n                  .save(settings),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <FormattedMessage id=\"t_Zones:\" defaultMessage=\"Zones:\" />\r\n        </Field>\r\n        <Field>\r\n          <OptionList\r\n            options={options.selectableZones().map((item) => ({\r\n              value: item.id,\r\n              name: item.name,\r\n            }))}\r\n            value={options.zones.id}\r\n            onSelect={(id) => {\r\n              updateSettings(\r\n                options.withZones(ZoneMod.ALL.get(id)).save(settings),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <FieldList>\r\n        <Field>\r\n          <CheckBox\r\n            label={formatMessage({\r\n              id: \"t_Colored_keys\",\r\n              defaultMessage: \"Colored keys\",\r\n            })}\r\n            checked={settings.get(keyboardProps.colors)}\r\n            onChange={(value) => {\r\n              updateSettings(settings.set(keyboardProps.colors, value));\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"settings.keyboardColors.description\"\r\n            defaultMessage=\"Show color coding of the keyboard zones. Use this option to learn which finger to use to press a key.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n      <FieldList>\r\n        <Field>\r\n          <CheckBox\r\n            label={formatMessage({\r\n              id: \"t_Highlight_keys\",\r\n              defaultMessage: \"Highlight keys\",\r\n            })}\r\n            checked={settings.get(keyboardProps.pointers)}\r\n            onChange={(value) => {\r\n              updateSettings(settings.set(keyboardProps.pointers, value));\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"settings.keyboardPointers.description\"\r\n            defaultMessage=\"Highlight a key that must to be pressed next. Use this option to quickly find the position of a key if you don’t know the keyboard layout well.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n    </>\r\n  );\r\n}\r\n\r\nconst KeyboardPreview = memo(function KeyboardPreview(): ReactNode {\r\n  const { settings } = useSettings();\r\n  const keyboard = useKeyboard();\r\n  const depressedKeys = useDepressedKeys(settings, keyboard);\r\n  const colors = settings.get(keyboardProps.colors);\r\n  const pointers = settings.get(keyboardProps.pointers);\r\n  return (\r\n    <VirtualKeyboard keyboard={keyboard} height=\"16rem\">\r\n      <KeyLayer\r\n        depressedKeys={depressedKeys}\r\n        toggledKeys={ModifierState.modifiers}\r\n        showColors={colors}\r\n      />\r\n      {pointers && <PointersPreview />}\r\n    </VirtualKeyboard>\r\n  );\r\n});\r\n\r\nconst PointersPreview = memo(function PointersPreview(): ReactNode {\r\n  const keyboard = useKeyboard();\r\n  const [index, setIndex] = useState(0);\r\n  const [suffix, setSuffix] = useState<CodePoint[]>([]);\r\n  useEffect(() => {\r\n    setIndex(0);\r\n    setSuffix(keyboard.getExampleLetters());\r\n  }, [keyboard]);\r\n  useEffect(() => {\r\n    const tasks = new Tasks();\r\n    tasks.delayed(1000, () => {\r\n      let newIndex = index + 1;\r\n      if (newIndex >= suffix.length) {\r\n        newIndex = 0;\r\n      }\r\n      setIndex(newIndex);\r\n    });\r\n    return () => {\r\n      tasks.cancelAll();\r\n    };\r\n  }, [index, suffix]);\r\n  return <PointersLayer suffix={suffix.slice(index)} delay={10} />;\r\n});\r\n","import { lessonProps } from \"@mkboard/lesson\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport { Description, Explainer, Field, FieldList, Range } from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nexport function LessonLengthProp(): ReactNode {\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <>\r\n      <FieldList>\r\n        <Field>\r\n          <FormattedMessage\r\n            id=\"t_Add_words_to_lessons:\"\r\n            defaultMessage=\"Add words to lessons:\"\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <Range\r\n            size={16}\r\n            min={1}\r\n            max={100}\r\n            step={1}\r\n            value={Math.round(settings.get(lessonProps.length) * 100)}\r\n            onChange={(value) => {\r\n              updateSettings(settings.set(lessonProps.length, value / 100));\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"settings.lessonLength.description\"\r\n            defaultMessage=\"Adjust the number of words in the lesson text. Making lessons longer can improve your learning.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n    </>\r\n  );\r\n}\r\n","import { Dir } from \"@mkboard/intl\";\r\nimport { lessonProps } from \"@mkboard/lesson\";\r\nimport { useFormatter } from \"@mkboard/lesson-ui\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport {\r\n  Description,\r\n  Explainer,\r\n  Field,\r\n  FieldList,\r\n  Icon,\r\n  IconButton,\r\n  Range,\r\n  Value,\r\n} from \"@mkboard/widget\";\r\nimport { mdiSkipNext, mdiSkipPrevious } from \"@mdi/js\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nexport function TargetSpeedProp(): ReactNode {\r\n  const { formatSpeed } = useFormatter();\r\n  const { settings, updateSettings } = useSettings();\r\n  const targetSpeed = settings.get(lessonProps.targetSpeed);\r\n  return (\r\n    <>\r\n      <FieldList>\r\n        <Field>\r\n          <FormattedMessage\r\n            id=\"t_Target_typing_speed:\"\r\n            defaultMessage=\"Target typing speed:\"\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <Range\r\n            size={16}\r\n            min={lessonProps.targetSpeed.min}\r\n            max={lessonProps.targetSpeed.max}\r\n            step={1}\r\n            value={targetSpeed}\r\n            onChange={(value) => {\r\n              updateSettings(settings.set(lessonProps.targetSpeed, value));\r\n            }}\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <Dir swap=\"icon\">\r\n            <IconButton\r\n              icon={<Icon shape={mdiSkipPrevious} />}\r\n              disabled={targetSpeed === lessonProps.targetSpeed.min}\r\n              onClick={() => {\r\n                updateSettings(\r\n                  settings.set(\r\n                    lessonProps.targetSpeed,\r\n                    Math.ceil(targetSpeed / 5) * 5 - 5,\r\n                  ),\r\n                );\r\n              }}\r\n            />\r\n            <IconButton\r\n              icon={<Icon shape={mdiSkipNext} />}\r\n              disabled={targetSpeed === lessonProps.targetSpeed.max}\r\n              onClick={() => {\r\n                updateSettings(\r\n                  settings.set(\r\n                    lessonProps.targetSpeed,\r\n                    Math.floor(targetSpeed / 5) * 5 + 5,\r\n                  ),\r\n                );\r\n              }}\r\n            />\r\n          </Dir>\r\n        </Field>\r\n        <Field>\r\n          <Value value={formatSpeed(targetSpeed)} />\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"settings.targetSpeed.description\"\r\n            defaultMessage=\"The target speed is used to measure the confidence level and the color of a letter. The closer to the target speed, the greener. In the guided mode a letter is only unlocked when you pass a target speed threshold. When you unlock all letters, you can increase the target speed to go back to the learning mode and unlock the letters again, this time with a higher speed threshold. We recommend to increase the target speed in modest steps only when you have all letters above the target speed.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n    </>\r\n  );\r\n}\r\n","import {\r\n  BookPreview,\r\n  BookSelector,\r\n  ParagraphPreview,\r\n  ParagraphSelector,\r\n} from \"@mkboard/content\";\r\nimport { type BooksLesson, lessonProps } from \"@mkboard/lesson\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport {\r\n  CheckBox,\r\n  Description,\r\n  Explainer,\r\n  Field,\r\n  FieldList,\r\n  FieldSet,\r\n  Spacer,\r\n} from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\nimport { LessonLengthProp } from \"./LessonLengthProp.tsx\";\r\nimport { TargetSpeedProp } from \"./TargetSpeedProp.tsx\";\r\n\r\nexport function BooksLessonSettings({\r\n  lesson,\r\n}: {\r\n  readonly lesson: BooksLesson;\r\n}): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings, updateSettings } = useSettings();\r\n  const { book, content, paragraphs, paragraphIndex } = lesson;\r\n  return (\r\n    <>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"lessonType.books.description\"\r\n            defaultMessage=\"Generate typing lessons from the text of a book. All keys are included by default. This mode is for the pros.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n      <FieldSet\r\n        legend={formatMessage({\r\n          id: \"t_Lesson_options\",\r\n          defaultMessage: \"Lesson options\",\r\n        })}\r\n      >\r\n        <BookSelector\r\n          book={book}\r\n          onChange={(book) => {\r\n            updateSettings(\r\n              settings\r\n                .set(lessonProps.books.book, book)\r\n                .set(lessonProps.books.paragraphIndex, 0),\r\n            );\r\n          }}\r\n        />\r\n        <BookPreview book={book} content={content} />\r\n        <ParagraphSelector\r\n          paragraphs={paragraphs}\r\n          paragraphIndex={paragraphIndex}\r\n          onChange={(paragraphIndex) => {\r\n            updateSettings(\r\n              settings.set(lessonProps.books.paragraphIndex, paragraphIndex),\r\n            );\r\n          }}\r\n        />\r\n        <ParagraphPreview\r\n          paragraphs={paragraphs}\r\n          paragraphIndex={paragraphIndex}\r\n        />\r\n        <Spacer size={3} />\r\n        <BookTextProcessing />\r\n        <TargetSpeedProp />\r\n        <LessonLengthProp />\r\n      </FieldSet>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction BookTextProcessing(): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <FieldList>\r\n      <Field>\r\n        <CheckBox\r\n          checked={settings.get(lessonProps.books.lettersOnly)}\r\n          label={formatMessage({\r\n            id: \"t_Remove_punctuation_characters\",\r\n            defaultMessage: \"Remove punctuation characters\",\r\n          })}\r\n          title={formatMessage({\r\n            id: \"settings.customTextLettersOnly.description\",\r\n            defaultMessage:\r\n              \"Remove punctuation from the text to make it simpler to type.\",\r\n          })}\r\n          onChange={(value) => {\r\n            updateSettings(settings.set(lessonProps.books.lettersOnly, value));\r\n          }}\r\n        />\r\n      </Field>\r\n      <Field>\r\n        <CheckBox\r\n          checked={settings.get(lessonProps.books.lowercase)}\r\n          label={formatMessage({\r\n            id: \"t_Transform_to_lowercase\",\r\n            defaultMessage: \"Transform to lowercase\",\r\n          })}\r\n          title={formatMessage({\r\n            id: \"settings.customTextLowercase.description\",\r\n            defaultMessage:\r\n              \"Transform all text to lower case to make it simpler to type.\",\r\n          })}\r\n          onChange={(value) => {\r\n            updateSettings(settings.set(lessonProps.books.lowercase, value));\r\n          }}\r\n        />\r\n      </Field>\r\n    </FieldList>\r\n  );\r\n}\r\n","import { Syntax } from \"@mkboard/code\";\r\nimport { type CodeLesson, lessonProps } from \"@mkboard/lesson\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport {\r\n  CheckBox,\r\n  Description,\r\n  Explainer,\r\n  Field,\r\n  FieldList,\r\n  FieldSet,\r\n  OptionList,\r\n} from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\n\r\nexport function CodeLessonSettings({\r\n  lesson,\r\n}: {\r\n  readonly lesson: CodeLesson;\r\n}): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings, updateSettings } = useSettings();\r\n  const syntax = settings.get(lessonProps.code.syntax);\r\n  const flags = settings.get(lessonProps.code.flags);\r\n  return (\r\n    <>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"lessonType.code.description\"\r\n            defaultMessage=\"Practice punctuation characters that are specific to a programming language syntax.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n      <FieldSet\r\n        legend={formatMessage({\r\n          id: \"t_Lesson_options\",\r\n          defaultMessage: \"Lesson options\",\r\n        })}\r\n      >\r\n        <FieldList>\r\n          <Field>\r\n            <FormattedMessage id=\"t_Syntax:\" defaultMessage=\"Syntax:\" />\r\n          </Field>\r\n          <Field>\r\n            <OptionList\r\n              options={Syntax.ALL.map((item) => ({\r\n                value: item.id,\r\n                name: item.name,\r\n              }))}\r\n              value={syntax.id}\r\n              onSelect={(id) => {\r\n                updateSettings(\r\n                  settings.set(lessonProps.code.syntax, Syntax.ALL.get(id)),\r\n                );\r\n              }}\r\n            />\r\n          </Field>\r\n          {[...syntax.flags].map((flag) => {\r\n            return (\r\n              <Field key={flag}>\r\n                <CheckBox\r\n                  label={flag}\r\n                  checked={flags.includes(flag)}\r\n                  onChange={(checked) => {\r\n                    const set = new Set(flags);\r\n                    if (checked) {\r\n                      set.add(flag);\r\n                    } else {\r\n                      set.delete(flag);\r\n                    }\r\n                    updateSettings(\r\n                      settings.set(lessonProps.code.flags, [...set]),\r\n                    );\r\n                  }}\r\n                />\r\n              </Field>\r\n            );\r\n          })}\r\n        </FieldList>\r\n        <Explainer>\r\n          <Description>\r\n            <FormattedMessage\r\n              id=\"lessonType.syntax.description\"\r\n              defaultMessage=\"Generate lessons that resemble the specified programming language syntax.\"\r\n            />\r\n          </Description>\r\n        </Explainer>\r\n      </FieldSet>\r\n    </>\r\n  );\r\n}\r\n","export type ExampleText = {\n  readonly title: string;\n  readonly content: string;\n};\n\nconst jabberwocky: ExampleText = {\n  title: \"Jabberwocky\",\n  content:\n    \"Jabberwocky\\n\" +\n    \"\\n\" +\n    \"'Twas brillig, and the slithy toves\\n\" +\n    \"Did gyre and gimble in the wabe;\\n\" +\n    \"All mimsy were the borogoves,\\n\" +\n    \"And the mome raths outgrabe.\\n\" +\n    \"\\n\" +\n    '\"Beware the Jabberwock, my son!\\n' +\n    \"The jaws that bite, the claws that catch!\\n\" +\n    \"Beware the Jubjub bird, and shun\\n\" +\n    'The frumious Bandersnatch!\"\\n' +\n    \"\\n\" +\n    \"He took his vorpal sword in hand:\\n\" +\n    \"Long time the manxome foe he sought-\\n\" +\n    \"So rested he by the Tumtum tree,\\n\" +\n    \"And stood awhile in thought.\\n\" +\n    \"\\n\" +\n    \"And as in uffish thought he stood,\\n\" +\n    \"The Jabberwock, with eyes of flame,\\n\" +\n    \"Came whiffling through the tulgey wood,\\n\" +\n    \"And burbled as it came!\\n\" +\n    \"\\n\" +\n    \"One, two! One, two! and through and through\\n\" +\n    \"The vorpal blade went snicker-snack!\\n\" +\n    \"He left it dead, and with its head\\n\" +\n    \"He went galumphing back.\\n\" +\n    \"\\n\" +\n    '\"And hast thou slain the Jabberwock?\\n' +\n    \"Come to my arms, my beamish boy!\\n\" +\n    'O frabjous day! Callooh! Callay!\"\\n' +\n    \"He chortled in his joy.\\n\" +\n    \"\\n\" +\n    \"'Twas brillig, and the slithy toves\\n\" +\n    \"Did gyre and gimble in the wabe;\\n\" +\n    \"All mimsy were the borogoves,\\n\" +\n    \"And the mome raths outgrabe.\",\n};\n\nconst loremIpsum: ExampleText = {\n  title: \"Lorem Ipsum\",\n  content:\n    \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. \" +\n    \"Ut egestas libero non laoreet scelerisque. \" +\n    \"Mauris nec sodales velit. \" +\n    \"Quisque mattis eu nulla varius accumsan. \" +\n    \"Sed interdum erat eu justo sodales, vel hendrerit diam pretium. \" +\n    \"Phasellus lacus libero, scelerisque quis enim eget, tempus elementum massa. \" +\n    \"Aenean elementum nec magna at fringilla. \" +\n    \"Nam nisl eros, viverra et luctus eget, placerat non velit. \" +\n    \"Cras ante velit, mattis quis porttitor nec, pellentesque eu sem. \" +\n    \"Aenean blandit consectetur metus ut bibendum.\" +\n    \"Aliquam in suscipit erat. \" +\n    \"Praesent non vulputate tortor, ac semper diam.\",\n};\n\nconst aShortStory: ExampleText = {\n  title: \"A Short Story\",\n  content:\n    \"Imagine all human beings swept off the face of the earth, excepting one man. \" +\n    \"Imagine this man in some vast city, New York or London. \" +\n    \"Imagine him on the third or fourth day of his solitude \" +\n    \"sitting in a house and hearing a ring at the door-bell!\",\n};\n\nexport const exampleTexts: readonly ExampleText[] = [\n  jabberwocky,\n  loremIpsum,\n  aShortStory,\n];\n","import { useIntlNumbers } from \"@mkboard/intl\";\r\nimport { type Language } from \"@mkboard/keyboard\";\r\nimport { type CustomTextLesson, lessonProps } from \"@mkboard/lesson\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport { textStatsOf } from \"@mkboard/unicode\";\r\nimport {\r\n  CheckBox,\r\n  Description,\r\n  Explainer,\r\n  Field,\r\n  FieldList,\r\n  FieldSet,\r\n  LinkButton,\r\n  NameValue,\r\n  Para,\r\n  TextField,\r\n} from \"@mkboard/widget\";\r\nimport { type ReactNode, useMemo } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\nimport { exampleTexts } from \"./example-texts.ts\";\r\nimport { LessonLengthProp } from \"./LessonLengthProp.tsx\";\r\nimport { TargetSpeedProp } from \"./TargetSpeedProp.tsx\";\r\n\r\nexport function CustomTextLessonSettings({\r\n  lesson,\r\n}: {\r\n  readonly lesson: CustomTextLesson;\r\n}): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings } = useSettings();\r\n  return (\r\n    <>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"lessonType.customText.description\"\r\n            defaultMessage=\"Generate typing lessons from the words of your own custom text. All keys are included by default. This mode is for the pros.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n\r\n      <FieldSet\r\n        legend={formatMessage({\r\n          id: \"t_Lesson_options\",\r\n          defaultMessage: \"Lesson options\",\r\n        })}\r\n      >\r\n        <CustomTextInput />\r\n        <CustomTextStats\r\n          language={lesson.model.language}\r\n          customText={settings.get(lessonProps.customText.content)}\r\n        />\r\n        <CustomTextProcessing />\r\n        <TargetSpeedProp />\r\n        <LessonLengthProp />\r\n      </FieldSet>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction CustomTextInput(): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <>\r\n      <Para>\r\n        <FormattedMessage id=\"t_Examples:\" defaultMessage=\"Examples:\" />{\" \"}\r\n        {exampleTexts.map(({ title, content }, index) => (\r\n          <span key={index}>\r\n            {index > 0 ? \", \" : null}\r\n            <LinkButton\r\n              onClick={() => {\r\n                updateSettings(\r\n                  settings.set(lessonProps.customText.content, content),\r\n                );\r\n              }}\r\n            >\r\n              {title}\r\n            </LinkButton>\r\n          </span>\r\n        ))}\r\n      </Para>\r\n      <Para>\r\n        <TextField\r\n          type=\"textarea\"\r\n          placeholder={formatMessage({\r\n            id: \"t_Custom_text\",\r\n            defaultMessage: \"Custom text\",\r\n          })}\r\n          value={settings.get(lessonProps.customText.content)}\r\n          onChange={(value) => {\r\n            updateSettings(settings.set(lessonProps.customText.content, value));\r\n          }}\r\n        />\r\n      </Para>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction CustomTextStats({\r\n  language,\r\n  customText,\r\n}: {\r\n  readonly language: Language;\r\n  readonly customText: string;\r\n}): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { formatNumber } = useIntlNumbers();\r\n  const { numWords, numUniqueWords, avgWordLength } = useMemo(\r\n    () => textStatsOf(language.locale, customText),\r\n    [language, customText],\r\n  );\r\n  return (\r\n    <FieldList>\r\n      <Field>\r\n        <NameValue\r\n          name={formatMessage({\r\n            id: \"t_num_All_words\",\r\n            defaultMessage: \"All words\",\r\n          })}\r\n          value={formatNumber(numWords)}\r\n        />\r\n      </Field>\r\n      <Field>\r\n        <NameValue\r\n          name={formatMessage({\r\n            id: \"t_num_Unique_words\",\r\n            defaultMessage: \"Unique words\",\r\n          })}\r\n          value={formatNumber(numUniqueWords)}\r\n        />\r\n      </Field>\r\n      <Field>\r\n        <NameValue\r\n          name={formatMessage({\r\n            id: \"t_Average_word_length\",\r\n            defaultMessage: \"Average word length\",\r\n          })}\r\n          value={formatNumber(avgWordLength, 2)}\r\n        />\r\n      </Field>\r\n    </FieldList>\r\n  );\r\n}\r\n\r\nfunction CustomTextProcessing(): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <FieldList>\r\n      <Field>\r\n        <CheckBox\r\n          checked={settings.get(lessonProps.customText.lettersOnly)}\r\n          label={formatMessage({\r\n            id: \"t_Remove_punctuation_characters\",\r\n            defaultMessage: \"Remove punctuation characters\",\r\n          })}\r\n          title={formatMessage({\r\n            id: \"settings.customTextLettersOnly.description\",\r\n            defaultMessage:\r\n              \"Remove punctuation from the text to make it simpler to type.\",\r\n          })}\r\n          onChange={(value) => {\r\n            updateSettings(\r\n              settings.set(lessonProps.customText.lettersOnly, value),\r\n            );\r\n          }}\r\n        />\r\n      </Field>\r\n      <Field>\r\n        <CheckBox\r\n          checked={settings.get(lessonProps.customText.lowercase)}\r\n          label={formatMessage({\r\n            id: \"t_Transform_to_lowercase\",\r\n            defaultMessage: \"Transform to lowercase\",\r\n          })}\r\n          title={formatMessage({\r\n            id: \"settings.customTextLowercase.description\",\r\n            defaultMessage:\r\n              \"Transform all text to lower case to make it simpler to type.\",\r\n          })}\r\n          onChange={(value) => {\r\n            updateSettings(\r\n              settings.set(lessonProps.customText.lowercase, value),\r\n            );\r\n          }}\r\n        />\r\n      </Field>\r\n      <Field>\r\n        <CheckBox\r\n          checked={settings.get(lessonProps.customText.randomize)}\r\n          label={formatMessage({\r\n            id: \"t_Shuffle_words\",\r\n            defaultMessage: \"Shuffle words\",\r\n          })}\r\n          title={formatMessage({\r\n            id: \"settings.customTextRandomize.description\",\r\n            defaultMessage: \"Put words from the custom text in a random order.\",\r\n          })}\r\n          onChange={(value) => {\r\n            updateSettings(\r\n              settings.set(lessonProps.customText.randomize, value),\r\n            );\r\n          }}\r\n        />\r\n      </Field>\r\n    </FieldList>\r\n  );\r\n}\r\n","import { useIntlDurations } from \"@mkboard/intl\";\r\nimport { lessonProps } from \"@mkboard/lesson\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport {\r\n  Description,\r\n  Explainer,\r\n  Field,\r\n  FieldList,\r\n  FieldSet,\r\n  Range,\r\n  Value,\r\n} from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\n\r\nexport function DailyGoalSettings(): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { formatDuration } = useIntlDurations();\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <FieldSet>\r\n      <FieldList>\r\n        <Field>\r\n          <FormattedMessage id=\"t_Daily_goal:\" defaultMessage=\"Daily goal:\" />\r\n        </Field>\r\n        <Field>\r\n          <Range\r\n            size={16}\r\n            min={0}\r\n            max={24}\r\n            step={1}\r\n            value={Math.round(settings.get(lessonProps.dailyGoal) / 5)}\r\n            onChange={(value) => {\r\n              updateSettings(settings.set(lessonProps.dailyGoal, value * 5));\r\n            }}\r\n          />\r\n        </Field>\r\n        <Field>\r\n          {settings.get(lessonProps.dailyGoal) === 0 ? (\r\n            formatMessage({\r\n              id: \"t_Not_set\",\r\n              defaultMessage: \"Not set\",\r\n            })\r\n          ) : (\r\n            <Value\r\n              value={formatDuration({\r\n                minutes: settings.get(lessonProps.dailyGoal),\r\n              })}\r\n            />\r\n          )}\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"settings.dailyGoal.description\"\r\n            defaultMessage=\"Set the time you want to spend on the exercises daily. It is a simple reminder which does not limit you in any way. You can stop practicing whenever you want.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n    </FieldSet>\r\n  );\r\n}\r\n","import { lessonProps } from \"@mkboard/lesson\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport { Description, Explainer, Field, FieldList, Range } from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nexport function AlphabetSizeProp(): ReactNode {\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <>\r\n      <FieldList>\r\n        <Field>\r\n          <FormattedMessage\r\n            id=\"t_Unlock_more_letters:\"\r\n            defaultMessage=\"Unlock more letters:\"\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <Range\r\n            size={16}\r\n            min={1}\r\n            max={100}\r\n            step={1}\r\n            value={Math.round(\r\n              settings.get(lessonProps.guided.alphabetSize) * 100,\r\n            )}\r\n            onChange={(value) => {\r\n              updateSettings(\r\n                settings.set(lessonProps.guided.alphabetSize, value / 100),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"settings.alphabetSize.description\"\r\n            defaultMessage=\"Manually unlock the remaining letters. Use this option if want a greater variety of words. We recommend using this option sparingly and stick to the algorithm to unlock letters for you.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n    </>\r\n  );\r\n}\r\n","import { lessonProps } from \"@mkboard/lesson\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport {\r\n  CheckBox,\r\n  Description,\r\n  Explainer,\r\n  Field,\r\n  FieldList,\r\n} from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\n\r\nexport function KeyboardOrderProp(): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <>\r\n      <FieldList>\r\n        <Field>\r\n          <CheckBox\r\n            label={formatMessage({\r\n              id: \"setting.keyboardOrder.label\",\r\n              defaultMessage: \"Sort letters in the order of keyboard keys\",\r\n            })}\r\n            checked={settings.get(lessonProps.guided.keyboardOrder)}\r\n            onChange={(value) => {\r\n              updateSettings(\r\n                settings.set(lessonProps.guided.keyboardOrder, value),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"setting.keyboardOrder.description\"\r\n            defaultMessage=\"Sort letters in such a way that the letters from the home row come first, then the letters from the top row, and finally all the remaining letters. Home row is the row with the CapsLock key. Top row is the row with the Tab key. It is easier and faster to type when your fingers do not need to move away from the home row. This feature works best with optimized layouts, like Dvorak or Colemak. In the Qwerty layout, the only vowel on the home row is A, so it severely limits the choice of words, and the algorithm will use more pseudo-words than usual.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n    </>\r\n  );\r\n}\r\n","import { lessonProps } from \"@mkboard/lesson\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport {\r\n  CheckBox,\r\n  Description,\r\n  Explainer,\r\n  Field,\r\n  FieldList,\r\n} from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\n\r\nexport function NaturalWordsProp(): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <>\r\n      <FieldList>\r\n        <Field>\r\n          <CheckBox\r\n            label={formatMessage({\r\n              id: \"t_Prefer_natural_words\",\r\n              defaultMessage: \"Prefer natural words\",\r\n            })}\r\n            checked={settings.get(lessonProps.guided.naturalWords)}\r\n            onChange={(value) => {\r\n              updateSettings(\r\n                settings.set(lessonProps.guided.naturalWords, value),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"settings.naturalWords.description\"\r\n            defaultMessage=\"Use the dictionary words as much as possible, and if not many such words are available, then use computer-generated pseudo-words. Natural words might be easier to type. Pseudo-words offer a much greater variety of letter combinations. If this option is enabled, you will see more pseudo-words in the beginning, when the letter list is short. However, as you unlock few more letters, there is a good chance that only the dictionary words will be used.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n    </>\r\n  );\r\n}\r\n","import { lessonProps } from \"@mkboard/lesson\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport {\r\n  CheckBox,\r\n  Description,\r\n  Explainer,\r\n  Field,\r\n  FieldList,\r\n} from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\n\r\nexport function RecoverKeysProp(): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <>\r\n      <FieldList>\r\n        <Field>\r\n          <FormattedMessage\r\n            id=\"t_Unlock_a_next_key_:\"\r\n            defaultMessage=\"Unlock a next key only when:\"\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <CheckBox\r\n            label={formatMessage({\r\n              id: \"t_The_previous_keys_are_\",\r\n              defaultMessage:\r\n                \"The previous keys are also above the target speed\",\r\n            })}\r\n            checked={settings.get(lessonProps.guided.recoverKeys)}\r\n            onChange={(value) => {\r\n              updateSettings(\r\n                settings.set(lessonProps.guided.recoverKeys, value),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"settings.recoverKeys.description\"\r\n            defaultMessage=\"When you focus on a new key, it is very likely that the speed of previous keys will decrease. If this option is disabled, you unlock a new key by raising only the focused key above the target speed. If this option is enabled, you will have to raise the focused key and all the previous keys above the target speed. This will make unlocking new keys harder. However, this will also make forgetting old keys harder.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n    </>\r\n  );\r\n}\r\n","import { useIntlNumbers } from \"@mkboard/intl\";\r\nimport { lessonProps } from \"@mkboard/lesson\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport {\r\n  Description,\r\n  Explainer,\r\n  Field,\r\n  FieldList,\r\n  Range,\r\n  Value,\r\n} from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nexport function RepeatWordsProp(): ReactNode {\r\n  const { formatPercents } = useIntlNumbers();\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <>\r\n      <FieldList>\r\n        <Field>\r\n          <FormattedMessage\r\n            id=\"t_Repeat_each_word:\"\r\n            defaultMessage=\"Repeat each word:\"\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <Range\r\n            min={lessonProps.repeatWords.min}\r\n            max={lessonProps.repeatWords.max}\r\n            step={1}\r\n            value={settings.get(lessonProps.repeatWords)}\r\n            onChange={(value) => {\r\n              updateSettings(settings.set(lessonProps.repeatWords, value));\r\n            }}\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <Value value={settings.get(lessonProps.repeatWords)} />\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"settings.repeatWords.description\"\r\n            defaultMessage=\"Repeat each word a number of times. Type a word for the first time to develop your muscle memory. Typing the same word consecutively should be easier.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n    </>\r\n  );\r\n}\r\n","import { useIntlNumbers } from \"@mkboard/intl\";\r\nimport { lessonProps } from \"@mkboard/lesson\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport {\r\n  Description,\r\n  Explainer,\r\n  Field,\r\n  FieldList,\r\n  Range,\r\n  Value,\r\n} from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nexport function TextManglingProp(): ReactNode {\r\n  const { formatPercents } = useIntlNumbers();\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <>\r\n      <FieldList>\r\n        <Field>\r\n          <FormattedMessage\r\n            id=\"t_Add_capital_letters:\"\r\n            defaultMessage=\"Add capital letters:\"\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <Range\r\n            size={16}\r\n            min={0}\r\n            max={100}\r\n            step={1}\r\n            value={Math.round(settings.get(lessonProps.capitals) * 100)}\r\n            onChange={(value) => {\r\n              updateSettings(settings.set(lessonProps.capitals, value / 100));\r\n            }}\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <Value value={formatPercents(settings.get(lessonProps.capitals))} />\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"settings.capitalLetters.description\"\r\n            defaultMessage=\"Adjust the amount of capital letters added to the lesson text. Use this option to practice typing the capital letters. We recommend to increase this value only if you have all letters above the target speed.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n      <FieldList>\r\n        <Field>\r\n          <FormattedMessage\r\n            id=\"t_Add_punctuation_characters:\"\r\n            defaultMessage=\"Add punctuation characters:\"\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <Range\r\n            size={16}\r\n            min={0}\r\n            max={100}\r\n            step={1}\r\n            value={Math.round(settings.get(lessonProps.punctuators) * 100)}\r\n            onChange={(value) => {\r\n              updateSettings(\r\n                settings.set(lessonProps.punctuators, value / 100),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <Value\r\n            value={formatPercents(settings.get(lessonProps.punctuators))}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"settings.punctuation.description\"\r\n            defaultMessage=\"Adjust the amount of basic punctuation characters added to the lesson text. Use this option to practice typing the punctuation characters. We recommend to increase this value only if you have all letters above the target speed.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n    </>\r\n  );\r\n}\r\n","import { type GuidedLesson } from \"@mkboard/lesson\";\r\nimport { Description, Explainer, FieldSet } from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\nimport { AlphabetSizeProp } from \"./AlphabetSizeProp.tsx\";\r\nimport { KeyboardOrderProp } from \"./KeyboardOrderProp.tsx\";\r\nimport { LessonLengthProp } from \"./LessonLengthProp.tsx\";\r\nimport { NaturalWordsProp } from \"./NaturalWordsProp.tsx\";\r\nimport { RecoverKeysProp } from \"./RecoverKeysProp.tsx\";\r\nimport { RepeatWordsProp } from \"./RepeatWordsProp.tsx\";\r\nimport { TargetSpeedProp } from \"./TargetSpeedProp.tsx\";\r\nimport { TextManglingProp } from \"./TextManglingProp.tsx\";\r\n\r\nexport function GuidedLessonSettings({\r\n  lesson,\r\n}: {\r\n  readonly lesson: GuidedLesson;\r\n}): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  return (\r\n    <>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"lessonType.guided.description\"\r\n            defaultMessage=\"Generate typing lessons with random words using the phonetic rules of your language. The key set is expanded dynamically based on your performance. This mode is for the beginners.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n      <FieldSet\r\n        legend={formatMessage({\r\n          id: \"t_Lesson_options\",\r\n          defaultMessage: \"Lesson options\",\r\n        })}\r\n      >\r\n        <TargetSpeedProp />\r\n        <RecoverKeysProp />\r\n        <KeyboardOrderProp />\r\n        <NaturalWordsProp />\r\n        <RepeatWordsProp />\r\n        <AlphabetSizeProp />\r\n        <TextManglingProp />\r\n        <LessonLengthProp />\r\n      </FieldSet>\r\n    </>\r\n  );\r\n}\r\n","import { type Lesson } from \"@mkboard/lesson\";\r\nimport { CurrentKeyRow, KeySetRow } from \"@mkboard/lesson-ui\";\r\nimport { LCG } from \"@mkboard/rand\";\r\nimport { makeKeyStatsMap, useResults } from \"@mkboard/result\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport {\r\n  TextInput,\r\n  toTextDisplaySettings,\r\n  toTextInputSettings,\r\n} from \"@mkboard/textinput\";\r\nimport { StaticText } from \"@mkboard/textinput-ui\";\r\nimport { FieldSet } from \"@mkboard/widget\";\r\nimport { type ReactNode, useMemo } from \"react\";\r\nimport { useIntl } from \"react-intl\";\r\nimport * as styles from \"./LessonPreview.module.less\";\r\n\r\nexport function LessonPreview({\r\n  lesson,\r\n}: {\r\n  readonly lesson: Lesson;\r\n}): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings } = useSettings();\r\n  const { results } = useResults();\r\n  const { lessonKeys, textInput } = useMemo(() => {\r\n    const lessonKeys = lesson.update(\r\n      makeKeyStatsMap(lesson.letters, lesson.filter(results)),\r\n    );\r\n    const textInput = new TextInput(\r\n      lesson.generate(lessonKeys, LCG(123)),\r\n      toTextInputSettings(settings),\r\n    );\r\n    return { lessonKeys, textInput };\r\n  }, [settings, lesson, results]);\r\n  return (\r\n    <FieldSet\r\n      legend={formatMessage({\r\n        id: \"t_Lesson_preview:\",\r\n        defaultMessage: \"Lesson preview\",\r\n      })}\r\n    >\r\n      <div className={styles.root}>\r\n        <KeySetRow lessonKeys={lessonKeys} />\r\n        <CurrentKeyRow lessonKeys={lessonKeys} />\r\n        <div className={styles.text}>\r\n          <StaticText\r\n            settings={toTextDisplaySettings(settings)}\r\n            lines={textInput.lines}\r\n          />\r\n        </div>\r\n      </div>\r\n    </FieldSet>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nvar _1 = \"nRCgCFcpNo\";\nvar _2 = \"oDouJ3_D26\";\nexport { _1 as \"root\", _2 as \"text\" }\n","import { lessonProps } from \"@mkboard/lesson\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport {\r\n  CheckBox,\r\n  Description,\r\n  Explainer,\r\n  Field,\r\n  FieldList,\r\n  Link,\r\n} from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\n\r\nexport function BenfordProp(): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <>\r\n      <FieldList>\r\n        <Field>\r\n          <CheckBox\r\n            label={formatMessage({\r\n              id: \"settings.benfordsLaw.label\",\r\n              defaultMessage: \"Benford’s law\",\r\n            })}\r\n            checked={settings.get(lessonProps.numbers.benford)}\r\n            onChange={(value) => {\r\n              updateSettings(settings.set(lessonProps.numbers.benford, value));\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"settings.benfordsLaw.description\"\r\n            defaultMessage=\"<a>Benford’s law</a> is an observation that in many real-life numerical data sets, the leading digit is likely to be small.\"\r\n            values={{\r\n              a: (chunks) => (\r\n                <Link\r\n                  href=\"https://en.wikipedia.org/wiki/Benford's_law\"\r\n                  target=\"_blank\"\r\n                >\r\n                  {chunks}\r\n                </Link>\r\n              ),\r\n            }}\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n    </>\r\n  );\r\n}\r\n","import { type NumbersLesson } from \"@mkboard/lesson\";\r\nimport { Description, Explainer, FieldSet } from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\nimport { BenfordProp } from \"./BenfordProp.tsx\";\r\n\r\nexport function NumbersLessonSettings({\r\n  lesson,\r\n}: {\r\n  readonly lesson: NumbersLesson;\r\n}): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  return (\r\n    <>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"lessonType.numbers.description\"\r\n            defaultMessage=\"Practice numbers only.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n      <FieldSet\r\n        legend={formatMessage({\r\n          id: \"t_Lesson_options\",\r\n          defaultMessage: \"Lesson options\",\r\n        })}\r\n      >\r\n        <BenfordProp />\r\n      </FieldSet>\r\n    </>\r\n  );\r\n}\r\n","import { wordListStats } from \"@mkboard/content\";\r\nimport { useIntlNumbers } from \"@mkboard/intl\";\r\nimport { lessonProps, type WordListLesson } from \"@mkboard/lesson\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport {\r\n  CheckBox,\r\n  Description,\r\n  Explainer,\r\n  Field,\r\n  FieldList,\r\n  FieldSet,\r\n  NameValue,\r\n  Para,\r\n  Range,\r\n  TextField,\r\n} from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\nimport { LessonLengthProp } from \"./LessonLengthProp.tsx\";\r\nimport { RepeatWordsProp } from \"./RepeatWordsProp.tsx\";\r\nimport { TargetSpeedProp } from \"./TargetSpeedProp.tsx\";\r\nimport { TextManglingProp } from \"./TextManglingProp.tsx\";\r\n\r\nexport function WordListLessonSettings({\r\n  lesson,\r\n}: {\r\n  readonly lesson: WordListLesson;\r\n}): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  return (\r\n    <>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"lessonType.wordList.description\"\r\n            defaultMessage=\"Generate typing lessons from the list of the most common words of your language. All keys are included by default. This mode is for the pros.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n      <FieldSet\r\n        legend={formatMessage({\r\n          id: \"t_Lesson_options\",\r\n          defaultMessage: \"Lesson options\",\r\n        })}\r\n      >\r\n        <WordListPreview lesson={lesson} />\r\n        <WordListStats lesson={lesson} />\r\n        <TargetSpeedProp />\r\n        <RepeatWordsProp />\r\n        <TextManglingProp />\r\n        <LessonLengthProp />\r\n      </FieldSet>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction WordListPreview({\r\n  lesson,\r\n}: {\r\n  readonly lesson: WordListLesson;\r\n}): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <>\r\n      <FieldList>\r\n        <Field>\r\n          <FormattedMessage\r\n            id=\"t_Word_list_size:\"\r\n            defaultMessage=\"Word list size:\"\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <Range\r\n            size={16}\r\n            min={lessonProps.wordList.wordListSize.min}\r\n            max={lessonProps.wordList.wordListSize.max}\r\n            step={1}\r\n            value={settings.get(lessonProps.wordList.wordListSize)}\r\n            onChange={(value) => {\r\n              updateSettings(\r\n                settings.set(lessonProps.wordList.wordListSize, value),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <CheckBox\r\n            label={formatMessage({\r\n              id: \"t_Long_words_only\",\r\n              defaultMessage: \"Long words only\",\r\n            })}\r\n            checked={settings.get(lessonProps.wordList.longWordsOnly)}\r\n            onChange={(value) => {\r\n              updateSettings(\r\n                settings.set(lessonProps.wordList.longWordsOnly, value),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <Para>\r\n        <TextField\r\n          type=\"textarea\"\r\n          value={[...lesson.wordList].join(\", \")}\r\n          readOnly={true}\r\n        />\r\n      </Para>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction WordListStats({\r\n  lesson,\r\n}: {\r\n  readonly lesson: WordListLesson;\r\n}): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { formatNumber } = useIntlNumbers();\r\n  const { wordCount, avgWordLength } = wordListStats(lesson.wordList);\r\n  return (\r\n    <FieldList>\r\n      <Field>\r\n        <NameValue\r\n          name={formatMessage({\r\n            id: \"t_num_Unique_words\",\r\n            defaultMessage: \"Unique words\",\r\n          })}\r\n          value={formatNumber(wordCount)}\r\n        />\r\n      </Field>\r\n      <Field>\r\n        <NameValue\r\n          name={formatMessage({\r\n            id: \"t_Average_word_length\",\r\n            defaultMessage: \"Average word length\",\r\n          })}\r\n          value={formatNumber(avgWordLength, 2)}\r\n        />\r\n      </Field>\r\n    </FieldList>\r\n  );\r\n}\r\n","import {\r\n  type BooksLesson,\r\n  type CodeLesson,\r\n  type CustomTextLesson,\r\n  type GuidedLesson,\r\n  type Lesson,\r\n  lessonProps,\r\n  LessonType,\r\n  type NumbersLesson,\r\n  type WordListLesson,\r\n} from \"@mkboard/lesson\";\r\nimport { LessonLoader } from \"@mkboard/lesson-loader\";\r\nimport { type Settings, useSettings } from \"@mkboard/settings\";\r\nimport { Tab, TabList } from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { BooksLessonSettings } from \"./lesson/BooksLessonSettings.tsx\";\r\nimport { CodeLessonSettings } from \"./lesson/CodeLessonSettings.tsx\";\r\nimport { CustomTextLessonSettings } from \"./lesson/CustomTextLessonSettings.tsx\";\r\nimport { DailyGoalSettings } from \"./lesson/DailyGoalSettings.tsx\";\r\nimport { GuidedLessonSettings } from \"./lesson/GuidedLessonSettings.tsx\";\r\nimport { LessonPreview } from \"./lesson/LessonPreview.tsx\";\r\nimport { NumbersLessonSettings } from \"./lesson/NumbersLessonSettings.tsx\";\r\nimport { WordListLessonSettings } from \"./lesson/WordListLessonSettings.tsx\";\r\n\r\nexport function LessonSettings(): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <>\r\n      <TabList\r\n        selectedIndex={LessonType.ALL.indexOf(settings.get(lessonProps.type))}\r\n        onSelect={(index) => {\r\n          updateSettings(\r\n            settings.set(lessonProps.type, LessonType.ALL.at(index)),\r\n          );\r\n        }}\r\n      >\r\n        <Tab\r\n          label={formatMessage({\r\n            id: \"t_Guided_lessons\",\r\n            defaultMessage: \"Guided lessons\",\r\n          })}\r\n        />\r\n        <Tab\r\n          label={formatMessage({\r\n            id: \"t_Common_words\",\r\n            defaultMessage: \"Common words\",\r\n          })}\r\n        />\r\n        <Tab\r\n          label={formatMessage({\r\n            id: \"t_Books\",\r\n            defaultMessage: \"Books\",\r\n          })}\r\n        />\r\n        <Tab\r\n          label={formatMessage({\r\n            id: \"t_Custom_text\",\r\n            defaultMessage: \"Custom text\",\r\n          })}\r\n        />\r\n        <Tab\r\n          label={formatMessage({\r\n            id: \"t_Source_code\",\r\n            defaultMessage: \"Source code\",\r\n          })}\r\n        />\r\n        <Tab\r\n          label={formatMessage({\r\n            id: \"t_Numbers\",\r\n            defaultMessage: \"Numbers\",\r\n          })}\r\n        />\r\n      </TabList>\r\n      <LessonLoader>\r\n        {(lesson) => (\r\n          <>\r\n            {tabBody(settings, lesson)}\r\n            <LessonPreview lesson={lesson} />\r\n            <DailyGoalSettings />\r\n          </>\r\n        )}\r\n      </LessonLoader>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction tabBody(settings: Settings, lesson: Lesson): ReactNode {\r\n  switch (settings.get(lessonProps.type)) {\r\n    case LessonType.GUIDED:\r\n      return <GuidedLessonSettings lesson={lesson as GuidedLesson} />;\r\n    case LessonType.WORDLIST:\r\n      return <WordListLessonSettings lesson={lesson as WordListLesson} />;\r\n    case LessonType.BOOKS:\r\n      return <BooksLessonSettings lesson={lesson as BooksLesson} />;\r\n    case LessonType.CUSTOM:\r\n      return <CustomTextLessonSettings lesson={lesson as CustomTextLesson} />;\r\n    case LessonType.CODE:\r\n      return <CodeLessonSettings lesson={lesson as CodeLesson} />;\r\n    case LessonType.NUMBERS:\r\n      return <NumbersLessonSettings lesson={lesson as NumbersLesson} />;\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n","import { SpeedUnit, uiProps } from \"@mkboard/result\";\r\nimport { useSettings } from \"@mkboard/settings\";\r\nimport {\r\n  Description,\r\n  Explainer,\r\n  Field,\r\n  FieldList,\r\n  FieldSet,\r\n  OptionList,\r\n} from \"@mkboard/widget\";\r\nimport { type ReactNode } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\n\r\nexport function MiscSettings(): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  return (\r\n    <>\r\n      <FieldSet\r\n        legend={formatMessage({\r\n          id: \"t_Interface_options\",\r\n          defaultMessage: \"Interface options\",\r\n        })}\r\n      >\r\n        <SpeedUnitProp />\r\n      </FieldSet>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction SpeedUnitProp(): ReactNode {\r\n  const { formatMessage } = useIntl();\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <>\r\n      <FieldList>\r\n        <Field>\r\n          <FormattedMessage\r\n            id=\"t_Measure_typing_speed_in:\"\r\n            defaultMessage=\"Measure typing speed in:\"\r\n          />\r\n        </Field>\r\n        <Field>\r\n          <OptionList\r\n            options={SpeedUnit.ALL.map((item) => ({\r\n              value: item.id,\r\n              name: formatMessage(item.name),\r\n            }))}\r\n            value={settings.get(uiProps.speedUnit).id}\r\n            onSelect={(id) => {\r\n              updateSettings(\r\n                settings.set(uiProps.speedUnit, SpeedUnit.ALL.get(id)),\r\n              );\r\n            }}\r\n          />\r\n        </Field>\r\n      </FieldList>\r\n      <Explainer>\r\n        <Description>\r\n          <FormattedMessage\r\n            id=\"settings.typingSpeedUnit.description\"\r\n            defaultMessage=\"For the purpose of typing measurement, each word is standardized to be five characters or keystrokes in English, including spaces and punctuation.\"\r\n          />\r\n        </Description>\r\n      </Explainer>\r\n    </>\r\n  );\r\n}\r\n","import { KeyboardProvider } from \"@mkboard/keyboard\";\r\nimport { Screen } from \"@mkboard/pages-shared\";\r\nimport { SettingsContext, useSettings } from \"@mkboard/settings\";\r\nimport { TypingSettings } from \"@mkboard/textinput-ui\";\r\nimport {\r\n  Button,\r\n  ExplainerBoundary,\r\n  Field,\r\n  FieldList,\r\n  Header,\r\n  Icon,\r\n  Spacer,\r\n  useView,\r\n} from \"@mkboard/widget\";\r\nimport { mdiCheckCircle, mdiDeleteForever } from \"@mdi/js\";\r\nimport { useState } from \"react\";\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\nimport { views } from \"../views.tsx\";\r\nimport { ExplainSettings } from \"./ExplainSettings.tsx\";\r\nimport { KeyboardSettings } from \"./KeyboardSettings.tsx\";\r\nimport { LessonSettings } from \"./LessonSettings.tsx\";\r\nimport { MiscSettings } from \"./MiscSettings.tsx\";\r\nimport * as styles from \"./SettingsScreen.module.less\";\r\n\r\nexport function SettingsScreen() {\r\n  const { settings, updateSettings } = useSettings();\r\n  const { setView } = useView(views);\r\n  const [newSettings, updateNewSettings] = useState(settings);\r\n  return (\r\n    <SettingsContext.Provider\r\n      value={{\r\n        settings: newSettings,\r\n        updateSettings: updateNewSettings,\r\n      }}\r\n    >\r\n      <KeyboardProvider>\r\n        <Content\r\n          onSubmit={() => {\r\n            updateSettings(newSettings);\r\n            setView(\"practice\");\r\n          }}\r\n        />\r\n      </KeyboardProvider>\r\n    </SettingsContext.Provider>\r\n  );\r\n}\r\n\r\nfunction Content({ onSubmit }: { readonly onSubmit: () => void }) {\r\n  const { formatMessage } = useIntl();\r\n  const { settings, updateSettings } = useSettings();\r\n  return (\r\n    <Screen>\r\n      <ExplainerBoundary>\r\n        <ExplainSettings />\r\n\r\n        <Header level={1}>\r\n          <FormattedMessage id=\"t_Lessons\" defaultMessage=\"Lessons\" />\r\n        </Header>\r\n        <LessonSettings />\r\n\r\n        <Spacer size={5} />\r\n\r\n        <Header level={1}>\r\n          <FormattedMessage id=\"t_Typing\" defaultMessage=\"Typing\" />\r\n        </Header>\r\n        <TypingSettings />\r\n\r\n        <Spacer size={5} />\r\n\r\n        <Header level={1}>\r\n          <FormattedMessage id=\"t_Keyboard\" defaultMessage=\"Keyboard\" />\r\n        </Header>\r\n        <KeyboardSettings />\r\n\r\n        <Spacer size={5} />\r\n\r\n        <Header level={1}>\r\n          <FormattedMessage\r\n            id=\"t_Miscellaneous\"\r\n            defaultMessage=\"Miscellaneous\"\r\n          />\r\n        </Header>\r\n        <MiscSettings />\r\n\r\n        <div className={styles.footer}>\r\n          <FieldList>\r\n            <Field>\r\n              <Button\r\n                size={16}\r\n                icon={<Icon shape={mdiDeleteForever} />}\r\n                label={formatMessage({\r\n                  id: \"t_Reset\",\r\n                  defaultMessage: \"Reset\",\r\n                })}\r\n                onClick={() => {\r\n                  updateSettings(settings.reset());\r\n                }}\r\n              />\r\n            </Field>\r\n            <Field.Filler />\r\n            <Field>\r\n              <Button\r\n                size={16}\r\n                icon={<Icon shape={mdiCheckCircle} />}\r\n                label={formatMessage({\r\n                  id: \"t_Done\",\r\n                  defaultMessage: \"Done\",\r\n                })}\r\n                onClick={() => {\r\n                  onSubmit();\r\n                }}\r\n              />\r\n            </Field>\r\n          </FieldList>\r\n        </div>\r\n      </ExplainerBoundary>\r\n    </Screen>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nvar _1 = \"ehRLq09HAG\";\nexport { _1 as \"footer\" }\n","import { PracticeScreen } from \"./practice/PracticeScreen.tsx\";\nimport { SettingsScreen } from \"./settings/SettingsScreen.tsx\";\n\nexport const views = {\n  practice: PracticeScreen,\n  settings: SettingsScreen,\n} as const;\n","import { KeyboardOptions, Layout } from \"@mkboard/keyboard\";\r\nimport { Settings } from \"@mkboard/settings\";\r\nimport { ViewSwitch } from \"@mkboard/widget\";\r\nimport { views } from \"./views.tsx\";\r\n\r\nsetDefaultLayout(window.navigator.language);\r\n\r\nfunction setDefaultLayout(localeId: string) {\r\n  const layout = Layout.findLayout(localeId);\r\n  if (layout != null) {\r\n    Settings.addDefaults(\r\n      KeyboardOptions.default()\r\n        .withLanguage(layout.language)\r\n        .withLayout(layout)\r\n        .save(new Settings()),\r\n    );\r\n  }\r\n}\r\n\r\nexport function PracticePage() {\r\n  return <ViewSwitch views={views} />;\r\n}\r\n","import { PracticePage } from \"@mkboard/page-practice\";\r\nimport { ResultLoader } from \"@mkboard/result-loader\";\r\n\r\nexport default function Page() {\r\n  return (\r\n    <ResultLoader>\r\n      <PracticePage />\r\n    </ResultLoader>\r\n  );\r\n}\r\n"],"names":["LessonLoader","children","fallback","settings","lessonType","get","type","language","from","model","Loader","id","result","keyboard","setResult","useState","useEffect","didCancel","async","GUIDED","wordList","WORDLIST","BOOKS","book","books","content","CUSTOM","CODE","NUMBERS","Error","load","catch","useLoader","useTimeout","tasks","ref","useRef","current","cancelAll","useTasks","pending","this","cancel","schedule","callback","timeout","delayed","place","root","rootBox","screenSize","screenBox","width","screenMargin","height","areaBox","x","y","fitToScreen","zoom","Math","min","floor","left","right","top","bottom","globalMoving","savedPositions","Map","Zoomer","rootRef","hover","setHover","moving","setMoving","setPosition","element","handler","ev","call","addEventListener","removeEventListener","useMouseWheel","sign","deltaY","preventDefault","target","Element","contains","movementX","movementY","set","className","clsx","style","position","transform","onMouseEnter","onMouseLeave","onClick","altKey","cloneElement","props","Icon","I","shape","mdi","Controls","memo","onChangeView","onResetLesson","onSkipLesson","onHelp","formatMessage","useIntl","setView","views","IconButton","icon","title","swap","isNew","Button","label","Popup","anchor","arrow","offset","arrowRef","options","useMemo","useLayoutEffect","centerToScreen","anchorBox","query","withOptions","alignToAnchor","zIndex","LearningRateDescription","lessonKey","learningRate","formatNumber","formatPercents","bestConfidence","Para","align","remainingLessons","certainty","values","value","KeyExtendedDetails","keyStats","samples","Box","alignItems","justifyContent","size","Indicators","state","keyStatsMap","summaryStats","lessonKeys","streakList","dailyGoal","setState","names","onKeyHoverIn","key","elem","onKeyHoverOut","goal","Portal","letter","KeyboardPresenter","focus","depressedKeys","toggledKeys","suffix","lastLesson","colors","pointers","showColors","histogram","misses","modifier","hits","misses2","hits2","DeferredKeyboardPresenter","Spotlight","margin","c1Ref","c2Ref","c3Ref","c4Ref","markerRef","c1","c2","c3","c4","marker","w","h","Meter","length","slideIndex","Array","fill","map","slide","index","Slide","Tour","onClose","setSlideIndex","slides","Children","toArray","currentSlide","selectPrev","selectNext","close","Backdrop","LinkButton","KeyDetailsChartDemo","targetSpeed","timeToType","bestTimeToType","confidence","example","PracticeTour","View","propView","Normal","Presenter","PureComponent","focusRef","createRef","view","tour","componentDidMount","render","lines","handleResetLesson","handleSkipLesson","handleKeyDown","handleKeyUp","handleInput","handleFocus","handleBlur","handleChangeView","handleHelp","handleTourClose","NormalLayout","modifiers","controls","textInput","textDisplaySettings","demo","onFocus","onBlur","onKeyDown","onKeyUp","onInput","Compact","CompactLayout","Bare","BareLayout","nextView","getNextView","blur","Award","toast","TrophyIcon","DailyGoalIcon","viewBox","d","EventAlert","event","displayEvent","autoClose","closeOnClick","pauseOnHover","LessonState","lesson","textInputSettings","constructor","progress","onResult","copy","update","generate","rng","resetLesson","text","skipLesson","feedback","remaining","codePoint","completed","fragment","timeStamp","Date","now","fromStats","layout","textType","steps","DailyGoalEvents","append","listener","LetterEvents","Set","findIncludedKeys","has","add","TopScoreEvents","score","previous","TopSpeedEvents","speed","Progress","letters","topSpeed","topScore","seedAsync","results","slice","total","seed","push","Controller","setKey","setLines","setDepressedKeys","lastLessonRef","onResultRef","keySet","hitCount","missCount","alphabet","sort","a","b","i","makeLastLesson","playSounds","code","useLessonState","ProgressUpdater","appendResults","done","setDone","loading","setLoading","controller","AbortController","signal","filter","then","abort","useProgress","validate","propExplainSettings","ExplainSettings","explainersVisible","toggleExplainers","FieldList","Filler","KeyboardSettings","legend","LayoutProp","KeyboardPreview","GeometryProp","formatLanguageName","formatLayoutName","formatFullLayoutName","compare","updateSettings","OptionList","selectableLanguages","item","name","onSelect","withLanguage","ALL","withGeometry","geometry","withZones","zones","save","selectableLayouts","withLayout","CheckBox","checked","emulation","Forward","disabled","emulate","onChange","None","Explainer","Description","Reverse","selectableGeometries","selectableZones","PointersPreview","setIndex","setSuffix","getExampleLetters","newIndex","delay","LessonLengthProp","Range","max","step","round","TargetSpeedProp","formatSpeed","ceil","BooksLessonSettings","paragraphs","paragraphIndex","Spacer","BookTextProcessing","lettersOnly","lowercase","CodeLessonSettings","syntax","flags","flag","includes","delete","exampleTexts","CustomTextLessonSettings","CustomTextInput","CustomTextStats","customText","CustomTextProcessing","TextField","placeholder","numWords","numUniqueWords","avgWordLength","locale","NameValue","randomize","DailyGoalSettings","formatDuration","minutes","AlphabetSizeProp","guided","alphabetSize","KeyboardOrderProp","keyboardOrder","NaturalWordsProp","naturalWords","RecoverKeysProp","recoverKeys","RepeatWordsProp","repeatWords","TextManglingProp","capitals","punctuators","GuidedLessonSettings","LessonPreview","BenfordProp","numbers","benford","chunks","Link","href","NumbersLessonSettings","WordListLessonSettings","WordListPreview","WordListStats","wordListSize","longWordsOnly","join","readOnly","wordCount","LessonSettings","TabList","selectedIndex","indexOf","at","tabBody","MiscSettings","SpeedUnitProp","speedUnit","Content","onSubmit","ExplainerBoundary","Header","level","reset","practice","newSettings","updateNewSettings","Provider","PracticePage","ViewSwitch","localeId","findLayout","addDefaults","default","setDefaultLayout","window","navigator","Page"],"sourceRoot":""}